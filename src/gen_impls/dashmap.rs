// AUTOGENERATED FILE, DO NOT EDIT
//
// Crate Name: `dashmap`
// Crate Version: `5.2.0`
// Skipping dashmap::DashMap due to hidden fields
// Skipping dashmap::DashSet due to hidden fields
// Skipping dashmap::ReadOnlyView due to hidden fields
// Skipping dashmap::iter::Iter due to hidden fields
// Skipping dashmap::iter::IterMut due to hidden fields
// Skipping dashmap::iter::OwningIter due to hidden fields
// Skipping dashmap::iter_set::Iter due to hidden fields
// Skipping dashmap::iter_set::OwningIter due to hidden fields
impl<'a, K, V, S> crate::Debug for dashmap::mapref::entry::Entry<'a, K, V, S>
where
    dashmap::mapref::entry::OccupiedEntry<'a, K, V, S>: crate::Debug,
    dashmap::mapref::entry::VacantEntry<'a, K, V, S>: crate::Debug,
{
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            dashmap::mapref::entry::Entry::Occupied(__0) => {
                f.debug_tuple("Occupied").field(__0).finish();
            }
            dashmap::mapref::entry::Entry::Vacant(__0) => {
                f.debug_tuple("Vacant").field(__0).finish();
            }
        }
    }
}
// Skipping dashmap::mapref::entry::OccupiedEntry due to hidden fields
// Skipping dashmap::mapref::entry::VacantEntry due to hidden fields
// Skipping dashmap::mapref::multiple::RefMulti due to hidden fields
// Skipping dashmap::mapref::multiple::RefMutMulti due to hidden fields
// Skipping dashmap::mapref::one::Ref due to hidden fields
// Skipping dashmap::mapref::one::RefMut due to hidden fields
// Skipping dashmap::setref::multiple::RefMulti due to hidden fields
// Skipping dashmap::setref::one::Ref due to hidden fields
impl<R> crate::Debug for dashmap::try_result::TryResult<R>
where
    R: crate::Debug,
{
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            dashmap::try_result::TryResult::Present(__0) => {
                f.debug_tuple("Present").field(__0).finish();
            }
            dashmap::try_result::TryResult::Absent => {
                f.debug_tuple("Absent").finish();
            }
            dashmap::try_result::TryResult::Locked => {
                f.debug_tuple("Locked").finish();
            }
        }
    }
}
