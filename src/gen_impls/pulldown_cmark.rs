// AUTOGENERATED FILE, DO NOT EDIT
//
// Crate Name: `pulldown_cmark`
// Crate Version: `0.9.2`
impl crate::Debug for pulldown_cmark::Alignment {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::None => {
                f.debug_tuple("None").finish();
            }
            Self::Left => {
                f.debug_tuple("Left").finish();
            }
            Self::Center => {
                f.debug_tuple("Center").finish();
            }
            Self::Right => {
                f.debug_tuple("Right").finish();
            }
        }
    }
}
impl<'a> crate::Debug for pulldown_cmark::BrokenLink<'a> {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("BrokenLink")
            .field("span", &self.span)
            .field("link_type", &self.link_type)
            .field("reference", &self.reference)
            .finish()
    }
}
impl<'a> crate::Debug for pulldown_cmark::CodeBlockKind<'a> {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Indented => {
                f.debug_tuple("Indented").finish();
            }
            Self::Fenced(__0) => {
                f.debug_tuple("Fenced").field(__0).finish();
            }
        }
    }
}
// Skiping pulldown_cmark::CowStr due to config rule CowStr
impl<'a> crate::Debug for pulldown_cmark::Event<'a> {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Start(__0) => {
                f.debug_tuple("Start").field(__0).finish();
            }
            Self::End(__0) => {
                f.debug_tuple("End").field(__0).finish();
            }
            Self::Text(__0) => {
                f.debug_tuple("Text").field(__0).finish();
            }
            Self::Code(__0) => {
                f.debug_tuple("Code").field(__0).finish();
            }
            Self::Html(__0) => {
                f.debug_tuple("Html").field(__0).finish();
            }
            Self::FootnoteReference(__0) => {
                f.debug_tuple("FootnoteReference").field(__0).finish();
            }
            Self::SoftBreak => {
                f.debug_tuple("SoftBreak").finish();
            }
            Self::HardBreak => {
                f.debug_tuple("HardBreak").finish();
            }
            Self::Rule => {
                f.debug_tuple("Rule").finish();
            }
            Self::TaskListMarker(__0) => {
                f.debug_tuple("TaskListMarker").field(__0).finish();
            }
        }
    }
}
impl crate::Debug for pulldown_cmark::HeadingLevel {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::H1 => {
                f.debug_tuple("H1").finish();
            }
            Self::H2 => {
                f.debug_tuple("H2").finish();
            }
            Self::H3 => {
                f.debug_tuple("H3").finish();
            }
            Self::H4 => {
                f.debug_tuple("H4").finish();
            }
            Self::H5 => {
                f.debug_tuple("H5").finish();
            }
            Self::H6 => {
                f.debug_tuple("H6").finish();
            }
        }
    }
}
// Skipping pulldown_cmark::InlineStr due to hidden fields
// Skipping pulldown_cmark::InvalidHeadingLevel due to hidden fields
impl<'a> crate::Debug for pulldown_cmark::LinkDef<'a> {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LinkDef")
            .field("dest", &self.dest)
            .field("title", &self.title)
            .field("span", &self.span)
            .finish()
    }
}
impl crate::Debug for pulldown_cmark::LinkType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Inline => {
                f.debug_tuple("Inline").finish();
            }
            Self::Reference => {
                f.debug_tuple("Reference").finish();
            }
            Self::ReferenceUnknown => {
                f.debug_tuple("ReferenceUnknown").finish();
            }
            Self::Collapsed => {
                f.debug_tuple("Collapsed").finish();
            }
            Self::CollapsedUnknown => {
                f.debug_tuple("CollapsedUnknown").finish();
            }
            Self::Shortcut => {
                f.debug_tuple("Shortcut").finish();
            }
            Self::ShortcutUnknown => {
                f.debug_tuple("ShortcutUnknown").finish();
            }
            Self::Autolink => {
                f.debug_tuple("Autolink").finish();
            }
            Self::Email => {
                f.debug_tuple("Email").finish();
            }
        }
    }
}
// Skipping pulldown_cmark::OffsetIter due to hidden fields
// Skipping pulldown_cmark::Options due to hidden fields
// Skipping pulldown_cmark::Parser due to hidden fields
// Skipping pulldown_cmark::RefDefs due to hidden fields
impl<'a> crate::Debug for pulldown_cmark::Tag<'a> {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Paragraph => {
                f.debug_tuple("Paragraph").finish();
            }
            Self::Heading(__0, __1, __2) => {
                f.debug_tuple("Heading")
                    .field(__0)
                    .field(__1)
                    .field(__2)
                    .finish();
            }
            Self::BlockQuote => {
                f.debug_tuple("BlockQuote").finish();
            }
            Self::CodeBlock(__0) => {
                f.debug_tuple("CodeBlock").field(__0).finish();
            }
            Self::List(__0) => {
                f.debug_tuple("List").field(__0).finish();
            }
            Self::Item => {
                f.debug_tuple("Item").finish();
            }
            Self::FootnoteDefinition(__0) => {
                f.debug_tuple("FootnoteDefinition").field(__0).finish();
            }
            Self::Table(__0) => {
                f.debug_tuple("Table").field(__0).finish();
            }
            Self::TableHead => {
                f.debug_tuple("TableHead").finish();
            }
            Self::TableRow => {
                f.debug_tuple("TableRow").finish();
            }
            Self::TableCell => {
                f.debug_tuple("TableCell").finish();
            }
            Self::Emphasis => {
                f.debug_tuple("Emphasis").finish();
            }
            Self::Strong => {
                f.debug_tuple("Strong").finish();
            }
            Self::Strikethrough => {
                f.debug_tuple("Strikethrough").finish();
            }
            Self::Link(__0, __1, __2) => {
                f.debug_tuple("Link")
                    .field(__0)
                    .field(__1)
                    .field(__2)
                    .finish();
            }
            Self::Image(__0, __1, __2) => {
                f.debug_tuple("Image")
                    .field(__0)
                    .field(__1)
                    .field(__2)
                    .finish();
            }
        }
    }
}
impl<W> crate::Debug for pulldown_cmark::escape::WriteWrapper<W>
where
    W: crate::Debug,
{
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_tuple("WriteWrapper").field(&self.0).finish()
    }
}
