// AUTOGENERATED FILE, DO NOT EDIT
//
// Crate Name: `aws_sdk_ec2`
// Crate Version: `0.15.0`
// Skipping aws_sdk_ec2::Client due to hidden fields
// Skipping aws_sdk_ec2::Config due to hidden fields
impl crate::Debug for aws_sdk_ec2::Error {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::client::fluent_builders::AcceptReservedInstancesExchangeQuote due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AcceptTransitGatewayMulticastDomainAssociations due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AcceptTransitGatewayPeeringAttachment due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AcceptTransitGatewayVpcAttachment due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AcceptVpcEndpointConnections
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AcceptVpcPeeringConnection due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AdvertiseByoipCidr due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::AllocateAddress
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AllocateHosts due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::AllocateIpamPoolCidr
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ApplySecurityGroupsToClientVpnTargetNetwork due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AssignIpv6Addresses due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AssignPrivateIpAddresses due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AssociateAddress due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::AssociateClientVpnTargetNetwork due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AssociateDhcpOptions due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AssociateEnclaveCertificateIamRole due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AssociateIamInstanceProfile
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AssociateInstanceEventWindow
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AssociateRouteTable due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AssociateSubnetCidrBlock due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AssociateTransitGatewayMulticastDomain due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AssociateTransitGatewayRouteTable due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AssociateTrunkInterface due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AssociateVpcCidrBlock due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AttachClassicLinkVpc due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AttachInternetGateway due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AttachNetworkInterface due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::AttachVolume due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AttachVpnGateway due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::AuthorizeClientVpnIngress due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AuthorizeSecurityGroupEgress
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::AuthorizeSecurityGroupIngress
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::BundleInstance due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::CancelBundleTask due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CancelCapacityReservation due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CancelCapacityReservationFleets due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CancelConversionTask due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::CancelExportTask
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CancelImportTask due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::CancelReservedInstancesListing
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CancelSpotFleetRequests due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CancelSpotInstanceRequests due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ConfirmProductInstance due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::CopyFpgaImage
// due to hidden fields Skipping aws_sdk_ec2::client::fluent_builders::CopyImage
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CopySnapshot due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateCapacityReservation due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateCapacityReservationFleet
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateCarrierGateway due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateClientVpnEndpoint due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateClientVpnRoute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateCustomerGateway due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateDefaultSubnet due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::CreateDefaultVpc
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateDhcpOptions due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateEgressOnlyInternetGateway due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateFleet due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::CreateFlowLogs due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::CreateFpgaImage
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateImage due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateInstanceEventWindow due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateInstanceExportTask due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateInternetGateway due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::CreateIpam due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateIpamPool due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::CreateIpamScope due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::CreateKeyPair
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateLaunchTemplate due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateLaunchTemplateVersion
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateLocalGatewayRoute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateLocalGatewayRouteTableVpcAssociation due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateManagedPrefixList due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::CreateNatGateway
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateNetworkAcl due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::CreateNetworkAclEntry
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateNetworkInsightsAccessScope due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateNetworkInsightsPath due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateNetworkInterface due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateNetworkInterfacePermission due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreatePlacementGroup due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreatePublicIpv4Pool due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateReplaceRootVolumeTask
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateReservedInstancesListing
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateRestoreImageTask due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::CreateRoute due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateRouteTable due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::CreateSecurityGroup due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateSnapshot due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::CreateSnapshots due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateSpotDatafeedSubscription
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateStoreImageTask due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::CreateSubnet due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateSubnetCidrReservation
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateTags due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateTrafficMirrorFilter due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateTrafficMirrorFilterRule
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateTrafficMirrorSession due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateTrafficMirrorTarget due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateTransitGateway due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateTransitGatewayConnect
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateTransitGatewayConnectPeer due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateTransitGatewayMulticastDomain due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateTransitGatewayPeeringAttachment due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateTransitGatewayPrefixListReference due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateTransitGatewayRoute due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateTransitGatewayRouteTable
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateTransitGatewayVpcAttachment due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateVolume due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::CreateVpc due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::CreateVpcEndpoint due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateVpcEndpointConnectionNotification due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateVpcEndpointServiceConfiguration due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateVpcPeeringConnection due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateVpnConnection due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateVpnConnectionRoute due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::CreateVpnGateway due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::DeleteCarrierGateway
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteClientVpnEndpoint due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteClientVpnRoute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteCustomerGateway due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteDhcpOptions due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteEgressOnlyInternetGateway due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteFleets due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::DeleteFlowLogs due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::DeleteFpgaImage
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteInstanceEventWindow due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteInternetGateway due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::DeleteIpam due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteIpamPool due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::DeleteIpamScope due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::DeleteKeyPair
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteLaunchTemplate due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteLaunchTemplateVersions
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteLocalGatewayRoute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteLocalGatewayRouteTableVpcAssociation due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteManagedPrefixList due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::DeleteNatGateway
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteNetworkAcl due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::DeleteNetworkAclEntry
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteNetworkInsightsAccessScope due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteNetworkInsightsAccessScopeAnalysis due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteNetworkInsightsAnalysis
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteNetworkInsightsPath due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteNetworkInterface due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteNetworkInterfacePermission due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeletePlacementGroup due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeletePublicIpv4Pool due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteQueuedReservedInstances
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteRoute due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::DeleteRouteTable due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteSecurityGroup due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::DeleteSnapshot
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteSpotDatafeedSubscription
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteSubnet due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteSubnetCidrReservation
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteTags due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteTrafficMirrorFilter due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteTrafficMirrorFilterRule
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteTrafficMirrorSession due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteTrafficMirrorTarget due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteTransitGateway due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteTransitGatewayConnect
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteTransitGatewayConnectPeer due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteTransitGatewayMulticastDomain due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteTransitGatewayPeeringAttachment due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteTransitGatewayPrefixListReference due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteTransitGatewayRoute due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteTransitGatewayRouteTable
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteTransitGatewayVpcAttachment due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteVolume due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::DeleteVpc due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteVpcEndpointConnectionNotifications due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteVpcEndpointServiceConfigurations due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteVpcEndpoints due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteVpcPeeringConnection due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteVpnConnection due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteVpnConnectionRoute due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeleteVpnGateway due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::DeprovisionByoipCidr
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeprovisionIpamPoolCidr due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeprovisionPublicIpv4PoolCidr
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeregisterImage due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeregisterInstanceEventNotificationAttributes due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeregisterTransitGatewayMulticastGroupMembers due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DeregisterTransitGatewayMulticastGroupSources due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeAccountAttributes due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeAddresses due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeAddressesAttribute due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeAggregateIdFormat due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeAvailabilityZones due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeBundleTasks due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeByoipCidrs due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeCapacityReservationFleets due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeCapacityReservations
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeCarrierGateways due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeClassicLinkInstances
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeClientVpnAuthorizationRules due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeClientVpnConnections
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeClientVpnEndpoints due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeClientVpnRoutes due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeClientVpnTargetNetworks due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeCoipPools due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeConversionTasks due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeCustomerGateways due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeDhcpOptions due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeEgressOnlyInternetGateways due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeElasticGpus due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeExportImageTasks due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeExportTasks due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeFastLaunchImages due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeFastSnapshotRestores
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeFleetHistory due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeFleetInstances due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::DescribeFleets
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeFlowLogs due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeFpgaImageAttribute due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeFpgaImages due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeHostReservationOfferings due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeHostReservations due
// to hidden fields Skipping aws_sdk_ec2::client::fluent_builders::DescribeHosts
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeIamInstanceProfileAssociations due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeIdFormat due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeIdentityIdFormat due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeImageAttribute due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::DescribeImages
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeImportImageTasks due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeImportSnapshotTasks
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeInstanceAttribute due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeInstanceCreditSpecifications due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeInstanceEventNotificationAttributes due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeInstanceEventWindows
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeInstanceStatus due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeInstanceTypeOfferings
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeInstanceTypes due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeInstances due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeInternetGateways due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeIpamPools due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeIpamScopes due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::DescribeIpams
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeIpv6Pools due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::DescribeKeyPairs
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeLaunchTemplateVersions
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeLaunchTemplates due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeLocalGatewayRouteTableVpcAssociations due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeLocalGatewayRouteTables due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeLocalGatewayVirtualInterfaceGroups due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeLocalGatewayVirtualInterfaces due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeLocalGateways due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeManagedPrefixLists due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeMovingAddresses due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeNatGateways due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeNetworkAcls due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeNetworkInsightsAccessScopeAnalyses due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeNetworkInsightsAccessScopes due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeNetworkInsightsAnalyses due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeNetworkInsightsPaths
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeNetworkInterfaceAttribute due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeNetworkInterfacePermissions due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeNetworkInterfaces due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribePlacementGroups due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribePrefixLists due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribePrincipalIdFormat due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribePublicIpv4Pools due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::DescribeRegions
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeReplaceRootVolumeTasks
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeReservedInstances due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeReservedInstancesListings due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeReservedInstancesModifications due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeReservedInstancesOfferings due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeRouteTables due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeScheduledInstanceAvailability due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeScheduledInstances due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeSecurityGroupReferences due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeSecurityGroupRules due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeSecurityGroups due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeSnapshotAttribute due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeSnapshotTierStatus due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeSnapshots due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeSpotDatafeedSubscription due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeSpotFleetInstances due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeSpotFleetRequestHistory due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeSpotFleetRequests due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeSpotInstanceRequests
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeSpotPriceHistory due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeStaleSecurityGroups
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeStoreImageTasks due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::DescribeSubnets
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeTags due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeTrafficMirrorFilters
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeTrafficMirrorSessions
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeTrafficMirrorTargets
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeTransitGatewayAttachments due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeTransitGatewayConnectPeers due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeTransitGatewayConnects
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeTransitGatewayMulticastDomains due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeTransitGatewayPeeringAttachments due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeTransitGatewayRouteTables due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeTransitGatewayVpcAttachments due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeTransitGateways due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeTrunkInterfaceAssociations due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeVolumeAttribute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeVolumeStatus due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::DescribeVolumes
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeVolumesModifications
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeVpcAttribute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeVpcClassicLink due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeVpcClassicLinkDnsSupport due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeVpcEndpointConnectionNotifications due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeVpcEndpointConnections
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeVpcEndpointServiceConfigurations due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeVpcEndpointServicePermissions due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeVpcEndpointServices
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeVpcEndpoints due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeVpcPeeringConnections
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeVpcs due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::DescribeVpnConnections
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DescribeVpnGateways due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DetachClassicLinkVpc due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DetachInternetGateway due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DetachNetworkInterface due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::DetachVolume due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DetachVpnGateway due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisableEbsEncryptionByDefault
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisableFastLaunch due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisableFastSnapshotRestores
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisableImageDeprecation due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisableIpamOrganizationAdminAccount due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisableSerialConsoleAccess due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisableTransitGatewayRouteTablePropagation due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisableVgwRoutePropagation due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisableVpcClassicLink due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisableVpcClassicLinkDnsSupport due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisassociateAddress due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisassociateClientVpnTargetNetwork due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisassociateEnclaveCertificateIamRole due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisassociateIamInstanceProfile
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisassociateInstanceEventWindow due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisassociateRouteTable due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisassociateSubnetCidrBlock
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisassociateTransitGatewayMulticastDomain due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisassociateTransitGatewayRouteTable due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisassociateTrunkInterface due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::DisassociateVpcCidrBlock due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::EnableEbsEncryptionByDefault
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::EnableFastLaunch due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::EnableFastSnapshotRestores due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::EnableImageDeprecation due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::EnableIpamOrganizationAdminAccount due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::EnableSerialConsoleAccess due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::EnableTransitGatewayRouteTablePropagation due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::EnableVgwRoutePropagation due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::EnableVolumeIO due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::EnableVpcClassicLink
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::EnableVpcClassicLinkDnsSupport
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ExportClientVpnClientCertificateRevocationList due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ExportClientVpnClientConfiguration due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ExportImage due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::ExportTransitGatewayRoutes due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetAssociatedEnclaveCertificateIamRoles due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetAssociatedIpv6PoolCidrs due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetCapacityReservationUsage
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetCoipPoolUsage due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::GetConsoleOutput due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetConsoleScreenshot due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetDefaultCreditSpecification
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetEbsDefaultKmsKeyId due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetEbsEncryptionByDefault due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetFlowLogsIntegrationTemplate
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetGroupsForCapacityReservation due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetHostReservationPurchasePreview due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetInstanceTypesFromInstanceRequirements due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetInstanceUefiData due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetIpamAddressHistory due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetIpamPoolAllocations due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::GetIpamPoolCidrs
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetIpamResourceCidrs due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetLaunchTemplateData due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetManagedPrefixListAssociations due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetManagedPrefixListEntries
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetNetworkInsightsAccessScopeAnalysisFindings due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetNetworkInsightsAccessScopeContent due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetPasswordData due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetReservedInstancesExchangeQuote due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetSerialConsoleAccessStatus
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetSpotPlacementScores due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetSubnetCidrReservations due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetTransitGatewayAttachmentPropagations due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetTransitGatewayMulticastDomainAssociations due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetTransitGatewayPrefixListReferences due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetTransitGatewayRouteTableAssociations due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetTransitGatewayRouteTablePropagations due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetVpnConnectionDeviceSampleConfiguration due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::GetVpnConnectionDeviceTypes
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ImportClientVpnClientCertificateRevocationList due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ImportImage due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::ImportInstance due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::ImportKeyPair
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ImportSnapshot due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::ImportVolume due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ListImagesInRecycleBin due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ListSnapshotsInRecycleBin due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyAddressAttribute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyAvailabilityZoneGroup
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyCapacityReservation due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyCapacityReservationFleet
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyClientVpnEndpoint due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyDefaultCreditSpecification due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyEbsDefaultKmsKeyId due
// to hidden fields Skipping aws_sdk_ec2::client::fluent_builders::ModifyFleet
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyFpgaImageAttribute due
// to hidden fields Skipping aws_sdk_ec2::client::fluent_builders::ModifyHosts
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyIdFormat due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::ModifyIdentityIdFormat
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyImageAttribute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyInstanceAttribute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyInstanceCapacityReservationAttributes due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyInstanceCreditSpecification due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyInstanceEventStartTime
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyInstanceEventWindow due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyInstanceMaintenanceOptions due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyInstanceMetadataOptions
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyInstancePlacement due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::ModifyIpam due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyIpamPool due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::ModifyIpamResourceCidr
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyIpamScope due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::ModifyLaunchTemplate
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyManagedPrefixList due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyNetworkInterfaceAttribute due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyPrivateDnsNameOptions
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyReservedInstances due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifySecurityGroupRules due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifySnapshotAttribute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifySnapshotTier due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifySpotFleetRequest due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifySubnetAttribute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyTrafficMirrorFilterNetworkServices due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyTrafficMirrorFilterRule
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyTrafficMirrorSession due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyTransitGateway due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyTransitGatewayPrefixListReference due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyTransitGatewayVpcAttachment due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyVolume due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::ModifyVolumeAttribute
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyVpcAttribute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyVpcEndpoint due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyVpcEndpointConnectionNotification due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyVpcEndpointServiceConfiguration due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyVpcEndpointServicePayerResponsibility due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyVpcEndpointServicePermissions due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyVpcPeeringConnectionOptions due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyVpcTenancy due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::ModifyVpnConnection due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyVpnConnectionOptions due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyVpnTunnelCertificate due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ModifyVpnTunnelOptions due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::MonitorInstances
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::MoveAddressToVpc due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::MoveByoipCidrToIpam due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ProvisionByoipCidr due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ProvisionIpamPoolCidr due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ProvisionPublicIpv4PoolCidr
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::PurchaseHostReservation due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::PurchaseReservedInstancesOffering due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::PurchaseScheduledInstances due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RebootInstances due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::RegisterImage due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RegisterInstanceEventNotificationAttributes due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RegisterTransitGatewayMulticastGroupMembers due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RegisterTransitGatewayMulticastGroupSources due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RejectTransitGatewayMulticastDomainAssociations due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RejectTransitGatewayPeeringAttachment due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RejectTransitGatewayVpcAttachment due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RejectVpcEndpointConnections
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RejectVpcPeeringConnection due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ReleaseAddress due to hidden
// fields Skipping aws_sdk_ec2::client::fluent_builders::ReleaseHosts due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ReleaseIpamPoolAllocation due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ReplaceIamInstanceProfileAssociation due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ReplaceNetworkAclAssociation
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ReplaceNetworkAclEntry due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::ReplaceRoute due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ReplaceRouteTableAssociation
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ReplaceTransitGatewayRoute due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ReportInstanceStatus due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::RequestSpotFleet
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RequestSpotInstances due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ResetAddressAttribute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ResetEbsDefaultKmsKeyId due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ResetFpgaImageAttribute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ResetImageAttribute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ResetInstanceAttribute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ResetNetworkInterfaceAttribute
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::ResetSnapshotAttribute due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RestoreAddressToClassic due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RestoreImageFromRecycleBin due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RestoreManagedPrefixListVersion due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RestoreSnapshotFromRecycleBin
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RestoreSnapshotTier due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RevokeClientVpnIngress due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RevokeSecurityGroupEgress due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RevokeSecurityGroupIngress due
// to hidden fields Skipping aws_sdk_ec2::client::fluent_builders::RunInstances
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::RunScheduledInstances due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::SearchLocalGatewayRoutes due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::SearchTransitGatewayMulticastGroups due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::SearchTransitGatewayRoutes due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::SendDiagnosticInterrupt due to
// hidden fields Skipping aws_sdk_ec2::client::fluent_builders::StartInstances
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::StartNetworkInsightsAccessScopeAnalysis due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::StartNetworkInsightsAnalysis
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::StartVpcEndpointServicePrivateDnsVerification due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::StopInstances due to hidden
// fields
// Skipping aws_sdk_ec2::client::fluent_builders::TerminateClientVpnConnections
// due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::TerminateInstances due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::UnassignIpv6Addresses due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::UnassignPrivateIpAddresses due
// to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::UnmonitorInstances due to
// hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::UpdateSecurityGroupRuleDescriptionsEgress due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::UpdateSecurityGroupRuleDescriptionsIngress due to hidden fields
// Skipping aws_sdk_ec2::client::fluent_builders::WithdrawByoipCidr due to
// hidden fields Skipping aws_sdk_ec2::config::Builder due to hidden fields
// Skipping aws_sdk_ec2::error::AcceptReservedInstancesExchangeQuoteError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::AcceptReservedInstancesExchangeQuoteErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AcceptTransitGatewayMulticastDomainAssociationsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AcceptTransitGatewayMulticastDomainAssociationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AcceptTransitGatewayPeeringAttachmentError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AcceptTransitGatewayPeeringAttachmentErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AcceptTransitGatewayVpcAttachmentError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::AcceptTransitGatewayVpcAttachmentErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AcceptVpcEndpointConnectionsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::AcceptVpcEndpointConnectionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AcceptVpcPeeringConnectionError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::AcceptVpcPeeringConnectionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AdvertiseByoipCidrError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AdvertiseByoipCidrErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AllocateAddressError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AllocateAddressErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AllocateHostsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AllocateHostsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AllocateIpamPoolCidrError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AllocateIpamPoolCidrErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ApplySecurityGroupsToClientVpnTargetNetworkError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ApplySecurityGroupsToClientVpnTargetNetworkErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AssignIpv6AddressesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AssignIpv6AddressesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AssignPrivateIpAddressesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::AssignPrivateIpAddressesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AssociateAddressError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AssociateAddressErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AssociateClientVpnTargetNetworkError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::AssociateClientVpnTargetNetworkErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AssociateDhcpOptionsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AssociateDhcpOptionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AssociateEnclaveCertificateIamRoleError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::AssociateEnclaveCertificateIamRoleErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AssociateIamInstanceProfileError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::AssociateIamInstanceProfileErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AssociateInstanceEventWindowError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::AssociateInstanceEventWindowErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AssociateRouteTableError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AssociateRouteTableErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AssociateSubnetCidrBlockError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::AssociateSubnetCidrBlockErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AssociateTransitGatewayMulticastDomainError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AssociateTransitGatewayMulticastDomainErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AssociateTransitGatewayRouteTableError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::AssociateTransitGatewayRouteTableErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AssociateTrunkInterfaceError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::AssociateTrunkInterfaceErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AssociateVpcCidrBlockError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AssociateVpcCidrBlockErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AttachClassicLinkVpcError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AttachClassicLinkVpcErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AttachInternetGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AttachInternetGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AttachNetworkInterfaceError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AttachNetworkInterfaceErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AttachVolumeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AttachVolumeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AttachVpnGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::AttachVpnGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AuthorizeClientVpnIngressError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::AuthorizeClientVpnIngressErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AuthorizeSecurityGroupEgressError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::AuthorizeSecurityGroupEgressErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::AuthorizeSecurityGroupIngressError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::AuthorizeSecurityGroupIngressErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::BundleInstanceError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::BundleInstanceErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CancelBundleTaskError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CancelBundleTaskErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CancelCapacityReservationError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CancelCapacityReservationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CancelCapacityReservationFleetsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::CancelCapacityReservationFleetsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CancelConversionTaskError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CancelConversionTaskErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CancelExportTaskError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CancelExportTaskErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CancelImportTaskError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CancelImportTaskErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CancelReservedInstancesListingError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::CancelReservedInstancesListingErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CancelSpotFleetRequestsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CancelSpotFleetRequestsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CancelSpotInstanceRequestsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CancelSpotInstanceRequestsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ConfirmProductInstanceError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ConfirmProductInstanceErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CopyFpgaImageError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CopyFpgaImageErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CopyImageError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CopyImageErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CopySnapshotError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CopySnapshotErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateCapacityReservationError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateCapacityReservationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateCapacityReservationFleetError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateCapacityReservationFleetErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateCarrierGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateCarrierGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateClientVpnEndpointError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateClientVpnEndpointErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateClientVpnRouteError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateClientVpnRouteErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateCustomerGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateCustomerGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateDefaultSubnetError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateDefaultSubnetErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateDefaultVpcError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateDefaultVpcErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateDhcpOptionsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateDhcpOptionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateEgressOnlyInternetGatewayError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateEgressOnlyInternetGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateFleetError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateFleetErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateFlowLogsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateFlowLogsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateFpgaImageError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateFpgaImageErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateImageError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateImageErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateInstanceEventWindowError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateInstanceEventWindowErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateInstanceExportTaskError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateInstanceExportTaskErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateInternetGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateInternetGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateIpamError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateIpamErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateIpamPoolError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateIpamPoolErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateIpamScopeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateIpamScopeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateKeyPairError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateKeyPairErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateLaunchTemplateError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateLaunchTemplateErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateLaunchTemplateVersionError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateLaunchTemplateVersionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateLocalGatewayRouteError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateLocalGatewayRouteErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateLocalGatewayRouteTableVpcAssociationError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateLocalGatewayRouteTableVpcAssociationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateManagedPrefixListError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateManagedPrefixListErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateNatGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateNatGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateNetworkAclEntryError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateNetworkAclEntryErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateNetworkAclError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateNetworkAclErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateNetworkInsightsAccessScopeError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateNetworkInsightsAccessScopeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateNetworkInsightsPathError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateNetworkInsightsPathErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateNetworkInterfaceError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateNetworkInterfaceErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateNetworkInterfacePermissionError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateNetworkInterfacePermissionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreatePlacementGroupError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreatePlacementGroupErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreatePublicIpv4PoolError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreatePublicIpv4PoolErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateReplaceRootVolumeTaskError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateReplaceRootVolumeTaskErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateReservedInstancesListingError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateReservedInstancesListingErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateRestoreImageTaskError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateRestoreImageTaskErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateRouteError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateRouteErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateRouteTableError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateRouteTableErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateSecurityGroupError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateSecurityGroupErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateSnapshotError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateSnapshotErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateSnapshotsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateSnapshotsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateSpotDatafeedSubscriptionError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateSpotDatafeedSubscriptionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateStoreImageTaskError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateStoreImageTaskErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateSubnetCidrReservationError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateSubnetCidrReservationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateSubnetError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateSubnetErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateTagsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateTagsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateTrafficMirrorFilterError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateTrafficMirrorFilterErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateTrafficMirrorFilterRuleError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateTrafficMirrorFilterRuleErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateTrafficMirrorSessionError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateTrafficMirrorSessionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateTrafficMirrorTargetError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateTrafficMirrorTargetErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateTransitGatewayConnectError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateTransitGatewayConnectErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateTransitGatewayConnectPeerError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateTransitGatewayConnectPeerErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateTransitGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateTransitGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateTransitGatewayMulticastDomainError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateTransitGatewayMulticastDomainErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateTransitGatewayPeeringAttachmentError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateTransitGatewayPeeringAttachmentErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateTransitGatewayPrefixListReferenceError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateTransitGatewayPrefixListReferenceErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateTransitGatewayRouteError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateTransitGatewayRouteErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateTransitGatewayRouteTableError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateTransitGatewayRouteTableErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateTransitGatewayVpcAttachmentError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateTransitGatewayVpcAttachmentErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateVolumeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateVolumeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateVpcEndpointConnectionNotificationError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateVpcEndpointConnectionNotificationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateVpcEndpointError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateVpcEndpointErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateVpcEndpointServiceConfigurationError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateVpcEndpointServiceConfigurationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateVpcError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateVpcErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateVpcPeeringConnectionError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateVpcPeeringConnectionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateVpnConnectionError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateVpnConnectionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateVpnConnectionRouteError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::CreateVpnConnectionRouteErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::CreateVpnGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::CreateVpnGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteCarrierGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteCarrierGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteClientVpnEndpointError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteClientVpnEndpointErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteClientVpnRouteError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteClientVpnRouteErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteCustomerGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteCustomerGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteDhcpOptionsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteDhcpOptionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteEgressOnlyInternetGatewayError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteEgressOnlyInternetGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteFleetsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteFleetsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteFlowLogsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteFlowLogsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteFpgaImageError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteFpgaImageErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteInstanceEventWindowError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteInstanceEventWindowErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteInternetGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteInternetGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteIpamError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteIpamErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteIpamPoolError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteIpamPoolErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteIpamScopeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteIpamScopeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteKeyPairError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteKeyPairErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteLaunchTemplateError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteLaunchTemplateErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteLaunchTemplateVersionsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteLaunchTemplateVersionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteLocalGatewayRouteError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteLocalGatewayRouteErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteLocalGatewayRouteTableVpcAssociationError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteLocalGatewayRouteTableVpcAssociationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteManagedPrefixListError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteManagedPrefixListErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteNatGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteNatGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteNetworkAclEntryError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteNetworkAclEntryErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteNetworkAclError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteNetworkAclErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteNetworkInsightsAccessScopeAnalysisError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteNetworkInsightsAccessScopeAnalysisErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteNetworkInsightsAccessScopeError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteNetworkInsightsAccessScopeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteNetworkInsightsAnalysisError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteNetworkInsightsAnalysisErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteNetworkInsightsPathError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteNetworkInsightsPathErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteNetworkInterfaceError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteNetworkInterfaceErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteNetworkInterfacePermissionError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteNetworkInterfacePermissionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeletePlacementGroupError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeletePlacementGroupErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeletePublicIpv4PoolError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeletePublicIpv4PoolErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteQueuedReservedInstancesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteQueuedReservedInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteRouteError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteRouteErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteRouteTableError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteRouteTableErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteSecurityGroupError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteSecurityGroupErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteSnapshotError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteSnapshotErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteSpotDatafeedSubscriptionError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteSpotDatafeedSubscriptionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteSubnetCidrReservationError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteSubnetCidrReservationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteSubnetError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteSubnetErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteTagsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteTagsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteTrafficMirrorFilterError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteTrafficMirrorFilterErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteTrafficMirrorFilterRuleError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteTrafficMirrorFilterRuleErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteTrafficMirrorSessionError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteTrafficMirrorSessionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteTrafficMirrorTargetError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteTrafficMirrorTargetErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteTransitGatewayConnectError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteTransitGatewayConnectErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteTransitGatewayConnectPeerError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteTransitGatewayConnectPeerErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteTransitGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteTransitGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteTransitGatewayMulticastDomainError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteTransitGatewayMulticastDomainErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteTransitGatewayPeeringAttachmentError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteTransitGatewayPeeringAttachmentErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteTransitGatewayPrefixListReferenceError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteTransitGatewayPrefixListReferenceErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteTransitGatewayRouteError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteTransitGatewayRouteErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteTransitGatewayRouteTableError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteTransitGatewayRouteTableErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteTransitGatewayVpcAttachmentError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteTransitGatewayVpcAttachmentErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteVolumeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteVolumeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteVpcEndpointConnectionNotificationsError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteVpcEndpointConnectionNotificationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteVpcEndpointServiceConfigurationsError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteVpcEndpointServiceConfigurationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteVpcEndpointsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteVpcEndpointsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteVpcError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteVpcErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteVpcPeeringConnectionError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteVpcPeeringConnectionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteVpnConnectionError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteVpnConnectionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteVpnConnectionRouteError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeleteVpnConnectionRouteErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeleteVpnGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeleteVpnGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeprovisionByoipCidrError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeprovisionByoipCidrErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeprovisionIpamPoolCidrError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeprovisionIpamPoolCidrErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeprovisionPublicIpv4PoolCidrError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DeprovisionPublicIpv4PoolCidrErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeregisterImageError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeregisterImageErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeregisterInstanceEventNotificationAttributesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeregisterInstanceEventNotificationAttributesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeregisterTransitGatewayMulticastGroupMembersError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeregisterTransitGatewayMulticastGroupMembersErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DeregisterTransitGatewayMulticastGroupSourcesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DeregisterTransitGatewayMulticastGroupSourcesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeAccountAttributesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeAccountAttributesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeAddressesAttributeError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeAddressesAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeAddressesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeAddressesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeAggregateIdFormatError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeAggregateIdFormatErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeAvailabilityZonesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeAvailabilityZonesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeBundleTasksError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeBundleTasksErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeByoipCidrsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeByoipCidrsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeCapacityReservationFleetsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeCapacityReservationFleetsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeCapacityReservationsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeCapacityReservationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeCarrierGatewaysError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeCarrierGatewaysErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeClassicLinkInstancesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeClassicLinkInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeClientVpnAuthorizationRulesError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeClientVpnAuthorizationRulesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeClientVpnConnectionsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeClientVpnConnectionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeClientVpnEndpointsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeClientVpnEndpointsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeClientVpnRoutesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeClientVpnRoutesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeClientVpnTargetNetworksError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeClientVpnTargetNetworksErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeCoipPoolsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeCoipPoolsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeConversionTasksError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeConversionTasksErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeCustomerGatewaysError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeCustomerGatewaysErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeDhcpOptionsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeDhcpOptionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeEgressOnlyInternetGatewaysError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeEgressOnlyInternetGatewaysErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeElasticGpusError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeElasticGpusErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeExportImageTasksError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeExportImageTasksErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeExportTasksError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeExportTasksErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeFastLaunchImagesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeFastLaunchImagesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeFastSnapshotRestoresError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeFastSnapshotRestoresErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeFleetHistoryError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeFleetHistoryErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeFleetInstancesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeFleetInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeFleetsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeFleetsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeFlowLogsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeFlowLogsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeFpgaImageAttributeError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeFpgaImageAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeFpgaImagesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeFpgaImagesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeHostReservationOfferingsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeHostReservationOfferingsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeHostReservationsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeHostReservationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeHostsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeHostsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeIamInstanceProfileAssociationsError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeIamInstanceProfileAssociationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeIdFormatError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeIdFormatErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeIdentityIdFormatError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeIdentityIdFormatErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeImageAttributeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeImageAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeImagesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeImagesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeImportImageTasksError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeImportImageTasksErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeImportSnapshotTasksError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeImportSnapshotTasksErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeInstanceAttributeError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeInstanceAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeInstanceCreditSpecificationsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeInstanceCreditSpecificationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeInstanceEventNotificationAttributesError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeInstanceEventNotificationAttributesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeInstanceEventWindowsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeInstanceEventWindowsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeInstanceStatusError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeInstanceStatusErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeInstanceTypeOfferingsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeInstanceTypeOfferingsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeInstanceTypesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeInstanceTypesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeInstancesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeInternetGatewaysError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeInternetGatewaysErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeIpamPoolsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeIpamPoolsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeIpamScopesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeIpamScopesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeIpamsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeIpamsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeIpv6PoolsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeIpv6PoolsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeKeyPairsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeKeyPairsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeLaunchTemplateVersionsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeLaunchTemplateVersionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeLaunchTemplatesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeLaunchTemplatesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsError due to hidden fields
impl crate::Debug
    for aws_sdk_ec2::error::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsErrorKind
{
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeLocalGatewayRouteTableVpcAssociationsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeLocalGatewayRouteTableVpcAssociationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeLocalGatewayRouteTablesError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeLocalGatewayRouteTablesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeLocalGatewayVirtualInterfaceGroupsError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeLocalGatewayVirtualInterfaceGroupsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeLocalGatewayVirtualInterfacesError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeLocalGatewayVirtualInterfacesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeLocalGatewaysError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeLocalGatewaysErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeManagedPrefixListsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeManagedPrefixListsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeMovingAddressesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeMovingAddressesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeNatGatewaysError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeNatGatewaysErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeNetworkAclsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeNetworkAclsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeNetworkInsightsAccessScopeAnalysesError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeNetworkInsightsAccessScopeAnalysesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeNetworkInsightsAccessScopesError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeNetworkInsightsAccessScopesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeNetworkInsightsAnalysesError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeNetworkInsightsAnalysesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeNetworkInsightsPathsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeNetworkInsightsPathsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeNetworkInterfaceAttributeError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeNetworkInterfaceAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeNetworkInterfacePermissionsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeNetworkInterfacePermissionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeNetworkInterfacesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeNetworkInterfacesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribePlacementGroupsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribePlacementGroupsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribePrefixListsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribePrefixListsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribePrincipalIdFormatError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribePrincipalIdFormatErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribePublicIpv4PoolsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribePublicIpv4PoolsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeRegionsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeRegionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeReplaceRootVolumeTasksError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeReplaceRootVolumeTasksErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeReservedInstancesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeReservedInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeReservedInstancesListingsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeReservedInstancesListingsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeReservedInstancesModificationsError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeReservedInstancesModificationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeReservedInstancesOfferingsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeReservedInstancesOfferingsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeRouteTablesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeRouteTablesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeScheduledInstanceAvailabilityError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeScheduledInstanceAvailabilityErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeScheduledInstancesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeScheduledInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeSecurityGroupReferencesError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeSecurityGroupReferencesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeSecurityGroupRulesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeSecurityGroupRulesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeSecurityGroupsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeSecurityGroupsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeSnapshotAttributeError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeSnapshotAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeSnapshotTierStatusError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeSnapshotTierStatusErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeSnapshotsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeSnapshotsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeSpotDatafeedSubscriptionError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeSpotDatafeedSubscriptionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeSpotFleetInstancesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeSpotFleetInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeSpotFleetRequestHistoryError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeSpotFleetRequestHistoryErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeSpotFleetRequestsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeSpotFleetRequestsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeSpotInstanceRequestsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeSpotInstanceRequestsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeSpotPriceHistoryError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeSpotPriceHistoryErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeStaleSecurityGroupsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeStaleSecurityGroupsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeStoreImageTasksError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeStoreImageTasksErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeSubnetsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeSubnetsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeTagsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeTagsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeTrafficMirrorFiltersError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeTrafficMirrorFiltersErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeTrafficMirrorSessionsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeTrafficMirrorSessionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeTrafficMirrorTargetsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeTrafficMirrorTargetsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeTransitGatewayAttachmentsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeTransitGatewayAttachmentsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeTransitGatewayConnectPeersError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeTransitGatewayConnectPeersErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeTransitGatewayConnectsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeTransitGatewayConnectsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeTransitGatewayMulticastDomainsError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeTransitGatewayMulticastDomainsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeTransitGatewayPeeringAttachmentsError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeTransitGatewayPeeringAttachmentsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeTransitGatewayRouteTablesError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeTransitGatewayRouteTablesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeTransitGatewayVpcAttachmentsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeTransitGatewayVpcAttachmentsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeTransitGatewaysError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeTransitGatewaysErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeTrunkInterfaceAssociationsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeTrunkInterfaceAssociationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVolumeAttributeError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVolumeAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVolumeStatusError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVolumeStatusErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVolumesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVolumesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVolumesModificationsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVolumesModificationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVpcAttributeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVpcAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVpcClassicLinkDnsSupportError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVpcClassicLinkDnsSupportErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVpcClassicLinkError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVpcClassicLinkErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVpcEndpointConnectionNotificationsError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVpcEndpointConnectionNotificationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVpcEndpointConnectionsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVpcEndpointConnectionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVpcEndpointServiceConfigurationsError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVpcEndpointServiceConfigurationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVpcEndpointServicePermissionsError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVpcEndpointServicePermissionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVpcEndpointServicesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVpcEndpointServicesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVpcEndpointsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVpcEndpointsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVpcPeeringConnectionsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVpcPeeringConnectionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVpcsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVpcsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVpnConnectionsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVpnConnectionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DescribeVpnGatewaysError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DescribeVpnGatewaysErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DetachClassicLinkVpcError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DetachClassicLinkVpcErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DetachInternetGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DetachInternetGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DetachNetworkInterfaceError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DetachNetworkInterfaceErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DetachVolumeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DetachVolumeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DetachVpnGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DetachVpnGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisableEbsEncryptionByDefaultError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DisableEbsEncryptionByDefaultErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisableFastLaunchError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DisableFastLaunchErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisableFastSnapshotRestoresError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DisableFastSnapshotRestoresErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisableImageDeprecationError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DisableImageDeprecationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisableIpamOrganizationAdminAccountError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DisableIpamOrganizationAdminAccountErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisableSerialConsoleAccessError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DisableSerialConsoleAccessErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisableTransitGatewayRouteTablePropagationError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DisableTransitGatewayRouteTablePropagationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisableVgwRoutePropagationError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DisableVgwRoutePropagationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisableVpcClassicLinkDnsSupportError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DisableVpcClassicLinkDnsSupportErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisableVpcClassicLinkError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DisableVpcClassicLinkErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisassociateAddressError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DisassociateAddressErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisassociateClientVpnTargetNetworkError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DisassociateClientVpnTargetNetworkErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisassociateEnclaveCertificateIamRoleError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DisassociateEnclaveCertificateIamRoleErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisassociateIamInstanceProfileError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DisassociateIamInstanceProfileErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisassociateInstanceEventWindowError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DisassociateInstanceEventWindowErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisassociateRouteTableError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DisassociateRouteTableErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisassociateSubnetCidrBlockError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DisassociateSubnetCidrBlockErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisassociateTransitGatewayMulticastDomainError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::DisassociateTransitGatewayMulticastDomainErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisassociateTransitGatewayRouteTableError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::DisassociateTransitGatewayRouteTableErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisassociateTrunkInterfaceError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DisassociateTrunkInterfaceErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::DisassociateVpcCidrBlockError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::DisassociateVpcCidrBlockErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::EnableEbsEncryptionByDefaultError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::EnableEbsEncryptionByDefaultErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::EnableFastLaunchError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::EnableFastLaunchErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::EnableFastSnapshotRestoresError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::EnableFastSnapshotRestoresErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::EnableImageDeprecationError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::EnableImageDeprecationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::EnableIpamOrganizationAdminAccountError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::EnableIpamOrganizationAdminAccountErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::EnableSerialConsoleAccessError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::EnableSerialConsoleAccessErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::EnableTransitGatewayRouteTablePropagationError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::EnableTransitGatewayRouteTablePropagationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::EnableVgwRoutePropagationError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::EnableVgwRoutePropagationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::EnableVolumeIOError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::EnableVolumeIOErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::EnableVpcClassicLinkDnsSupportError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::EnableVpcClassicLinkDnsSupportErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::EnableVpcClassicLinkError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::EnableVpcClassicLinkErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ExportClientVpnClientCertificateRevocationListError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ExportClientVpnClientCertificateRevocationListErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ExportClientVpnClientConfigurationError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::ExportClientVpnClientConfigurationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ExportImageError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ExportImageErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ExportTransitGatewayRoutesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ExportTransitGatewayRoutesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetAssociatedEnclaveCertificateIamRolesError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetAssociatedEnclaveCertificateIamRolesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetAssociatedIpv6PoolCidrsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::GetAssociatedIpv6PoolCidrsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetCapacityReservationUsageError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::GetCapacityReservationUsageErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetCoipPoolUsageError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetCoipPoolUsageErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetConsoleOutputError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetConsoleOutputErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetConsoleScreenshotError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetConsoleScreenshotErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetDefaultCreditSpecificationError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::GetDefaultCreditSpecificationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetEbsDefaultKmsKeyIdError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetEbsDefaultKmsKeyIdErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetEbsEncryptionByDefaultError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::GetEbsEncryptionByDefaultErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetFlowLogsIntegrationTemplateError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetFlowLogsIntegrationTemplateErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetGroupsForCapacityReservationError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetGroupsForCapacityReservationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetHostReservationPurchasePreviewError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetHostReservationPurchasePreviewErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetInstanceTypesFromInstanceRequirementsError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetInstanceTypesFromInstanceRequirementsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetInstanceUefiDataError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetInstanceUefiDataErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetIpamAddressHistoryError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetIpamAddressHistoryErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetIpamPoolAllocationsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetIpamPoolAllocationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetIpamPoolCidrsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetIpamPoolCidrsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetIpamResourceCidrsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetIpamResourceCidrsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetLaunchTemplateDataError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetLaunchTemplateDataErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetManagedPrefixListAssociationsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetManagedPrefixListAssociationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetManagedPrefixListEntriesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::GetManagedPrefixListEntriesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetNetworkInsightsAccessScopeAnalysisFindingsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetNetworkInsightsAccessScopeAnalysisFindingsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetNetworkInsightsAccessScopeContentError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetNetworkInsightsAccessScopeContentErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetPasswordDataError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetPasswordDataErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetReservedInstancesExchangeQuoteError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetReservedInstancesExchangeQuoteErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetSerialConsoleAccessStatusError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::GetSerialConsoleAccessStatusErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetSpotPlacementScoresError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetSpotPlacementScoresErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetSubnetCidrReservationsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::GetSubnetCidrReservationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetTransitGatewayAttachmentPropagationsError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetTransitGatewayAttachmentPropagationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetTransitGatewayMulticastDomainAssociationsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetTransitGatewayMulticastDomainAssociationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetTransitGatewayPrefixListReferencesError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetTransitGatewayPrefixListReferencesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetTransitGatewayRouteTableAssociationsError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetTransitGatewayRouteTableAssociationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetTransitGatewayRouteTablePropagationsError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetTransitGatewayRouteTablePropagationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetVpnConnectionDeviceSampleConfigurationError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::GetVpnConnectionDeviceSampleConfigurationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::GetVpnConnectionDeviceTypesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::GetVpnConnectionDeviceTypesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ImportClientVpnClientCertificateRevocationListError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ImportClientVpnClientCertificateRevocationListErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ImportImageError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ImportImageErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ImportInstanceError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ImportInstanceErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ImportKeyPairError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ImportKeyPairErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ImportSnapshotError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ImportSnapshotErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ImportVolumeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ImportVolumeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ListImagesInRecycleBinError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ListImagesInRecycleBinErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ListSnapshotsInRecycleBinError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ListSnapshotsInRecycleBinErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyAddressAttributeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyAddressAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyAvailabilityZoneGroupError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyAvailabilityZoneGroupErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyCapacityReservationError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyCapacityReservationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyCapacityReservationFleetError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyCapacityReservationFleetErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyClientVpnEndpointError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyClientVpnEndpointErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyDefaultCreditSpecificationError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyDefaultCreditSpecificationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyEbsDefaultKmsKeyIdError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyEbsDefaultKmsKeyIdErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyFleetError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyFleetErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyFpgaImageAttributeError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyFpgaImageAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyHostsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyHostsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyIdFormatError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyIdFormatErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyIdentityIdFormatError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyIdentityIdFormatErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyImageAttributeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyImageAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyInstanceAttributeError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyInstanceAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyInstanceCapacityReservationAttributesError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyInstanceCapacityReservationAttributesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyInstanceCreditSpecificationError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyInstanceCreditSpecificationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyInstanceEventStartTimeError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyInstanceEventStartTimeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyInstanceEventWindowError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyInstanceEventWindowErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyInstanceMaintenanceOptionsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyInstanceMaintenanceOptionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyInstanceMetadataOptionsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyInstanceMetadataOptionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyInstancePlacementError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyInstancePlacementErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyIpamError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyIpamErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyIpamPoolError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyIpamPoolErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyIpamResourceCidrError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyIpamResourceCidrErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyIpamScopeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyIpamScopeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyLaunchTemplateError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyLaunchTemplateErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyManagedPrefixListError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyManagedPrefixListErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyNetworkInterfaceAttributeError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyNetworkInterfaceAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyPrivateDnsNameOptionsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyPrivateDnsNameOptionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyReservedInstancesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyReservedInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifySecurityGroupRulesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifySecurityGroupRulesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifySnapshotAttributeError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifySnapshotAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifySnapshotTierError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifySnapshotTierErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifySpotFleetRequestError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifySpotFleetRequestErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifySubnetAttributeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifySubnetAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyTrafficMirrorFilterNetworkServicesError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyTrafficMirrorFilterNetworkServicesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyTrafficMirrorFilterRuleError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyTrafficMirrorFilterRuleErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyTrafficMirrorSessionError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyTrafficMirrorSessionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyTransitGatewayError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyTransitGatewayErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyTransitGatewayPrefixListReferenceError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyTransitGatewayPrefixListReferenceErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyTransitGatewayVpcAttachmentError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyTransitGatewayVpcAttachmentErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyVolumeAttributeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyVolumeAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyVolumeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyVolumeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyVpcAttributeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyVpcAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyVpcEndpointConnectionNotificationError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyVpcEndpointConnectionNotificationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyVpcEndpointError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyVpcEndpointErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyVpcEndpointServiceConfigurationError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyVpcEndpointServiceConfigurationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyVpcEndpointServicePayerResponsibilityError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyVpcEndpointServicePayerResponsibilityErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyVpcEndpointServicePermissionsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyVpcEndpointServicePermissionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyVpcPeeringConnectionOptionsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyVpcPeeringConnectionOptionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyVpcTenancyError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyVpcTenancyErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyVpnConnectionError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyVpnConnectionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyVpnConnectionOptionsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyVpnConnectionOptionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyVpnTunnelCertificateError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ModifyVpnTunnelCertificateErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ModifyVpnTunnelOptionsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ModifyVpnTunnelOptionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::MonitorInstancesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::MonitorInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::MoveAddressToVpcError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::MoveAddressToVpcErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::MoveByoipCidrToIpamError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::MoveByoipCidrToIpamErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ProvisionByoipCidrError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ProvisionByoipCidrErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ProvisionIpamPoolCidrError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ProvisionIpamPoolCidrErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ProvisionPublicIpv4PoolCidrError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ProvisionPublicIpv4PoolCidrErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::PurchaseHostReservationError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::PurchaseHostReservationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::PurchaseReservedInstancesOfferingError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::PurchaseReservedInstancesOfferingErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::PurchaseScheduledInstancesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::PurchaseScheduledInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RebootInstancesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::RebootInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RegisterImageError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::RegisterImageErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RegisterInstanceEventNotificationAttributesError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::RegisterInstanceEventNotificationAttributesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RegisterTransitGatewayMulticastGroupMembersError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::RegisterTransitGatewayMulticastGroupMembersErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RegisterTransitGatewayMulticastGroupSourcesError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::RegisterTransitGatewayMulticastGroupSourcesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RejectTransitGatewayMulticastDomainAssociationsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::RejectTransitGatewayMulticastDomainAssociationsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RejectTransitGatewayPeeringAttachmentError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::RejectTransitGatewayPeeringAttachmentErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RejectTransitGatewayVpcAttachmentError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::RejectTransitGatewayVpcAttachmentErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RejectVpcEndpointConnectionsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::RejectVpcEndpointConnectionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RejectVpcPeeringConnectionError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::RejectVpcPeeringConnectionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ReleaseAddressError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ReleaseAddressErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ReleaseHostsError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ReleaseHostsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ReleaseIpamPoolAllocationError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ReleaseIpamPoolAllocationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ReplaceIamInstanceProfileAssociationError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::ReplaceIamInstanceProfileAssociationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ReplaceNetworkAclAssociationError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ReplaceNetworkAclAssociationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ReplaceNetworkAclEntryError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ReplaceNetworkAclEntryErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ReplaceRouteError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ReplaceRouteErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ReplaceRouteTableAssociationError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ReplaceRouteTableAssociationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ReplaceTransitGatewayRouteError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ReplaceTransitGatewayRouteErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ReportInstanceStatusError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ReportInstanceStatusErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RequestSpotFleetError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::RequestSpotFleetErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RequestSpotInstancesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::RequestSpotInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ResetAddressAttributeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ResetAddressAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ResetEbsDefaultKmsKeyIdError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ResetEbsDefaultKmsKeyIdErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ResetFpgaImageAttributeError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::ResetFpgaImageAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ResetImageAttributeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ResetImageAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ResetInstanceAttributeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ResetInstanceAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ResetNetworkInterfaceAttributeError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::ResetNetworkInterfaceAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::ResetSnapshotAttributeError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::ResetSnapshotAttributeErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RestoreAddressToClassicError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::RestoreAddressToClassicErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RestoreImageFromRecycleBinError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::RestoreImageFromRecycleBinErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RestoreManagedPrefixListVersionError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::RestoreManagedPrefixListVersionErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RestoreSnapshotFromRecycleBinError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::RestoreSnapshotFromRecycleBinErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RestoreSnapshotTierError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::RestoreSnapshotTierErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RevokeClientVpnIngressError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::RevokeClientVpnIngressErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RevokeSecurityGroupEgressError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::RevokeSecurityGroupEgressErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RevokeSecurityGroupIngressError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::RevokeSecurityGroupIngressErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RunInstancesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::RunInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::RunScheduledInstancesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::RunScheduledInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::SearchLocalGatewayRoutesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::SearchLocalGatewayRoutesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::SearchTransitGatewayMulticastGroupsError due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::error::SearchTransitGatewayMulticastGroupsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::SearchTransitGatewayRoutesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::SearchTransitGatewayRoutesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::SendDiagnosticInterruptError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::SendDiagnosticInterruptErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::StartInstancesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::StartInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::StartNetworkInsightsAccessScopeAnalysisError due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::error::StartNetworkInsightsAccessScopeAnalysisErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::StartNetworkInsightsAnalysisError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::StartNetworkInsightsAnalysisErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::StartVpcEndpointServicePrivateDnsVerificationError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::StartVpcEndpointServicePrivateDnsVerificationErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::StopInstancesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::StopInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::TerminateClientVpnConnectionsError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::TerminateClientVpnConnectionsErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::TerminateInstancesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::TerminateInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::UnassignIpv6AddressesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::UnassignIpv6AddressesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::UnassignPrivateIpAddressesError due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::error::UnassignPrivateIpAddressesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::UnmonitorInstancesError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::UnmonitorInstancesErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::UpdateSecurityGroupRuleDescriptionsEgressError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::UpdateSecurityGroupRuleDescriptionsEgressErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::UpdateSecurityGroupRuleDescriptionsIngressError
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::UpdateSecurityGroupRuleDescriptionsIngressErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::error::WithdrawByoipCidrError due to hidden fields
impl crate::Debug for aws_sdk_ec2::error::WithdrawByoipCidrErrorKind {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Unhandled(__0) => {
                f.debug_tuple("Unhandled").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::input::AcceptReservedInstancesExchangeQuoteInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AcceptReservedInstancesExchangeQuoteInput")
            .field("dry_run", &self.dry_run)
            .field("reserved_instance_ids", &self.reserved_instance_ids)
            .field("target_configurations", &self.target_configurations)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AcceptTransitGatewayMulticastDomainAssociationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AcceptTransitGatewayMulticastDomainAssociationsInput")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("subnet_ids", &self.subnet_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AcceptTransitGatewayPeeringAttachmentInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AcceptTransitGatewayPeeringAttachmentInput")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AcceptTransitGatewayVpcAttachmentInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AcceptTransitGatewayVpcAttachmentInput")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AcceptVpcEndpointConnectionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AcceptVpcEndpointConnectionsInput")
            .field("dry_run", &self.dry_run)
            .field("service_id", &self.service_id)
            .field("vpc_endpoint_ids", &self.vpc_endpoint_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AcceptVpcPeeringConnectionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AcceptVpcPeeringConnectionInput")
            .field("dry_run", &self.dry_run)
            .field("vpc_peering_connection_id", &self.vpc_peering_connection_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AdvertiseByoipCidrInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AdvertiseByoipCidrInput")
            .field("cidr", &self.cidr)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AllocateAddressInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AllocateAddressInput")
            .field("domain", &self.domain)
            .field("address", &self.address)
            .field("public_ipv4_pool", &self.public_ipv4_pool)
            .field("network_border_group", &self.network_border_group)
            .field("customer_owned_ipv4_pool", &self.customer_owned_ipv4_pool)
            .field("dry_run", &self.dry_run)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AllocateHostsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AllocateHostsInput")
            .field("auto_placement", &self.auto_placement)
            .field("availability_zone", &self.availability_zone)
            .field("client_token", &self.client_token)
            .field("instance_type", &self.instance_type)
            .field("instance_family", &self.instance_family)
            .field("quantity", &self.quantity)
            .field("tag_specifications", &self.tag_specifications)
            .field("host_recovery", &self.host_recovery)
            .field("outpost_arn", &self.outpost_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AllocateIpamPoolCidrInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AllocateIpamPoolCidrInput")
            .field("dry_run", &self.dry_run)
            .field("ipam_pool_id", &self.ipam_pool_id)
            .field("cidr", &self.cidr)
            .field("netmask_length", &self.netmask_length)
            .field("client_token", &self.client_token)
            .field("description", &self.description)
            .field("preview_next_cidr", &self.preview_next_cidr)
            .field("disallowed_cidrs", &self.disallowed_cidrs)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ApplySecurityGroupsToClientVpnTargetNetworkInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ApplySecurityGroupsToClientVpnTargetNetworkInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("vpc_id", &self.vpc_id)
            .field("security_group_ids", &self.security_group_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AssignIpv6AddressesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssignIpv6AddressesInput")
            .field("ipv6_address_count", &self.ipv6_address_count)
            .field("ipv6_addresses", &self.ipv6_addresses)
            .field("ipv6_prefix_count", &self.ipv6_prefix_count)
            .field("ipv6_prefixes", &self.ipv6_prefixes)
            .field("network_interface_id", &self.network_interface_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AssignPrivateIpAddressesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssignPrivateIpAddressesInput")
            .field("allow_reassignment", &self.allow_reassignment)
            .field("network_interface_id", &self.network_interface_id)
            .field("private_ip_addresses", &self.private_ip_addresses)
            .field(
                "secondary_private_ip_address_count",
                &self.secondary_private_ip_address_count,
            )
            .field("ipv4_prefixes", &self.ipv4_prefixes)
            .field("ipv4_prefix_count", &self.ipv4_prefix_count)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AssociateAddressInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateAddressInput")
            .field("allocation_id", &self.allocation_id)
            .field("instance_id", &self.instance_id)
            .field("public_ip", &self.public_ip)
            .field("allow_reassociation", &self.allow_reassociation)
            .field("dry_run", &self.dry_run)
            .field("network_interface_id", &self.network_interface_id)
            .field("private_ip_address", &self.private_ip_address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AssociateClientVpnTargetNetworkInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateClientVpnTargetNetworkInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("subnet_id", &self.subnet_id)
            .field("client_token", &self.client_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AssociateDhcpOptionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateDhcpOptionsInput")
            .field("dhcp_options_id", &self.dhcp_options_id)
            .field("vpc_id", &self.vpc_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AssociateEnclaveCertificateIamRoleInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateEnclaveCertificateIamRoleInput")
            .field("certificate_arn", &self.certificate_arn)
            .field("role_arn", &self.role_arn)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AssociateIamInstanceProfileInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateIamInstanceProfileInput")
            .field("iam_instance_profile", &self.iam_instance_profile)
            .field("instance_id", &self.instance_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AssociateInstanceEventWindowInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateInstanceEventWindowInput")
            .field("dry_run", &self.dry_run)
            .field("instance_event_window_id", &self.instance_event_window_id)
            .field("association_target", &self.association_target)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AssociateRouteTableInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateRouteTableInput")
            .field("dry_run", &self.dry_run)
            .field("route_table_id", &self.route_table_id)
            .field("subnet_id", &self.subnet_id)
            .field("gateway_id", &self.gateway_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AssociateSubnetCidrBlockInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateSubnetCidrBlockInput")
            .field("ipv6_cidr_block", &self.ipv6_cidr_block)
            .field("subnet_id", &self.subnet_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AssociateTransitGatewayMulticastDomainInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateTransitGatewayMulticastDomainInput")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("subnet_ids", &self.subnet_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AssociateTransitGatewayRouteTableInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateTransitGatewayRouteTableInput")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AssociateTrunkInterfaceInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateTrunkInterfaceInput")
            .field("branch_interface_id", &self.branch_interface_id)
            .field("trunk_interface_id", &self.trunk_interface_id)
            .field("vlan_id", &self.vlan_id)
            .field("gre_key", &self.gre_key)
            .field("client_token", &self.client_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AssociateVpcCidrBlockInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateVpcCidrBlockInput")
            .field(
                "amazon_provided_ipv6_cidr_block",
                &self.amazon_provided_ipv6_cidr_block,
            )
            .field("cidr_block", &self.cidr_block)
            .field("vpc_id", &self.vpc_id)
            .field(
                "ipv6_cidr_block_network_border_group",
                &self.ipv6_cidr_block_network_border_group,
            )
            .field("ipv6_pool", &self.ipv6_pool)
            .field("ipv6_cidr_block", &self.ipv6_cidr_block)
            .field("ipv4_ipam_pool_id", &self.ipv4_ipam_pool_id)
            .field("ipv4_netmask_length", &self.ipv4_netmask_length)
            .field("ipv6_ipam_pool_id", &self.ipv6_ipam_pool_id)
            .field("ipv6_netmask_length", &self.ipv6_netmask_length)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AttachClassicLinkVpcInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AttachClassicLinkVpcInput")
            .field("dry_run", &self.dry_run)
            .field("groups", &self.groups)
            .field("instance_id", &self.instance_id)
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AttachInternetGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AttachInternetGatewayInput")
            .field("dry_run", &self.dry_run)
            .field("internet_gateway_id", &self.internet_gateway_id)
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AttachNetworkInterfaceInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AttachNetworkInterfaceInput")
            .field("device_index", &self.device_index)
            .field("dry_run", &self.dry_run)
            .field("instance_id", &self.instance_id)
            .field("network_interface_id", &self.network_interface_id)
            .field("network_card_index", &self.network_card_index)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AttachVolumeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AttachVolumeInput")
            .field("device", &self.device)
            .field("instance_id", &self.instance_id)
            .field("volume_id", &self.volume_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AttachVpnGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AttachVpnGatewayInput")
            .field("vpc_id", &self.vpc_id)
            .field("vpn_gateway_id", &self.vpn_gateway_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AuthorizeClientVpnIngressInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AuthorizeClientVpnIngressInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("target_network_cidr", &self.target_network_cidr)
            .field("access_group_id", &self.access_group_id)
            .field("authorize_all_groups", &self.authorize_all_groups)
            .field("description", &self.description)
            .field("client_token", &self.client_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AuthorizeSecurityGroupEgressInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AuthorizeSecurityGroupEgressInput")
            .field("dry_run", &self.dry_run)
            .field("group_id", &self.group_id)
            .field("ip_permissions", &self.ip_permissions)
            .field("tag_specifications", &self.tag_specifications)
            .field("cidr_ip", &self.cidr_ip)
            .field("from_port", &self.from_port)
            .field("ip_protocol", &self.ip_protocol)
            .field("to_port", &self.to_port)
            .field(
                "source_security_group_name",
                &self.source_security_group_name,
            )
            .field(
                "source_security_group_owner_id",
                &self.source_security_group_owner_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::AuthorizeSecurityGroupIngressInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AuthorizeSecurityGroupIngressInput")
            .field("cidr_ip", &self.cidr_ip)
            .field("from_port", &self.from_port)
            .field("group_id", &self.group_id)
            .field("group_name", &self.group_name)
            .field("ip_permissions", &self.ip_permissions)
            .field("ip_protocol", &self.ip_protocol)
            .field(
                "source_security_group_name",
                &self.source_security_group_name,
            )
            .field(
                "source_security_group_owner_id",
                &self.source_security_group_owner_id,
            )
            .field("to_port", &self.to_port)
            .field("dry_run", &self.dry_run)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::BundleInstanceInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("BundleInstanceInput")
            .field("instance_id", &self.instance_id)
            .field("storage", &self.storage)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CancelBundleTaskInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelBundleTaskInput")
            .field("bundle_id", &self.bundle_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CancelCapacityReservationFleetsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelCapacityReservationFleetsInput")
            .field("dry_run", &self.dry_run)
            .field(
                "capacity_reservation_fleet_ids",
                &self.capacity_reservation_fleet_ids,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CancelCapacityReservationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelCapacityReservationInput")
            .field("capacity_reservation_id", &self.capacity_reservation_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CancelConversionTaskInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelConversionTaskInput")
            .field("conversion_task_id", &self.conversion_task_id)
            .field("dry_run", &self.dry_run)
            .field("reason_message", &self.reason_message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CancelExportTaskInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelExportTaskInput")
            .field("export_task_id", &self.export_task_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CancelImportTaskInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelImportTaskInput")
            .field("cancel_reason", &self.cancel_reason)
            .field("dry_run", &self.dry_run)
            .field("import_task_id", &self.import_task_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CancelReservedInstancesListingInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelReservedInstancesListingInput")
            .field(
                "reserved_instances_listing_id",
                &self.reserved_instances_listing_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CancelSpotFleetRequestsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelSpotFleetRequestsInput")
            .field("dry_run", &self.dry_run)
            .field("spot_fleet_request_ids", &self.spot_fleet_request_ids)
            .field("terminate_instances", &self.terminate_instances)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CancelSpotInstanceRequestsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelSpotInstanceRequestsInput")
            .field("dry_run", &self.dry_run)
            .field("spot_instance_request_ids", &self.spot_instance_request_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ConfirmProductInstanceInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ConfirmProductInstanceInput")
            .field("instance_id", &self.instance_id)
            .field("product_code", &self.product_code)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CopyFpgaImageInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CopyFpgaImageInput")
            .field("dry_run", &self.dry_run)
            .field("source_fpga_image_id", &self.source_fpga_image_id)
            .field("description", &self.description)
            .field("name", &self.name)
            .field("source_region", &self.source_region)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CopyImageInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CopyImageInput")
            .field("client_token", &self.client_token)
            .field("description", &self.description)
            .field("encrypted", &self.encrypted)
            .field("kms_key_id", &self.kms_key_id)
            .field("name", &self.name)
            .field("source_image_id", &self.source_image_id)
            .field("source_region", &self.source_region)
            .field("destination_outpost_arn", &self.destination_outpost_arn)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CopySnapshotInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CopySnapshotInput")
            .field("description", &self.description)
            .field("destination_outpost_arn", &self.destination_outpost_arn)
            .field("destination_region", &self.destination_region)
            .field("encrypted", &self.encrypted)
            .field("kms_key_id", &self.kms_key_id)
            .field("presigned_url", &self.presigned_url)
            .field("source_region", &self.source_region)
            .field("source_snapshot_id", &self.source_snapshot_id)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateCapacityReservationFleetInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateCapacityReservationFleetInput")
            .field("allocation_strategy", &self.allocation_strategy)
            .field("client_token", &self.client_token)
            .field(
                "instance_type_specifications",
                &self.instance_type_specifications,
            )
            .field("tenancy", &self.tenancy)
            .field("total_target_capacity", &self.total_target_capacity)
            .field("end_date", &self.end_date)
            .field("instance_match_criteria", &self.instance_match_criteria)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateCapacityReservationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateCapacityReservationInput")
            .field("client_token", &self.client_token)
            .field("instance_type", &self.instance_type)
            .field("instance_platform", &self.instance_platform)
            .field("availability_zone", &self.availability_zone)
            .field("availability_zone_id", &self.availability_zone_id)
            .field("tenancy", &self.tenancy)
            .field("instance_count", &self.instance_count)
            .field("ebs_optimized", &self.ebs_optimized)
            .field("ephemeral_storage", &self.ephemeral_storage)
            .field("end_date", &self.end_date)
            .field("end_date_type", &self.end_date_type)
            .field("instance_match_criteria", &self.instance_match_criteria)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .field("outpost_arn", &self.outpost_arn)
            .field("placement_group_arn", &self.placement_group_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateCarrierGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateCarrierGatewayInput")
            .field("vpc_id", &self.vpc_id)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateClientVpnEndpointInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateClientVpnEndpointInput")
            .field("client_cidr_block", &self.client_cidr_block)
            .field("server_certificate_arn", &self.server_certificate_arn)
            .field("authentication_options", &self.authentication_options)
            .field("connection_log_options", &self.connection_log_options)
            .field("dns_servers", &self.dns_servers)
            .field("transport_protocol", &self.transport_protocol)
            .field("vpn_port", &self.vpn_port)
            .field("description", &self.description)
            .field("split_tunnel", &self.split_tunnel)
            .field("dry_run", &self.dry_run)
            .field("client_token", &self.client_token)
            .field("tag_specifications", &self.tag_specifications)
            .field("security_group_ids", &self.security_group_ids)
            .field("vpc_id", &self.vpc_id)
            .field("self_service_portal", &self.self_service_portal)
            .field("client_connect_options", &self.client_connect_options)
            .field("session_timeout_hours", &self.session_timeout_hours)
            .field(
                "client_login_banner_options",
                &self.client_login_banner_options,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateClientVpnRouteInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateClientVpnRouteInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field("target_vpc_subnet_id", &self.target_vpc_subnet_id)
            .field("description", &self.description)
            .field("client_token", &self.client_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateCustomerGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateCustomerGatewayInput")
            .field("bgp_asn", &self.bgp_asn)
            .field("public_ip", &self.public_ip)
            .field("certificate_arn", &self.certificate_arn)
            .field("r#type", &self.r#type)
            .field("tag_specifications", &self.tag_specifications)
            .field("device_name", &self.device_name)
            .field("ip_address", &self.ip_address)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateDefaultSubnetInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateDefaultSubnetInput")
            .field("availability_zone", &self.availability_zone)
            .field("dry_run", &self.dry_run)
            .field("ipv6_native", &self.ipv6_native)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateDefaultVpcInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateDefaultVpcInput")
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateDhcpOptionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateDhcpOptionsInput")
            .field("dhcp_configurations", &self.dhcp_configurations)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateEgressOnlyInternetGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateEgressOnlyInternetGatewayInput")
            .field("client_token", &self.client_token)
            .field("dry_run", &self.dry_run)
            .field("vpc_id", &self.vpc_id)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateFleetInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateFleetInput")
            .field("dry_run", &self.dry_run)
            .field("client_token", &self.client_token)
            .field("spot_options", &self.spot_options)
            .field("on_demand_options", &self.on_demand_options)
            .field(
                "excess_capacity_termination_policy",
                &self.excess_capacity_termination_policy,
            )
            .field("launch_template_configs", &self.launch_template_configs)
            .field(
                "target_capacity_specification",
                &self.target_capacity_specification,
            )
            .field(
                "terminate_instances_with_expiration",
                &self.terminate_instances_with_expiration,
            )
            .field("r#type", &self.r#type)
            .field("valid_from", &self.valid_from)
            .field("valid_until", &self.valid_until)
            .field(
                "replace_unhealthy_instances",
                &self.replace_unhealthy_instances,
            )
            .field("tag_specifications", &self.tag_specifications)
            .field("context", &self.context)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateFlowLogsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateFlowLogsInput")
            .field("dry_run", &self.dry_run)
            .field("client_token", &self.client_token)
            .field(
                "deliver_logs_permission_arn",
                &self.deliver_logs_permission_arn,
            )
            .field("log_group_name", &self.log_group_name)
            .field("resource_ids", &self.resource_ids)
            .field("resource_type", &self.resource_type)
            .field("traffic_type", &self.traffic_type)
            .field("log_destination_type", &self.log_destination_type)
            .field("log_destination", &self.log_destination)
            .field("log_format", &self.log_format)
            .field("tag_specifications", &self.tag_specifications)
            .field("max_aggregation_interval", &self.max_aggregation_interval)
            .field("destination_options", &self.destination_options)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateFpgaImageInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateFpgaImageInput")
            .field("dry_run", &self.dry_run)
            .field("input_storage_location", &self.input_storage_location)
            .field("logs_storage_location", &self.logs_storage_location)
            .field("description", &self.description)
            .field("name", &self.name)
            .field("client_token", &self.client_token)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateImageInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateImageInput")
            .field("block_device_mappings", &self.block_device_mappings)
            .field("description", &self.description)
            .field("dry_run", &self.dry_run)
            .field("instance_id", &self.instance_id)
            .field("name", &self.name)
            .field("no_reboot", &self.no_reboot)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateInstanceEventWindowInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateInstanceEventWindowInput")
            .field("dry_run", &self.dry_run)
            .field("name", &self.name)
            .field("time_ranges", &self.time_ranges)
            .field("cron_expression", &self.cron_expression)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateInstanceExportTaskInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateInstanceExportTaskInput")
            .field("description", &self.description)
            .field("export_to_s3_task", &self.export_to_s3_task)
            .field("instance_id", &self.instance_id)
            .field("target_environment", &self.target_environment)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateInternetGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateInternetGatewayInput")
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateIpamInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateIpamInput")
            .field("dry_run", &self.dry_run)
            .field("description", &self.description)
            .field("operating_regions", &self.operating_regions)
            .field("tag_specifications", &self.tag_specifications)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateIpamPoolInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateIpamPoolInput")
            .field("dry_run", &self.dry_run)
            .field("ipam_scope_id", &self.ipam_scope_id)
            .field("locale", &self.locale)
            .field("source_ipam_pool_id", &self.source_ipam_pool_id)
            .field("description", &self.description)
            .field("address_family", &self.address_family)
            .field("auto_import", &self.auto_import)
            .field("publicly_advertisable", &self.publicly_advertisable)
            .field(
                "allocation_min_netmask_length",
                &self.allocation_min_netmask_length,
            )
            .field(
                "allocation_max_netmask_length",
                &self.allocation_max_netmask_length,
            )
            .field(
                "allocation_default_netmask_length",
                &self.allocation_default_netmask_length,
            )
            .field("allocation_resource_tags", &self.allocation_resource_tags)
            .field("tag_specifications", &self.tag_specifications)
            .field("client_token", &self.client_token)
            .field("aws_service", &self.aws_service)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateIpamScopeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateIpamScopeInput")
            .field("dry_run", &self.dry_run)
            .field("ipam_id", &self.ipam_id)
            .field("description", &self.description)
            .field("tag_specifications", &self.tag_specifications)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateKeyPairInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateKeyPairInput")
            .field("key_name", &self.key_name)
            .field("dry_run", &self.dry_run)
            .field("key_type", &self.key_type)
            .field("tag_specifications", &self.tag_specifications)
            .field("key_format", &self.key_format)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateLaunchTemplateInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateLaunchTemplateInput")
            .field("dry_run", &self.dry_run)
            .field("client_token", &self.client_token)
            .field("launch_template_name", &self.launch_template_name)
            .field("version_description", &self.version_description)
            .field("launch_template_data", &self.launch_template_data)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateLaunchTemplateVersionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateLaunchTemplateVersionInput")
            .field("dry_run", &self.dry_run)
            .field("client_token", &self.client_token)
            .field("launch_template_id", &self.launch_template_id)
            .field("launch_template_name", &self.launch_template_name)
            .field("source_version", &self.source_version)
            .field("version_description", &self.version_description)
            .field("launch_template_data", &self.launch_template_data)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateLocalGatewayRouteInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateLocalGatewayRouteInput")
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field(
                "local_gateway_route_table_id",
                &self.local_gateway_route_table_id,
            )
            .field(
                "local_gateway_virtual_interface_group_id",
                &self.local_gateway_virtual_interface_group_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateLocalGatewayRouteTableVpcAssociationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateLocalGatewayRouteTableVpcAssociationInput")
            .field(
                "local_gateway_route_table_id",
                &self.local_gateway_route_table_id,
            )
            .field("vpc_id", &self.vpc_id)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateManagedPrefixListInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateManagedPrefixListInput")
            .field("dry_run", &self.dry_run)
            .field("prefix_list_name", &self.prefix_list_name)
            .field("entries", &self.entries)
            .field("max_entries", &self.max_entries)
            .field("tag_specifications", &self.tag_specifications)
            .field("address_family", &self.address_family)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateNatGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateNatGatewayInput")
            .field("allocation_id", &self.allocation_id)
            .field("client_token", &self.client_token)
            .field("dry_run", &self.dry_run)
            .field("subnet_id", &self.subnet_id)
            .field("tag_specifications", &self.tag_specifications)
            .field("connectivity_type", &self.connectivity_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateNetworkAclEntryInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateNetworkAclEntryInput")
            .field("cidr_block", &self.cidr_block)
            .field("dry_run", &self.dry_run)
            .field("egress", &self.egress)
            .field("icmp_type_code", &self.icmp_type_code)
            .field("ipv6_cidr_block", &self.ipv6_cidr_block)
            .field("network_acl_id", &self.network_acl_id)
            .field("port_range", &self.port_range)
            .field("protocol", &self.protocol)
            .field("rule_action", &self.rule_action)
            .field("rule_number", &self.rule_number)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateNetworkAclInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateNetworkAclInput")
            .field("dry_run", &self.dry_run)
            .field("vpc_id", &self.vpc_id)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateNetworkInsightsAccessScopeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateNetworkInsightsAccessScopeInput")
            .field("match_paths", &self.match_paths)
            .field("exclude_paths", &self.exclude_paths)
            .field("client_token", &self.client_token)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateNetworkInsightsPathInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateNetworkInsightsPathInput")
            .field("source_ip", &self.source_ip)
            .field("destination_ip", &self.destination_ip)
            .field("source", &self.source)
            .field("destination", &self.destination)
            .field("protocol", &self.protocol)
            .field("destination_port", &self.destination_port)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateNetworkInterfaceInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateNetworkInterfaceInput")
            .field("description", &self.description)
            .field("dry_run", &self.dry_run)
            .field("groups", &self.groups)
            .field("ipv6_address_count", &self.ipv6_address_count)
            .field("ipv6_addresses", &self.ipv6_addresses)
            .field("private_ip_address", &self.private_ip_address)
            .field("private_ip_addresses", &self.private_ip_addresses)
            .field(
                "secondary_private_ip_address_count",
                &self.secondary_private_ip_address_count,
            )
            .field("ipv4_prefixes", &self.ipv4_prefixes)
            .field("ipv4_prefix_count", &self.ipv4_prefix_count)
            .field("ipv6_prefixes", &self.ipv6_prefixes)
            .field("ipv6_prefix_count", &self.ipv6_prefix_count)
            .field("interface_type", &self.interface_type)
            .field("subnet_id", &self.subnet_id)
            .field("tag_specifications", &self.tag_specifications)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateNetworkInterfacePermissionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateNetworkInterfacePermissionInput")
            .field("network_interface_id", &self.network_interface_id)
            .field("aws_account_id", &self.aws_account_id)
            .field("aws_service", &self.aws_service)
            .field("permission", &self.permission)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreatePlacementGroupInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreatePlacementGroupInput")
            .field("dry_run", &self.dry_run)
            .field("group_name", &self.group_name)
            .field("strategy", &self.strategy)
            .field("partition_count", &self.partition_count)
            .field("tag_specifications", &self.tag_specifications)
            .field("spread_level", &self.spread_level)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreatePublicIpv4PoolInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreatePublicIpv4PoolInput")
            .field("dry_run", &self.dry_run)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateReplaceRootVolumeTaskInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateReplaceRootVolumeTaskInput")
            .field("instance_id", &self.instance_id)
            .field("snapshot_id", &self.snapshot_id)
            .field("client_token", &self.client_token)
            .field("dry_run", &self.dry_run)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateReservedInstancesListingInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateReservedInstancesListingInput")
            .field("client_token", &self.client_token)
            .field("instance_count", &self.instance_count)
            .field("price_schedules", &self.price_schedules)
            .field("reserved_instances_id", &self.reserved_instances_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateRestoreImageTaskInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateRestoreImageTaskInput")
            .field("bucket", &self.bucket)
            .field("object_key", &self.object_key)
            .field("name", &self.name)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateRouteInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateRouteInput")
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field(
                "destination_ipv6_cidr_block",
                &self.destination_ipv6_cidr_block,
            )
            .field(
                "destination_prefix_list_id",
                &self.destination_prefix_list_id,
            )
            .field("dry_run", &self.dry_run)
            .field("vpc_endpoint_id", &self.vpc_endpoint_id)
            .field(
                "egress_only_internet_gateway_id",
                &self.egress_only_internet_gateway_id,
            )
            .field("gateway_id", &self.gateway_id)
            .field("instance_id", &self.instance_id)
            .field("nat_gateway_id", &self.nat_gateway_id)
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("local_gateway_id", &self.local_gateway_id)
            .field("carrier_gateway_id", &self.carrier_gateway_id)
            .field("network_interface_id", &self.network_interface_id)
            .field("route_table_id", &self.route_table_id)
            .field("vpc_peering_connection_id", &self.vpc_peering_connection_id)
            .field("core_network_arn", &self.core_network_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateRouteTableInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateRouteTableInput")
            .field("dry_run", &self.dry_run)
            .field("vpc_id", &self.vpc_id)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateSecurityGroupInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateSecurityGroupInput")
            .field("description", &self.description)
            .field("group_name", &self.group_name)
            .field("vpc_id", &self.vpc_id)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateSnapshotInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateSnapshotInput")
            .field("description", &self.description)
            .field("outpost_arn", &self.outpost_arn)
            .field("volume_id", &self.volume_id)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateSnapshotsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateSnapshotsInput")
            .field("description", &self.description)
            .field("instance_specification", &self.instance_specification)
            .field("outpost_arn", &self.outpost_arn)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .field("copy_tags_from_source", &self.copy_tags_from_source)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateSpotDatafeedSubscriptionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateSpotDatafeedSubscriptionInput")
            .field("bucket", &self.bucket)
            .field("dry_run", &self.dry_run)
            .field("prefix", &self.prefix)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateStoreImageTaskInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateStoreImageTaskInput")
            .field("image_id", &self.image_id)
            .field("bucket", &self.bucket)
            .field("s3_object_tags", &self.s3_object_tags)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateSubnetCidrReservationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateSubnetCidrReservationInput")
            .field("subnet_id", &self.subnet_id)
            .field("cidr", &self.cidr)
            .field("reservation_type", &self.reservation_type)
            .field("description", &self.description)
            .field("dry_run", &self.dry_run)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateSubnetInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateSubnetInput")
            .field("tag_specifications", &self.tag_specifications)
            .field("availability_zone", &self.availability_zone)
            .field("availability_zone_id", &self.availability_zone_id)
            .field("cidr_block", &self.cidr_block)
            .field("ipv6_cidr_block", &self.ipv6_cidr_block)
            .field("outpost_arn", &self.outpost_arn)
            .field("vpc_id", &self.vpc_id)
            .field("dry_run", &self.dry_run)
            .field("ipv6_native", &self.ipv6_native)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateTagsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTagsInput")
            .field("dry_run", &self.dry_run)
            .field("resources", &self.resources)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateTrafficMirrorFilterInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTrafficMirrorFilterInput")
            .field("description", &self.description)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateTrafficMirrorFilterRuleInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTrafficMirrorFilterRuleInput")
            .field("traffic_mirror_filter_id", &self.traffic_mirror_filter_id)
            .field("traffic_direction", &self.traffic_direction)
            .field("rule_number", &self.rule_number)
            .field("rule_action", &self.rule_action)
            .field("destination_port_range", &self.destination_port_range)
            .field("source_port_range", &self.source_port_range)
            .field("protocol", &self.protocol)
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field("source_cidr_block", &self.source_cidr_block)
            .field("description", &self.description)
            .field("dry_run", &self.dry_run)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateTrafficMirrorSessionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTrafficMirrorSessionInput")
            .field("network_interface_id", &self.network_interface_id)
            .field("traffic_mirror_target_id", &self.traffic_mirror_target_id)
            .field("traffic_mirror_filter_id", &self.traffic_mirror_filter_id)
            .field("packet_length", &self.packet_length)
            .field("session_number", &self.session_number)
            .field("virtual_network_id", &self.virtual_network_id)
            .field("description", &self.description)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateTrafficMirrorTargetInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTrafficMirrorTargetInput")
            .field("network_interface_id", &self.network_interface_id)
            .field("network_load_balancer_arn", &self.network_load_balancer_arn)
            .field("description", &self.description)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .field("client_token", &self.client_token)
            .field(
                "gateway_load_balancer_endpoint_id",
                &self.gateway_load_balancer_endpoint_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateTransitGatewayConnectInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayConnectInput")
            .field(
                "transport_transit_gateway_attachment_id",
                &self.transport_transit_gateway_attachment_id,
            )
            .field("options", &self.options)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateTransitGatewayConnectPeerInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayConnectPeerInput")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("transit_gateway_address", &self.transit_gateway_address)
            .field("peer_address", &self.peer_address)
            .field("bgp_options", &self.bgp_options)
            .field("inside_cidr_blocks", &self.inside_cidr_blocks)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateTransitGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayInput")
            .field("description", &self.description)
            .field("options", &self.options)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateTransitGatewayMulticastDomainInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayMulticastDomainInput")
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("options", &self.options)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateTransitGatewayPeeringAttachmentInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayPeeringAttachmentInput")
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("peer_transit_gateway_id", &self.peer_transit_gateway_id)
            .field("peer_account_id", &self.peer_account_id)
            .field("peer_region", &self.peer_region)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateTransitGatewayPrefixListReferenceInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayPrefixListReferenceInput")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field("prefix_list_id", &self.prefix_list_id)
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("blackhole", &self.blackhole)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateTransitGatewayRouteInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayRouteInput")
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("blackhole", &self.blackhole)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateTransitGatewayRouteTableInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayRouteTableInput")
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateTransitGatewayVpcAttachmentInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayVpcAttachmentInput")
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("vpc_id", &self.vpc_id)
            .field("subnet_ids", &self.subnet_ids)
            .field("options", &self.options)
            .field("tag_specifications", &self.tag_specifications)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateVolumeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVolumeInput")
            .field("availability_zone", &self.availability_zone)
            .field("encrypted", &self.encrypted)
            .field("iops", &self.iops)
            .field("kms_key_id", &self.kms_key_id)
            .field("outpost_arn", &self.outpost_arn)
            .field("size", &self.size)
            .field("snapshot_id", &self.snapshot_id)
            .field("volume_type", &self.volume_type)
            .field("dry_run", &self.dry_run)
            .field("tag_specifications", &self.tag_specifications)
            .field("multi_attach_enabled", &self.multi_attach_enabled)
            .field("throughput", &self.throughput)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateVpcEndpointConnectionNotificationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVpcEndpointConnectionNotificationInput")
            .field("dry_run", &self.dry_run)
            .field("service_id", &self.service_id)
            .field("vpc_endpoint_id", &self.vpc_endpoint_id)
            .field(
                "connection_notification_arn",
                &self.connection_notification_arn,
            )
            .field("connection_events", &self.connection_events)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateVpcEndpointInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVpcEndpointInput")
            .field("dry_run", &self.dry_run)
            .field("vpc_endpoint_type", &self.vpc_endpoint_type)
            .field("vpc_id", &self.vpc_id)
            .field("service_name", &self.service_name)
            .field("policy_document", &self.policy_document)
            .field("route_table_ids", &self.route_table_ids)
            .field("subnet_ids", &self.subnet_ids)
            .field("security_group_ids", &self.security_group_ids)
            .field("ip_address_type", &self.ip_address_type)
            .field("dns_options", &self.dns_options)
            .field("client_token", &self.client_token)
            .field("private_dns_enabled", &self.private_dns_enabled)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateVpcEndpointServiceConfigurationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVpcEndpointServiceConfigurationInput")
            .field("dry_run", &self.dry_run)
            .field("acceptance_required", &self.acceptance_required)
            .field("private_dns_name", &self.private_dns_name)
            .field(
                "network_load_balancer_arns",
                &self.network_load_balancer_arns,
            )
            .field(
                "gateway_load_balancer_arns",
                &self.gateway_load_balancer_arns,
            )
            .field(
                "supported_ip_address_types",
                &self.supported_ip_address_types,
            )
            .field("client_token", &self.client_token)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateVpcInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVpcInput")
            .field("cidr_block", &self.cidr_block)
            .field(
                "amazon_provided_ipv6_cidr_block",
                &self.amazon_provided_ipv6_cidr_block,
            )
            .field("ipv6_pool", &self.ipv6_pool)
            .field("ipv6_cidr_block", &self.ipv6_cidr_block)
            .field("ipv4_ipam_pool_id", &self.ipv4_ipam_pool_id)
            .field("ipv4_netmask_length", &self.ipv4_netmask_length)
            .field("ipv6_ipam_pool_id", &self.ipv6_ipam_pool_id)
            .field("ipv6_netmask_length", &self.ipv6_netmask_length)
            .field("dry_run", &self.dry_run)
            .field("instance_tenancy", &self.instance_tenancy)
            .field(
                "ipv6_cidr_block_network_border_group",
                &self.ipv6_cidr_block_network_border_group,
            )
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateVpcPeeringConnectionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVpcPeeringConnectionInput")
            .field("dry_run", &self.dry_run)
            .field("peer_owner_id", &self.peer_owner_id)
            .field("peer_vpc_id", &self.peer_vpc_id)
            .field("vpc_id", &self.vpc_id)
            .field("peer_region", &self.peer_region)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateVpnConnectionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVpnConnectionInput")
            .field("customer_gateway_id", &self.customer_gateway_id)
            .field("r#type", &self.r#type)
            .field("vpn_gateway_id", &self.vpn_gateway_id)
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("dry_run", &self.dry_run)
            .field("options", &self.options)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateVpnConnectionRouteInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVpnConnectionRouteInput")
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field("vpn_connection_id", &self.vpn_connection_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::CreateVpnGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVpnGatewayInput")
            .field("availability_zone", &self.availability_zone)
            .field("r#type", &self.r#type)
            .field("tag_specifications", &self.tag_specifications)
            .field("amazon_side_asn", &self.amazon_side_asn)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteCarrierGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteCarrierGatewayInput")
            .field("carrier_gateway_id", &self.carrier_gateway_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteClientVpnEndpointInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteClientVpnEndpointInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteClientVpnRouteInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteClientVpnRouteInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("target_vpc_subnet_id", &self.target_vpc_subnet_id)
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteCustomerGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteCustomerGatewayInput")
            .field("customer_gateway_id", &self.customer_gateway_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteDhcpOptionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteDhcpOptionsInput")
            .field("dhcp_options_id", &self.dhcp_options_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteEgressOnlyInternetGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteEgressOnlyInternetGatewayInput")
            .field("dry_run", &self.dry_run)
            .field(
                "egress_only_internet_gateway_id",
                &self.egress_only_internet_gateway_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteFleetsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteFleetsInput")
            .field("dry_run", &self.dry_run)
            .field("fleet_ids", &self.fleet_ids)
            .field("terminate_instances", &self.terminate_instances)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteFlowLogsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteFlowLogsInput")
            .field("dry_run", &self.dry_run)
            .field("flow_log_ids", &self.flow_log_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteFpgaImageInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteFpgaImageInput")
            .field("dry_run", &self.dry_run)
            .field("fpga_image_id", &self.fpga_image_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteInstanceEventWindowInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteInstanceEventWindowInput")
            .field("dry_run", &self.dry_run)
            .field("force_delete", &self.force_delete)
            .field("instance_event_window_id", &self.instance_event_window_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteInternetGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteInternetGatewayInput")
            .field("dry_run", &self.dry_run)
            .field("internet_gateway_id", &self.internet_gateway_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteIpamInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteIpamInput")
            .field("dry_run", &self.dry_run)
            .field("ipam_id", &self.ipam_id)
            .field("cascade", &self.cascade)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteIpamPoolInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteIpamPoolInput")
            .field("dry_run", &self.dry_run)
            .field("ipam_pool_id", &self.ipam_pool_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteIpamScopeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteIpamScopeInput")
            .field("dry_run", &self.dry_run)
            .field("ipam_scope_id", &self.ipam_scope_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteKeyPairInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteKeyPairInput")
            .field("key_name", &self.key_name)
            .field("key_pair_id", &self.key_pair_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteLaunchTemplateInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteLaunchTemplateInput")
            .field("dry_run", &self.dry_run)
            .field("launch_template_id", &self.launch_template_id)
            .field("launch_template_name", &self.launch_template_name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteLaunchTemplateVersionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteLaunchTemplateVersionsInput")
            .field("dry_run", &self.dry_run)
            .field("launch_template_id", &self.launch_template_id)
            .field("launch_template_name", &self.launch_template_name)
            .field("versions", &self.versions)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteLocalGatewayRouteInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteLocalGatewayRouteInput")
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field(
                "local_gateway_route_table_id",
                &self.local_gateway_route_table_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteLocalGatewayRouteTableVpcAssociationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteLocalGatewayRouteTableVpcAssociationInput")
            .field(
                "local_gateway_route_table_vpc_association_id",
                &self.local_gateway_route_table_vpc_association_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteManagedPrefixListInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteManagedPrefixListInput")
            .field("dry_run", &self.dry_run)
            .field("prefix_list_id", &self.prefix_list_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteNatGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNatGatewayInput")
            .field("dry_run", &self.dry_run)
            .field("nat_gateway_id", &self.nat_gateway_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteNetworkAclEntryInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNetworkAclEntryInput")
            .field("dry_run", &self.dry_run)
            .field("egress", &self.egress)
            .field("network_acl_id", &self.network_acl_id)
            .field("rule_number", &self.rule_number)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteNetworkAclInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNetworkAclInput")
            .field("dry_run", &self.dry_run)
            .field("network_acl_id", &self.network_acl_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteNetworkInsightsAccessScopeAnalysisInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNetworkInsightsAccessScopeAnalysisInput")
            .field(
                "network_insights_access_scope_analysis_id",
                &self.network_insights_access_scope_analysis_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteNetworkInsightsAccessScopeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNetworkInsightsAccessScopeInput")
            .field("dry_run", &self.dry_run)
            .field(
                "network_insights_access_scope_id",
                &self.network_insights_access_scope_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteNetworkInsightsAnalysisInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNetworkInsightsAnalysisInput")
            .field("dry_run", &self.dry_run)
            .field(
                "network_insights_analysis_id",
                &self.network_insights_analysis_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteNetworkInsightsPathInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNetworkInsightsPathInput")
            .field("dry_run", &self.dry_run)
            .field("network_insights_path_id", &self.network_insights_path_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteNetworkInterfaceInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNetworkInterfaceInput")
            .field("dry_run", &self.dry_run)
            .field("network_interface_id", &self.network_interface_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteNetworkInterfacePermissionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNetworkInterfacePermissionInput")
            .field(
                "network_interface_permission_id",
                &self.network_interface_permission_id,
            )
            .field("force", &self.force)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeletePlacementGroupInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeletePlacementGroupInput")
            .field("dry_run", &self.dry_run)
            .field("group_name", &self.group_name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeletePublicIpv4PoolInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeletePublicIpv4PoolInput")
            .field("dry_run", &self.dry_run)
            .field("pool_id", &self.pool_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteQueuedReservedInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteQueuedReservedInstancesInput")
            .field("dry_run", &self.dry_run)
            .field("reserved_instances_ids", &self.reserved_instances_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteRouteInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteRouteInput")
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field(
                "destination_ipv6_cidr_block",
                &self.destination_ipv6_cidr_block,
            )
            .field(
                "destination_prefix_list_id",
                &self.destination_prefix_list_id,
            )
            .field("dry_run", &self.dry_run)
            .field("route_table_id", &self.route_table_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteRouteTableInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteRouteTableInput")
            .field("dry_run", &self.dry_run)
            .field("route_table_id", &self.route_table_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteSecurityGroupInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteSecurityGroupInput")
            .field("group_id", &self.group_id)
            .field("group_name", &self.group_name)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteSnapshotInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteSnapshotInput")
            .field("snapshot_id", &self.snapshot_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteSpotDatafeedSubscriptionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteSpotDatafeedSubscriptionInput")
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteSubnetCidrReservationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteSubnetCidrReservationInput")
            .field(
                "subnet_cidr_reservation_id",
                &self.subnet_cidr_reservation_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteSubnetInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteSubnetInput")
            .field("subnet_id", &self.subnet_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteTagsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTagsInput")
            .field("dry_run", &self.dry_run)
            .field("resources", &self.resources)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteTrafficMirrorFilterInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTrafficMirrorFilterInput")
            .field("traffic_mirror_filter_id", &self.traffic_mirror_filter_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteTrafficMirrorFilterRuleInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTrafficMirrorFilterRuleInput")
            .field(
                "traffic_mirror_filter_rule_id",
                &self.traffic_mirror_filter_rule_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteTrafficMirrorSessionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTrafficMirrorSessionInput")
            .field("traffic_mirror_session_id", &self.traffic_mirror_session_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteTrafficMirrorTargetInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTrafficMirrorTargetInput")
            .field("traffic_mirror_target_id", &self.traffic_mirror_target_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteTransitGatewayConnectInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayConnectInput")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteTransitGatewayConnectPeerInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayConnectPeerInput")
            .field(
                "transit_gateway_connect_peer_id",
                &self.transit_gateway_connect_peer_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteTransitGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayInput")
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteTransitGatewayMulticastDomainInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayMulticastDomainInput")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteTransitGatewayPeeringAttachmentInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayPeeringAttachmentInput")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteTransitGatewayPrefixListReferenceInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayPrefixListReferenceInput")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field("prefix_list_id", &self.prefix_list_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteTransitGatewayRouteInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayRouteInput")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteTransitGatewayRouteTableInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayRouteTableInput")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteTransitGatewayVpcAttachmentInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayVpcAttachmentInput")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteVolumeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVolumeInput")
            .field("volume_id", &self.volume_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteVpcEndpointConnectionNotificationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVpcEndpointConnectionNotificationsInput")
            .field("dry_run", &self.dry_run)
            .field(
                "connection_notification_ids",
                &self.connection_notification_ids,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteVpcEndpointServiceConfigurationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVpcEndpointServiceConfigurationsInput")
            .field("dry_run", &self.dry_run)
            .field("service_ids", &self.service_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteVpcEndpointsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVpcEndpointsInput")
            .field("dry_run", &self.dry_run)
            .field("vpc_endpoint_ids", &self.vpc_endpoint_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteVpcInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVpcInput")
            .field("vpc_id", &self.vpc_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteVpcPeeringConnectionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVpcPeeringConnectionInput")
            .field("dry_run", &self.dry_run)
            .field("vpc_peering_connection_id", &self.vpc_peering_connection_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteVpnConnectionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVpnConnectionInput")
            .field("vpn_connection_id", &self.vpn_connection_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteVpnConnectionRouteInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVpnConnectionRouteInput")
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field("vpn_connection_id", &self.vpn_connection_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeleteVpnGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVpnGatewayInput")
            .field("vpn_gateway_id", &self.vpn_gateway_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeprovisionByoipCidrInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeprovisionByoipCidrInput")
            .field("cidr", &self.cidr)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeprovisionIpamPoolCidrInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeprovisionIpamPoolCidrInput")
            .field("dry_run", &self.dry_run)
            .field("ipam_pool_id", &self.ipam_pool_id)
            .field("cidr", &self.cidr)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeprovisionPublicIpv4PoolCidrInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeprovisionPublicIpv4PoolCidrInput")
            .field("dry_run", &self.dry_run)
            .field("pool_id", &self.pool_id)
            .field("cidr", &self.cidr)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeregisterImageInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeregisterImageInput")
            .field("image_id", &self.image_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeregisterInstanceEventNotificationAttributesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeregisterInstanceEventNotificationAttributesInput")
            .field("dry_run", &self.dry_run)
            .field("instance_tag_attribute", &self.instance_tag_attribute)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeregisterTransitGatewayMulticastGroupMembersInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeregisterTransitGatewayMulticastGroupMembersInput")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field("group_ip_address", &self.group_ip_address)
            .field("network_interface_ids", &self.network_interface_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DeregisterTransitGatewayMulticastGroupSourcesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeregisterTransitGatewayMulticastGroupSourcesInput")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field("group_ip_address", &self.group_ip_address)
            .field("network_interface_ids", &self.network_interface_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeAccountAttributesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeAccountAttributesInput")
            .field("attribute_names", &self.attribute_names)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeAddressesAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeAddressesAttributeInput")
            .field("allocation_ids", &self.allocation_ids)
            .field("attribute", &self.attribute)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeAddressesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeAddressesInput")
            .field("filters", &self.filters)
            .field("public_ips", &self.public_ips)
            .field("allocation_ids", &self.allocation_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeAggregateIdFormatInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeAggregateIdFormatInput")
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeAvailabilityZonesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeAvailabilityZonesInput")
            .field("filters", &self.filters)
            .field("zone_names", &self.zone_names)
            .field("zone_ids", &self.zone_ids)
            .field("all_availability_zones", &self.all_availability_zones)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeBundleTasksInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeBundleTasksInput")
            .field("bundle_ids", &self.bundle_ids)
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeByoipCidrsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeByoipCidrsInput")
            .field("dry_run", &self.dry_run)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeCapacityReservationFleetsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeCapacityReservationFleetsInput")
            .field(
                "capacity_reservation_fleet_ids",
                &self.capacity_reservation_fleet_ids,
            )
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeCapacityReservationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeCapacityReservationsInput")
            .field("capacity_reservation_ids", &self.capacity_reservation_ids)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeCarrierGatewaysInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeCarrierGatewaysInput")
            .field("carrier_gateway_ids", &self.carrier_gateway_ids)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeClassicLinkInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeClassicLinkInstancesInput")
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .field("instance_ids", &self.instance_ids)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeClientVpnAuthorizationRulesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeClientVpnAuthorizationRulesInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("dry_run", &self.dry_run)
            .field("next_token", &self.next_token)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeClientVpnConnectionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeClientVpnConnectionsInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("filters", &self.filters)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeClientVpnEndpointsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeClientVpnEndpointsInput")
            .field("client_vpn_endpoint_ids", &self.client_vpn_endpoint_ids)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeClientVpnRoutesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeClientVpnRoutesInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeClientVpnTargetNetworksInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeClientVpnTargetNetworksInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("association_ids", &self.association_ids)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeCoipPoolsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeCoipPoolsInput")
            .field("pool_ids", &self.pool_ids)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeConversionTasksInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeConversionTasksInput")
            .field("conversion_task_ids", &self.conversion_task_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeCustomerGatewaysInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeCustomerGatewaysInput")
            .field("customer_gateway_ids", &self.customer_gateway_ids)
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeDhcpOptionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeDhcpOptionsInput")
            .field("dhcp_options_ids", &self.dhcp_options_ids)
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeEgressOnlyInternetGatewaysInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeEgressOnlyInternetGatewaysInput")
            .field("dry_run", &self.dry_run)
            .field(
                "egress_only_internet_gateway_ids",
                &self.egress_only_internet_gateway_ids,
            )
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("filters", &self.filters)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeElasticGpusInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeElasticGpusInput")
            .field("elastic_gpu_ids", &self.elastic_gpu_ids)
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeExportImageTasksInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeExportImageTasksInput")
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("export_image_task_ids", &self.export_image_task_ids)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeExportTasksInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeExportTasksInput")
            .field("export_task_ids", &self.export_task_ids)
            .field("filters", &self.filters)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeFastLaunchImagesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFastLaunchImagesInput")
            .field("image_ids", &self.image_ids)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeFastSnapshotRestoresInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFastSnapshotRestoresInput")
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeFleetHistoryInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFleetHistoryInput")
            .field("dry_run", &self.dry_run)
            .field("event_type", &self.event_type)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("fleet_id", &self.fleet_id)
            .field("start_time", &self.start_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeFleetInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFleetInstancesInput")
            .field("dry_run", &self.dry_run)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("fleet_id", &self.fleet_id)
            .field("filters", &self.filters)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeFleetsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFleetsInput")
            .field("dry_run", &self.dry_run)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("fleet_ids", &self.fleet_ids)
            .field("filters", &self.filters)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeFlowLogsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFlowLogsInput")
            .field("dry_run", &self.dry_run)
            .field("filter", &self.filter)
            .field("flow_log_ids", &self.flow_log_ids)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeFpgaImageAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFpgaImageAttributeInput")
            .field("dry_run", &self.dry_run)
            .field("fpga_image_id", &self.fpga_image_id)
            .field("attribute", &self.attribute)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeFpgaImagesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFpgaImagesInput")
            .field("dry_run", &self.dry_run)
            .field("fpga_image_ids", &self.fpga_image_ids)
            .field("owners", &self.owners)
            .field("filters", &self.filters)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeHostReservationOfferingsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeHostReservationOfferingsInput")
            .field("filter", &self.filter)
            .field("max_duration", &self.max_duration)
            .field("max_results", &self.max_results)
            .field("min_duration", &self.min_duration)
            .field("next_token", &self.next_token)
            .field("offering_id", &self.offering_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeHostReservationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeHostReservationsInput")
            .field("filter", &self.filter)
            .field("host_reservation_id_set", &self.host_reservation_id_set)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeHostsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeHostsInput")
            .field("filter", &self.filter)
            .field("host_ids", &self.host_ids)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeIamInstanceProfileAssociationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeIamInstanceProfileAssociationsInput")
            .field("association_ids", &self.association_ids)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeIdFormatInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeIdFormatInput")
            .field("resource", &self.resource)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeIdentityIdFormatInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeIdentityIdFormatInput")
            .field("principal_arn", &self.principal_arn)
            .field("resource", &self.resource)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeImageAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeImageAttributeInput")
            .field("attribute", &self.attribute)
            .field("image_id", &self.image_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeImagesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeImagesInput")
            .field("executable_users", &self.executable_users)
            .field("filters", &self.filters)
            .field("image_ids", &self.image_ids)
            .field("owners", &self.owners)
            .field("include_deprecated", &self.include_deprecated)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeImportImageTasksInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeImportImageTasksInput")
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("import_task_ids", &self.import_task_ids)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeImportSnapshotTasksInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeImportSnapshotTasksInput")
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("import_task_ids", &self.import_task_ids)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeInstanceAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInstanceAttributeInput")
            .field("attribute", &self.attribute)
            .field("dry_run", &self.dry_run)
            .field("instance_id", &self.instance_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeInstanceCreditSpecificationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInstanceCreditSpecificationsInput")
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("instance_ids", &self.instance_ids)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeInstanceEventNotificationAttributesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInstanceEventNotificationAttributesInput")
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeInstanceEventWindowsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInstanceEventWindowsInput")
            .field("dry_run", &self.dry_run)
            .field("instance_event_window_ids", &self.instance_event_window_ids)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeInstanceStatusInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInstanceStatusInput")
            .field("filters", &self.filters)
            .field("instance_ids", &self.instance_ids)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .field("include_all_instances", &self.include_all_instances)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeInstanceTypeOfferingsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInstanceTypeOfferingsInput")
            .field("dry_run", &self.dry_run)
            .field("location_type", &self.location_type)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeInstanceTypesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInstanceTypesInput")
            .field("dry_run", &self.dry_run)
            .field("instance_types", &self.instance_types)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInstancesInput")
            .field("filters", &self.filters)
            .field("instance_ids", &self.instance_ids)
            .field("dry_run", &self.dry_run)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeInternetGatewaysInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInternetGatewaysInput")
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .field("internet_gateway_ids", &self.internet_gateway_ids)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeIpamPoolsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeIpamPoolsInput")
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("ipam_pool_ids", &self.ipam_pool_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeIpamScopesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeIpamScopesInput")
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("ipam_scope_ids", &self.ipam_scope_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeIpamsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeIpamsInput")
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("ipam_ids", &self.ipam_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeIpv6PoolsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeIpv6PoolsInput")
            .field("pool_ids", &self.pool_ids)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeKeyPairsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeKeyPairsInput")
            .field("filters", &self.filters)
            .field("key_names", &self.key_names)
            .field("key_pair_ids", &self.key_pair_ids)
            .field("dry_run", &self.dry_run)
            .field("include_public_key", &self.include_public_key)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeLaunchTemplateVersionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeLaunchTemplateVersionsInput")
            .field("dry_run", &self.dry_run)
            .field("launch_template_id", &self.launch_template_id)
            .field("launch_template_name", &self.launch_template_name)
            .field("versions", &self.versions)
            .field("min_version", &self.min_version)
            .field("max_version", &self.max_version)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .field("filters", &self.filters)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeLaunchTemplatesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeLaunchTemplatesInput")
            .field("dry_run", &self.dry_run)
            .field("launch_template_ids", &self.launch_template_ids)
            .field("launch_template_names", &self.launch_template_names)
            .field("filters", &self.filters)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug
    for aws_sdk_ec2::input::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput
{
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsInput")
            .field(
                "local_gateway_route_table_virtual_interface_group_association_ids",
                &self.local_gateway_route_table_virtual_interface_group_association_ids,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeLocalGatewayRouteTableVpcAssociationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeLocalGatewayRouteTableVpcAssociationsInput")
            .field(
                "local_gateway_route_table_vpc_association_ids",
                &self.local_gateway_route_table_vpc_association_ids,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeLocalGatewayRouteTablesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeLocalGatewayRouteTablesInput")
            .field(
                "local_gateway_route_table_ids",
                &self.local_gateway_route_table_ids,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeLocalGatewayVirtualInterfaceGroupsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeLocalGatewayVirtualInterfaceGroupsInput")
            .field(
                "local_gateway_virtual_interface_group_ids",
                &self.local_gateway_virtual_interface_group_ids,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeLocalGatewayVirtualInterfacesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeLocalGatewayVirtualInterfacesInput")
            .field(
                "local_gateway_virtual_interface_ids",
                &self.local_gateway_virtual_interface_ids,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeLocalGatewaysInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeLocalGatewaysInput")
            .field("local_gateway_ids", &self.local_gateway_ids)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeManagedPrefixListsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeManagedPrefixListsInput")
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("prefix_list_ids", &self.prefix_list_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeMovingAddressesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeMovingAddressesInput")
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("public_ips", &self.public_ips)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeNatGatewaysInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNatGatewaysInput")
            .field("dry_run", &self.dry_run)
            .field("filter", &self.filter)
            .field("max_results", &self.max_results)
            .field("nat_gateway_ids", &self.nat_gateway_ids)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeNetworkAclsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNetworkAclsInput")
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .field("network_acl_ids", &self.network_acl_ids)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeNetworkInsightsAccessScopeAnalysesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNetworkInsightsAccessScopeAnalysesInput")
            .field(
                "network_insights_access_scope_analysis_ids",
                &self.network_insights_access_scope_analysis_ids,
            )
            .field(
                "network_insights_access_scope_id",
                &self.network_insights_access_scope_id,
            )
            .field("analysis_start_time_begin", &self.analysis_start_time_begin)
            .field("analysis_start_time_end", &self.analysis_start_time_end)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("dry_run", &self.dry_run)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeNetworkInsightsAccessScopesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNetworkInsightsAccessScopesInput")
            .field(
                "network_insights_access_scope_ids",
                &self.network_insights_access_scope_ids,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("dry_run", &self.dry_run)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeNetworkInsightsAnalysesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNetworkInsightsAnalysesInput")
            .field(
                "network_insights_analysis_ids",
                &self.network_insights_analysis_ids,
            )
            .field("network_insights_path_id", &self.network_insights_path_id)
            .field("analysis_start_time", &self.analysis_start_time)
            .field("analysis_end_time", &self.analysis_end_time)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("dry_run", &self.dry_run)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeNetworkInsightsPathsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNetworkInsightsPathsInput")
            .field("network_insights_path_ids", &self.network_insights_path_ids)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("dry_run", &self.dry_run)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeNetworkInterfaceAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNetworkInterfaceAttributeInput")
            .field("attribute", &self.attribute)
            .field("dry_run", &self.dry_run)
            .field("network_interface_id", &self.network_interface_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeNetworkInterfacePermissionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNetworkInterfacePermissionsInput")
            .field(
                "network_interface_permission_ids",
                &self.network_interface_permission_ids,
            )
            .field("filters", &self.filters)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeNetworkInterfacesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNetworkInterfacesInput")
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .field("network_interface_ids", &self.network_interface_ids)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribePlacementGroupsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribePlacementGroupsInput")
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .field("group_names", &self.group_names)
            .field("group_ids", &self.group_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribePrefixListsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribePrefixListsInput")
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("prefix_list_ids", &self.prefix_list_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribePrincipalIdFormatInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribePrincipalIdFormatInput")
            .field("dry_run", &self.dry_run)
            .field("resources", &self.resources)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribePublicIpv4PoolsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribePublicIpv4PoolsInput")
            .field("pool_ids", &self.pool_ids)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .field("filters", &self.filters)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeRegionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeRegionsInput")
            .field("filters", &self.filters)
            .field("region_names", &self.region_names)
            .field("dry_run", &self.dry_run)
            .field("all_regions", &self.all_regions)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeReplaceRootVolumeTasksInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeReplaceRootVolumeTasksInput")
            .field(
                "replace_root_volume_task_ids",
                &self.replace_root_volume_task_ids,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeReservedInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeReservedInstancesInput")
            .field("filters", &self.filters)
            .field("offering_class", &self.offering_class)
            .field("reserved_instances_ids", &self.reserved_instances_ids)
            .field("dry_run", &self.dry_run)
            .field("offering_type", &self.offering_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeReservedInstancesListingsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeReservedInstancesListingsInput")
            .field("filters", &self.filters)
            .field("reserved_instances_id", &self.reserved_instances_id)
            .field(
                "reserved_instances_listing_id",
                &self.reserved_instances_listing_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeReservedInstancesModificationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeReservedInstancesModificationsInput")
            .field("filters", &self.filters)
            .field(
                "reserved_instances_modification_ids",
                &self.reserved_instances_modification_ids,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeReservedInstancesOfferingsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeReservedInstancesOfferingsInput")
            .field("availability_zone", &self.availability_zone)
            .field("filters", &self.filters)
            .field("include_marketplace", &self.include_marketplace)
            .field("instance_type", &self.instance_type)
            .field("max_duration", &self.max_duration)
            .field("max_instance_count", &self.max_instance_count)
            .field("min_duration", &self.min_duration)
            .field("offering_class", &self.offering_class)
            .field("product_description", &self.product_description)
            .field(
                "reserved_instances_offering_ids",
                &self.reserved_instances_offering_ids,
            )
            .field("dry_run", &self.dry_run)
            .field("instance_tenancy", &self.instance_tenancy)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("offering_type", &self.offering_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeRouteTablesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeRouteTablesInput")
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .field("route_table_ids", &self.route_table_ids)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeScheduledInstanceAvailabilityInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeScheduledInstanceAvailabilityInput")
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field(
                "first_slot_start_time_range",
                &self.first_slot_start_time_range,
            )
            .field("max_results", &self.max_results)
            .field(
                "max_slot_duration_in_hours",
                &self.max_slot_duration_in_hours,
            )
            .field(
                "min_slot_duration_in_hours",
                &self.min_slot_duration_in_hours,
            )
            .field("next_token", &self.next_token)
            .field("recurrence", &self.recurrence)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeScheduledInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeScheduledInstancesInput")
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("scheduled_instance_ids", &self.scheduled_instance_ids)
            .field("slot_start_time_range", &self.slot_start_time_range)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeSecurityGroupReferencesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSecurityGroupReferencesInput")
            .field("dry_run", &self.dry_run)
            .field("group_id", &self.group_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeSecurityGroupRulesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSecurityGroupRulesInput")
            .field("filters", &self.filters)
            .field("security_group_rule_ids", &self.security_group_rule_ids)
            .field("dry_run", &self.dry_run)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeSecurityGroupsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSecurityGroupsInput")
            .field("filters", &self.filters)
            .field("group_ids", &self.group_ids)
            .field("group_names", &self.group_names)
            .field("dry_run", &self.dry_run)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeSnapshotAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSnapshotAttributeInput")
            .field("attribute", &self.attribute)
            .field("snapshot_id", &self.snapshot_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeSnapshotTierStatusInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSnapshotTierStatusInput")
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeSnapshotsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSnapshotsInput")
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("owner_ids", &self.owner_ids)
            .field("restorable_by_user_ids", &self.restorable_by_user_ids)
            .field("snapshot_ids", &self.snapshot_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeSpotDatafeedSubscriptionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSpotDatafeedSubscriptionInput")
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeSpotFleetInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSpotFleetInstancesInput")
            .field("dry_run", &self.dry_run)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("spot_fleet_request_id", &self.spot_fleet_request_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeSpotFleetRequestHistoryInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSpotFleetRequestHistoryInput")
            .field("dry_run", &self.dry_run)
            .field("event_type", &self.event_type)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("spot_fleet_request_id", &self.spot_fleet_request_id)
            .field("start_time", &self.start_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeSpotFleetRequestsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSpotFleetRequestsInput")
            .field("dry_run", &self.dry_run)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("spot_fleet_request_ids", &self.spot_fleet_request_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeSpotInstanceRequestsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSpotInstanceRequestsInput")
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .field("spot_instance_request_ids", &self.spot_instance_request_ids)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeSpotPriceHistoryInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSpotPriceHistoryInput")
            .field("filters", &self.filters)
            .field("availability_zone", &self.availability_zone)
            .field("dry_run", &self.dry_run)
            .field("end_time", &self.end_time)
            .field("instance_types", &self.instance_types)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("product_descriptions", &self.product_descriptions)
            .field("start_time", &self.start_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeStaleSecurityGroupsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeStaleSecurityGroupsInput")
            .field("dry_run", &self.dry_run)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeStoreImageTasksInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeStoreImageTasksInput")
            .field("image_ids", &self.image_ids)
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeSubnetsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSubnetsInput")
            .field("filters", &self.filters)
            .field("subnet_ids", &self.subnet_ids)
            .field("dry_run", &self.dry_run)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeTagsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTagsInput")
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeTrafficMirrorFiltersInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTrafficMirrorFiltersInput")
            .field("traffic_mirror_filter_ids", &self.traffic_mirror_filter_ids)
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeTrafficMirrorSessionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTrafficMirrorSessionsInput")
            .field(
                "traffic_mirror_session_ids",
                &self.traffic_mirror_session_ids,
            )
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeTrafficMirrorTargetsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTrafficMirrorTargetsInput")
            .field("traffic_mirror_target_ids", &self.traffic_mirror_target_ids)
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeTransitGatewayAttachmentsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTransitGatewayAttachmentsInput")
            .field(
                "transit_gateway_attachment_ids",
                &self.transit_gateway_attachment_ids,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeTransitGatewayConnectPeersInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTransitGatewayConnectPeersInput")
            .field(
                "transit_gateway_connect_peer_ids",
                &self.transit_gateway_connect_peer_ids,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeTransitGatewayConnectsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTransitGatewayConnectsInput")
            .field(
                "transit_gateway_attachment_ids",
                &self.transit_gateway_attachment_ids,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeTransitGatewayMulticastDomainsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTransitGatewayMulticastDomainsInput")
            .field(
                "transit_gateway_multicast_domain_ids",
                &self.transit_gateway_multicast_domain_ids,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeTransitGatewayPeeringAttachmentsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTransitGatewayPeeringAttachmentsInput")
            .field(
                "transit_gateway_attachment_ids",
                &self.transit_gateway_attachment_ids,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeTransitGatewayRouteTablesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTransitGatewayRouteTablesInput")
            .field(
                "transit_gateway_route_table_ids",
                &self.transit_gateway_route_table_ids,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeTransitGatewayVpcAttachmentsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTransitGatewayVpcAttachmentsInput")
            .field(
                "transit_gateway_attachment_ids",
                &self.transit_gateway_attachment_ids,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeTransitGatewaysInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTransitGatewaysInput")
            .field("transit_gateway_ids", &self.transit_gateway_ids)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeTrunkInterfaceAssociationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTrunkInterfaceAssociationsInput")
            .field("association_ids", &self.association_ids)
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVolumeAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVolumeAttributeInput")
            .field("attribute", &self.attribute)
            .field("volume_id", &self.volume_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVolumeStatusInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVolumeStatusInput")
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("volume_ids", &self.volume_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVolumesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVolumesInput")
            .field("filters", &self.filters)
            .field("volume_ids", &self.volume_ids)
            .field("dry_run", &self.dry_run)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVolumesModificationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVolumesModificationsInput")
            .field("dry_run", &self.dry_run)
            .field("volume_ids", &self.volume_ids)
            .field("filters", &self.filters)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVpcAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcAttributeInput")
            .field("attribute", &self.attribute)
            .field("vpc_id", &self.vpc_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVpcClassicLinkDnsSupportInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcClassicLinkDnsSupportInput")
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("vpc_ids", &self.vpc_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVpcClassicLinkInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcClassicLinkInput")
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .field("vpc_ids", &self.vpc_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVpcEndpointConnectionNotificationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcEndpointConnectionNotificationsInput")
            .field("dry_run", &self.dry_run)
            .field(
                "connection_notification_id",
                &self.connection_notification_id,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVpcEndpointConnectionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcEndpointConnectionsInput")
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVpcEndpointServiceConfigurationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcEndpointServiceConfigurationsInput")
            .field("dry_run", &self.dry_run)
            .field("service_ids", &self.service_ids)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVpcEndpointServicePermissionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcEndpointServicePermissionsInput")
            .field("dry_run", &self.dry_run)
            .field("service_id", &self.service_id)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVpcEndpointServicesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcEndpointServicesInput")
            .field("dry_run", &self.dry_run)
            .field("service_names", &self.service_names)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVpcEndpointsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcEndpointsInput")
            .field("dry_run", &self.dry_run)
            .field("vpc_endpoint_ids", &self.vpc_endpoint_ids)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVpcPeeringConnectionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcPeeringConnectionsInput")
            .field("filters", &self.filters)
            .field("dry_run", &self.dry_run)
            .field(
                "vpc_peering_connection_ids",
                &self.vpc_peering_connection_ids,
            )
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVpcsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcsInput")
            .field("filters", &self.filters)
            .field("vpc_ids", &self.vpc_ids)
            .field("dry_run", &self.dry_run)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVpnConnectionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpnConnectionsInput")
            .field("filters", &self.filters)
            .field("vpn_connection_ids", &self.vpn_connection_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DescribeVpnGatewaysInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpnGatewaysInput")
            .field("filters", &self.filters)
            .field("vpn_gateway_ids", &self.vpn_gateway_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DetachClassicLinkVpcInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DetachClassicLinkVpcInput")
            .field("dry_run", &self.dry_run)
            .field("instance_id", &self.instance_id)
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DetachInternetGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DetachInternetGatewayInput")
            .field("dry_run", &self.dry_run)
            .field("internet_gateway_id", &self.internet_gateway_id)
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DetachNetworkInterfaceInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DetachNetworkInterfaceInput")
            .field("attachment_id", &self.attachment_id)
            .field("dry_run", &self.dry_run)
            .field("force", &self.force)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DetachVolumeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DetachVolumeInput")
            .field("device", &self.device)
            .field("force", &self.force)
            .field("instance_id", &self.instance_id)
            .field("volume_id", &self.volume_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DetachVpnGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DetachVpnGatewayInput")
            .field("vpc_id", &self.vpc_id)
            .field("vpn_gateway_id", &self.vpn_gateway_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisableEbsEncryptionByDefaultInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableEbsEncryptionByDefaultInput")
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisableFastLaunchInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableFastLaunchInput")
            .field("image_id", &self.image_id)
            .field("force", &self.force)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisableFastSnapshotRestoresInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableFastSnapshotRestoresInput")
            .field("availability_zones", &self.availability_zones)
            .field("source_snapshot_ids", &self.source_snapshot_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisableImageDeprecationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableImageDeprecationInput")
            .field("image_id", &self.image_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisableIpamOrganizationAdminAccountInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableIpamOrganizationAdminAccountInput")
            .field("dry_run", &self.dry_run)
            .field(
                "delegated_admin_account_id",
                &self.delegated_admin_account_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisableSerialConsoleAccessInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableSerialConsoleAccessInput")
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisableTransitGatewayRouteTablePropagationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableTransitGatewayRouteTablePropagationInput")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisableVgwRoutePropagationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableVgwRoutePropagationInput")
            .field("gateway_id", &self.gateway_id)
            .field("route_table_id", &self.route_table_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisableVpcClassicLinkDnsSupportInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableVpcClassicLinkDnsSupportInput")
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisableVpcClassicLinkInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableVpcClassicLinkInput")
            .field("dry_run", &self.dry_run)
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisassociateAddressInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateAddressInput")
            .field("association_id", &self.association_id)
            .field("public_ip", &self.public_ip)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisassociateClientVpnTargetNetworkInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateClientVpnTargetNetworkInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("association_id", &self.association_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisassociateEnclaveCertificateIamRoleInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateEnclaveCertificateIamRoleInput")
            .field("certificate_arn", &self.certificate_arn)
            .field("role_arn", &self.role_arn)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisassociateIamInstanceProfileInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateIamInstanceProfileInput")
            .field("association_id", &self.association_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisassociateInstanceEventWindowInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateInstanceEventWindowInput")
            .field("dry_run", &self.dry_run)
            .field("instance_event_window_id", &self.instance_event_window_id)
            .field("association_target", &self.association_target)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisassociateRouteTableInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateRouteTableInput")
            .field("association_id", &self.association_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisassociateSubnetCidrBlockInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateSubnetCidrBlockInput")
            .field("association_id", &self.association_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisassociateTransitGatewayMulticastDomainInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateTransitGatewayMulticastDomainInput")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("subnet_ids", &self.subnet_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisassociateTransitGatewayRouteTableInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateTransitGatewayRouteTableInput")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisassociateTrunkInterfaceInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateTrunkInterfaceInput")
            .field("association_id", &self.association_id)
            .field("client_token", &self.client_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::DisassociateVpcCidrBlockInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateVpcCidrBlockInput")
            .field("association_id", &self.association_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::EnableEbsEncryptionByDefaultInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableEbsEncryptionByDefaultInput")
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::EnableFastLaunchInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableFastLaunchInput")
            .field("image_id", &self.image_id)
            .field("resource_type", &self.resource_type)
            .field("snapshot_configuration", &self.snapshot_configuration)
            .field("launch_template", &self.launch_template)
            .field("max_parallel_launches", &self.max_parallel_launches)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::EnableFastSnapshotRestoresInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableFastSnapshotRestoresInput")
            .field("availability_zones", &self.availability_zones)
            .field("source_snapshot_ids", &self.source_snapshot_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::EnableImageDeprecationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableImageDeprecationInput")
            .field("image_id", &self.image_id)
            .field("deprecate_at", &self.deprecate_at)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::EnableIpamOrganizationAdminAccountInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableIpamOrganizationAdminAccountInput")
            .field("dry_run", &self.dry_run)
            .field(
                "delegated_admin_account_id",
                &self.delegated_admin_account_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::EnableSerialConsoleAccessInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableSerialConsoleAccessInput")
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::EnableTransitGatewayRouteTablePropagationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableTransitGatewayRouteTablePropagationInput")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::EnableVgwRoutePropagationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableVgwRoutePropagationInput")
            .field("gateway_id", &self.gateway_id)
            .field("route_table_id", &self.route_table_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::EnableVolumeIoInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableVolumeIoInput")
            .field("dry_run", &self.dry_run)
            .field("volume_id", &self.volume_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::EnableVpcClassicLinkDnsSupportInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableVpcClassicLinkDnsSupportInput")
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::EnableVpcClassicLinkInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableVpcClassicLinkInput")
            .field("dry_run", &self.dry_run)
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ExportClientVpnClientCertificateRevocationListInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ExportClientVpnClientCertificateRevocationListInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ExportClientVpnClientConfigurationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ExportClientVpnClientConfigurationInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ExportImageInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ExportImageInput")
            .field("client_token", &self.client_token)
            .field("description", &self.description)
            .field("disk_image_format", &self.disk_image_format)
            .field("dry_run", &self.dry_run)
            .field("image_id", &self.image_id)
            .field("s3_export_location", &self.s3_export_location)
            .field("role_name", &self.role_name)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ExportTransitGatewayRoutesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ExportTransitGatewayRoutesInput")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field("filters", &self.filters)
            .field("s3_bucket", &self.s3_bucket)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetAssociatedEnclaveCertificateIamRolesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetAssociatedEnclaveCertificateIamRolesInput")
            .field("certificate_arn", &self.certificate_arn)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetAssociatedIpv6PoolCidrsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetAssociatedIpv6PoolCidrsInput")
            .field("pool_id", &self.pool_id)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetCapacityReservationUsageInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetCapacityReservationUsageInput")
            .field("capacity_reservation_id", &self.capacity_reservation_id)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetCoipPoolUsageInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetCoipPoolUsageInput")
            .field("pool_id", &self.pool_id)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetConsoleOutputInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetConsoleOutputInput")
            .field("instance_id", &self.instance_id)
            .field("dry_run", &self.dry_run)
            .field("latest", &self.latest)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetConsoleScreenshotInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetConsoleScreenshotInput")
            .field("dry_run", &self.dry_run)
            .field("instance_id", &self.instance_id)
            .field("wake_up", &self.wake_up)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetDefaultCreditSpecificationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetDefaultCreditSpecificationInput")
            .field("dry_run", &self.dry_run)
            .field("instance_family", &self.instance_family)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetEbsDefaultKmsKeyIdInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetEbsDefaultKmsKeyIdInput")
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetEbsEncryptionByDefaultInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetEbsEncryptionByDefaultInput")
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetFlowLogsIntegrationTemplateInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetFlowLogsIntegrationTemplateInput")
            .field("dry_run", &self.dry_run)
            .field("flow_log_id", &self.flow_log_id)
            .field(
                "config_delivery_s3_destination_arn",
                &self.config_delivery_s3_destination_arn,
            )
            .field("integrate_services", &self.integrate_services)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetGroupsForCapacityReservationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetGroupsForCapacityReservationInput")
            .field("capacity_reservation_id", &self.capacity_reservation_id)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetHostReservationPurchasePreviewInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetHostReservationPurchasePreviewInput")
            .field("host_id_set", &self.host_id_set)
            .field("offering_id", &self.offering_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetInstanceTypesFromInstanceRequirementsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetInstanceTypesFromInstanceRequirementsInput")
            .field("dry_run", &self.dry_run)
            .field("architecture_types", &self.architecture_types)
            .field("virtualization_types", &self.virtualization_types)
            .field("instance_requirements", &self.instance_requirements)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetInstanceUefiDataInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetInstanceUefiDataInput")
            .field("instance_id", &self.instance_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetIpamAddressHistoryInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetIpamAddressHistoryInput")
            .field("dry_run", &self.dry_run)
            .field("cidr", &self.cidr)
            .field("ipam_scope_id", &self.ipam_scope_id)
            .field("vpc_id", &self.vpc_id)
            .field("start_time", &self.start_time)
            .field("end_time", &self.end_time)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetIpamPoolAllocationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetIpamPoolAllocationsInput")
            .field("dry_run", &self.dry_run)
            .field("ipam_pool_id", &self.ipam_pool_id)
            .field("ipam_pool_allocation_id", &self.ipam_pool_allocation_id)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetIpamPoolCidrsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetIpamPoolCidrsInput")
            .field("dry_run", &self.dry_run)
            .field("ipam_pool_id", &self.ipam_pool_id)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetIpamResourceCidrsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetIpamResourceCidrsInput")
            .field("dry_run", &self.dry_run)
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("ipam_scope_id", &self.ipam_scope_id)
            .field("ipam_pool_id", &self.ipam_pool_id)
            .field("resource_id", &self.resource_id)
            .field("resource_type", &self.resource_type)
            .field("resource_tag", &self.resource_tag)
            .field("resource_owner", &self.resource_owner)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetLaunchTemplateDataInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetLaunchTemplateDataInput")
            .field("dry_run", &self.dry_run)
            .field("instance_id", &self.instance_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetManagedPrefixListAssociationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetManagedPrefixListAssociationsInput")
            .field("dry_run", &self.dry_run)
            .field("prefix_list_id", &self.prefix_list_id)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetManagedPrefixListEntriesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetManagedPrefixListEntriesInput")
            .field("dry_run", &self.dry_run)
            .field("prefix_list_id", &self.prefix_list_id)
            .field("target_version", &self.target_version)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetNetworkInsightsAccessScopeAnalysisFindingsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetNetworkInsightsAccessScopeAnalysisFindingsInput")
            .field(
                "network_insights_access_scope_analysis_id",
                &self.network_insights_access_scope_analysis_id,
            )
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetNetworkInsightsAccessScopeContentInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetNetworkInsightsAccessScopeContentInput")
            .field(
                "network_insights_access_scope_id",
                &self.network_insights_access_scope_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetPasswordDataInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetPasswordDataInput")
            .field("instance_id", &self.instance_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetReservedInstancesExchangeQuoteInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetReservedInstancesExchangeQuoteInput")
            .field("dry_run", &self.dry_run)
            .field("reserved_instance_ids", &self.reserved_instance_ids)
            .field("target_configurations", &self.target_configurations)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetSerialConsoleAccessStatusInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetSerialConsoleAccessStatusInput")
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetSpotPlacementScoresInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetSpotPlacementScoresInput")
            .field("instance_types", &self.instance_types)
            .field("target_capacity", &self.target_capacity)
            .field("target_capacity_unit_type", &self.target_capacity_unit_type)
            .field("single_availability_zone", &self.single_availability_zone)
            .field("region_names", &self.region_names)
            .field(
                "instance_requirements_with_metadata",
                &self.instance_requirements_with_metadata,
            )
            .field("dry_run", &self.dry_run)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetSubnetCidrReservationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetSubnetCidrReservationsInput")
            .field("filters", &self.filters)
            .field("subnet_id", &self.subnet_id)
            .field("dry_run", &self.dry_run)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetTransitGatewayAttachmentPropagationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetTransitGatewayAttachmentPropagationsInput")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetTransitGatewayMulticastDomainAssociationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetTransitGatewayMulticastDomainAssociationsInput")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetTransitGatewayPrefixListReferencesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetTransitGatewayPrefixListReferencesInput")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetTransitGatewayRouteTableAssociationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetTransitGatewayRouteTableAssociationsInput")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetTransitGatewayRouteTablePropagationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetTransitGatewayRouteTablePropagationsInput")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetVpnConnectionDeviceSampleConfigurationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetVpnConnectionDeviceSampleConfigurationInput")
            .field("vpn_connection_id", &self.vpn_connection_id)
            .field(
                "vpn_connection_device_type_id",
                &self.vpn_connection_device_type_id,
            )
            .field(
                "internet_key_exchange_version",
                &self.internet_key_exchange_version,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::GetVpnConnectionDeviceTypesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetVpnConnectionDeviceTypesInput")
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ImportClientVpnClientCertificateRevocationListInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportClientVpnClientCertificateRevocationListInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field(
                "certificate_revocation_list",
                &self.certificate_revocation_list,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ImportImageInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportImageInput")
            .field("architecture", &self.architecture)
            .field("client_data", &self.client_data)
            .field("client_token", &self.client_token)
            .field("description", &self.description)
            .field("disk_containers", &self.disk_containers)
            .field("dry_run", &self.dry_run)
            .field("encrypted", &self.encrypted)
            .field("hypervisor", &self.hypervisor)
            .field("kms_key_id", &self.kms_key_id)
            .field("license_type", &self.license_type)
            .field("platform", &self.platform)
            .field("role_name", &self.role_name)
            .field("license_specifications", &self.license_specifications)
            .field("tag_specifications", &self.tag_specifications)
            .field("usage_operation", &self.usage_operation)
            .field("boot_mode", &self.boot_mode)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ImportInstanceInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportInstanceInput")
            .field("description", &self.description)
            .field("disk_images", &self.disk_images)
            .field("dry_run", &self.dry_run)
            .field("launch_specification", &self.launch_specification)
            .field("platform", &self.platform)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ImportKeyPairInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportKeyPairInput")
            .field("dry_run", &self.dry_run)
            .field("key_name", &self.key_name)
            .field("public_key_material", &self.public_key_material)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ImportSnapshotInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportSnapshotInput")
            .field("client_data", &self.client_data)
            .field("client_token", &self.client_token)
            .field("description", &self.description)
            .field("disk_container", &self.disk_container)
            .field("dry_run", &self.dry_run)
            .field("encrypted", &self.encrypted)
            .field("kms_key_id", &self.kms_key_id)
            .field("role_name", &self.role_name)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ImportVolumeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportVolumeInput")
            .field("availability_zone", &self.availability_zone)
            .field("description", &self.description)
            .field("dry_run", &self.dry_run)
            .field("image", &self.image)
            .field("volume", &self.volume)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ListImagesInRecycleBinInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ListImagesInRecycleBinInput")
            .field("image_ids", &self.image_ids)
            .field("next_token", &self.next_token)
            .field("max_results", &self.max_results)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ListSnapshotsInRecycleBinInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ListSnapshotsInRecycleBinInput")
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("snapshot_ids", &self.snapshot_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyAddressAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyAddressAttributeInput")
            .field("allocation_id", &self.allocation_id)
            .field("domain_name", &self.domain_name)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyAvailabilityZoneGroupInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyAvailabilityZoneGroupInput")
            .field("group_name", &self.group_name)
            .field("opt_in_status", &self.opt_in_status)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyCapacityReservationFleetInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyCapacityReservationFleetInput")
            .field(
                "capacity_reservation_fleet_id",
                &self.capacity_reservation_fleet_id,
            )
            .field("total_target_capacity", &self.total_target_capacity)
            .field("end_date", &self.end_date)
            .field("dry_run", &self.dry_run)
            .field("remove_end_date", &self.remove_end_date)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyCapacityReservationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyCapacityReservationInput")
            .field("capacity_reservation_id", &self.capacity_reservation_id)
            .field("instance_count", &self.instance_count)
            .field("end_date", &self.end_date)
            .field("end_date_type", &self.end_date_type)
            .field("accept", &self.accept)
            .field("dry_run", &self.dry_run)
            .field("additional_info", &self.additional_info)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyClientVpnEndpointInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyClientVpnEndpointInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("server_certificate_arn", &self.server_certificate_arn)
            .field("connection_log_options", &self.connection_log_options)
            .field("dns_servers", &self.dns_servers)
            .field("vpn_port", &self.vpn_port)
            .field("description", &self.description)
            .field("split_tunnel", &self.split_tunnel)
            .field("dry_run", &self.dry_run)
            .field("security_group_ids", &self.security_group_ids)
            .field("vpc_id", &self.vpc_id)
            .field("self_service_portal", &self.self_service_portal)
            .field("client_connect_options", &self.client_connect_options)
            .field("session_timeout_hours", &self.session_timeout_hours)
            .field(
                "client_login_banner_options",
                &self.client_login_banner_options,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyDefaultCreditSpecificationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyDefaultCreditSpecificationInput")
            .field("dry_run", &self.dry_run)
            .field("instance_family", &self.instance_family)
            .field("cpu_credits", &self.cpu_credits)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyEbsDefaultKmsKeyIdInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyEbsDefaultKmsKeyIdInput")
            .field("kms_key_id", &self.kms_key_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyFleetInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyFleetInput")
            .field("dry_run", &self.dry_run)
            .field(
                "excess_capacity_termination_policy",
                &self.excess_capacity_termination_policy,
            )
            .field("launch_template_configs", &self.launch_template_configs)
            .field("fleet_id", &self.fleet_id)
            .field(
                "target_capacity_specification",
                &self.target_capacity_specification,
            )
            .field("context", &self.context)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyFpgaImageAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyFpgaImageAttributeInput")
            .field("dry_run", &self.dry_run)
            .field("fpga_image_id", &self.fpga_image_id)
            .field("attribute", &self.attribute)
            .field("operation_type", &self.operation_type)
            .field("user_ids", &self.user_ids)
            .field("user_groups", &self.user_groups)
            .field("product_codes", &self.product_codes)
            .field("load_permission", &self.load_permission)
            .field("description", &self.description)
            .field("name", &self.name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyHostsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyHostsInput")
            .field("auto_placement", &self.auto_placement)
            .field("host_ids", &self.host_ids)
            .field("host_recovery", &self.host_recovery)
            .field("instance_type", &self.instance_type)
            .field("instance_family", &self.instance_family)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyIdFormatInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyIdFormatInput")
            .field("resource", &self.resource)
            .field("use_long_ids", &self.use_long_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyIdentityIdFormatInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyIdentityIdFormatInput")
            .field("principal_arn", &self.principal_arn)
            .field("resource", &self.resource)
            .field("use_long_ids", &self.use_long_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyImageAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyImageAttributeInput")
            .field("attribute", &self.attribute)
            .field("description", &self.description)
            .field("image_id", &self.image_id)
            .field("launch_permission", &self.launch_permission)
            .field("operation_type", &self.operation_type)
            .field("product_codes", &self.product_codes)
            .field("user_groups", &self.user_groups)
            .field("user_ids", &self.user_ids)
            .field("value", &self.value)
            .field("dry_run", &self.dry_run)
            .field("organization_arns", &self.organization_arns)
            .field("organizational_unit_arns", &self.organizational_unit_arns)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyInstanceAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyInstanceAttributeInput")
            .field("source_dest_check", &self.source_dest_check)
            .field("attribute", &self.attribute)
            .field("block_device_mappings", &self.block_device_mappings)
            .field("disable_api_termination", &self.disable_api_termination)
            .field("dry_run", &self.dry_run)
            .field("ebs_optimized", &self.ebs_optimized)
            .field("ena_support", &self.ena_support)
            .field("groups", &self.groups)
            .field("instance_id", &self.instance_id)
            .field(
                "instance_initiated_shutdown_behavior",
                &self.instance_initiated_shutdown_behavior,
            )
            .field("instance_type", &self.instance_type)
            .field("kernel", &self.kernel)
            .field("ramdisk", &self.ramdisk)
            .field("sriov_net_support", &self.sriov_net_support)
            .field("user_data", &self.user_data)
            .field("value", &self.value)
            .field("disable_api_stop", &self.disable_api_stop)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyInstanceCapacityReservationAttributesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyInstanceCapacityReservationAttributesInput")
            .field("instance_id", &self.instance_id)
            .field(
                "capacity_reservation_specification",
                &self.capacity_reservation_specification,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyInstanceCreditSpecificationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyInstanceCreditSpecificationInput")
            .field("dry_run", &self.dry_run)
            .field("client_token", &self.client_token)
            .field(
                "instance_credit_specifications",
                &self.instance_credit_specifications,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyInstanceEventStartTimeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyInstanceEventStartTimeInput")
            .field("dry_run", &self.dry_run)
            .field("instance_id", &self.instance_id)
            .field("instance_event_id", &self.instance_event_id)
            .field("not_before", &self.not_before)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyInstanceEventWindowInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyInstanceEventWindowInput")
            .field("dry_run", &self.dry_run)
            .field("name", &self.name)
            .field("instance_event_window_id", &self.instance_event_window_id)
            .field("time_ranges", &self.time_ranges)
            .field("cron_expression", &self.cron_expression)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyInstanceMaintenanceOptionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyInstanceMaintenanceOptionsInput")
            .field("instance_id", &self.instance_id)
            .field("auto_recovery", &self.auto_recovery)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyInstanceMetadataOptionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyInstanceMetadataOptionsInput")
            .field("instance_id", &self.instance_id)
            .field("http_tokens", &self.http_tokens)
            .field(
                "http_put_response_hop_limit",
                &self.http_put_response_hop_limit,
            )
            .field("http_endpoint", &self.http_endpoint)
            .field("dry_run", &self.dry_run)
            .field("http_protocol_ipv6", &self.http_protocol_ipv6)
            .field("instance_metadata_tags", &self.instance_metadata_tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyInstancePlacementInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyInstancePlacementInput")
            .field("affinity", &self.affinity)
            .field("group_name", &self.group_name)
            .field("host_id", &self.host_id)
            .field("instance_id", &self.instance_id)
            .field("tenancy", &self.tenancy)
            .field("partition_number", &self.partition_number)
            .field("host_resource_group_arn", &self.host_resource_group_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyIpamInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyIpamInput")
            .field("dry_run", &self.dry_run)
            .field("ipam_id", &self.ipam_id)
            .field("description", &self.description)
            .field("add_operating_regions", &self.add_operating_regions)
            .field("remove_operating_regions", &self.remove_operating_regions)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyIpamPoolInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyIpamPoolInput")
            .field("dry_run", &self.dry_run)
            .field("ipam_pool_id", &self.ipam_pool_id)
            .field("description", &self.description)
            .field("auto_import", &self.auto_import)
            .field(
                "allocation_min_netmask_length",
                &self.allocation_min_netmask_length,
            )
            .field(
                "allocation_max_netmask_length",
                &self.allocation_max_netmask_length,
            )
            .field(
                "allocation_default_netmask_length",
                &self.allocation_default_netmask_length,
            )
            .field(
                "clear_allocation_default_netmask_length",
                &self.clear_allocation_default_netmask_length,
            )
            .field(
                "add_allocation_resource_tags",
                &self.add_allocation_resource_tags,
            )
            .field(
                "remove_allocation_resource_tags",
                &self.remove_allocation_resource_tags,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyIpamResourceCidrInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyIpamResourceCidrInput")
            .field("dry_run", &self.dry_run)
            .field("resource_id", &self.resource_id)
            .field("resource_cidr", &self.resource_cidr)
            .field("resource_region", &self.resource_region)
            .field("current_ipam_scope_id", &self.current_ipam_scope_id)
            .field("destination_ipam_scope_id", &self.destination_ipam_scope_id)
            .field("monitored", &self.monitored)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyIpamScopeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyIpamScopeInput")
            .field("dry_run", &self.dry_run)
            .field("ipam_scope_id", &self.ipam_scope_id)
            .field("description", &self.description)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyLaunchTemplateInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyLaunchTemplateInput")
            .field("dry_run", &self.dry_run)
            .field("client_token", &self.client_token)
            .field("launch_template_id", &self.launch_template_id)
            .field("launch_template_name", &self.launch_template_name)
            .field("default_version", &self.default_version)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyManagedPrefixListInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyManagedPrefixListInput")
            .field("dry_run", &self.dry_run)
            .field("prefix_list_id", &self.prefix_list_id)
            .field("current_version", &self.current_version)
            .field("prefix_list_name", &self.prefix_list_name)
            .field("add_entries", &self.add_entries)
            .field("remove_entries", &self.remove_entries)
            .field("max_entries", &self.max_entries)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyNetworkInterfaceAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyNetworkInterfaceAttributeInput")
            .field("attachment", &self.attachment)
            .field("description", &self.description)
            .field("dry_run", &self.dry_run)
            .field("groups", &self.groups)
            .field("network_interface_id", &self.network_interface_id)
            .field("source_dest_check", &self.source_dest_check)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyPrivateDnsNameOptionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyPrivateDnsNameOptionsInput")
            .field("dry_run", &self.dry_run)
            .field("instance_id", &self.instance_id)
            .field("private_dns_hostname_type", &self.private_dns_hostname_type)
            .field(
                "enable_resource_name_dns_a_record",
                &self.enable_resource_name_dns_a_record,
            )
            .field(
                "enable_resource_name_dns_aaaa_record",
                &self.enable_resource_name_dns_aaaa_record,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyReservedInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyReservedInstancesInput")
            .field("reserved_instances_ids", &self.reserved_instances_ids)
            .field("client_token", &self.client_token)
            .field("target_configurations", &self.target_configurations)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifySecurityGroupRulesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifySecurityGroupRulesInput")
            .field("group_id", &self.group_id)
            .field("security_group_rules", &self.security_group_rules)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifySnapshotAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifySnapshotAttributeInput")
            .field("attribute", &self.attribute)
            .field("create_volume_permission", &self.create_volume_permission)
            .field("group_names", &self.group_names)
            .field("operation_type", &self.operation_type)
            .field("snapshot_id", &self.snapshot_id)
            .field("user_ids", &self.user_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifySnapshotTierInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifySnapshotTierInput")
            .field("snapshot_id", &self.snapshot_id)
            .field("storage_tier", &self.storage_tier)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifySpotFleetRequestInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifySpotFleetRequestInput")
            .field(
                "excess_capacity_termination_policy",
                &self.excess_capacity_termination_policy,
            )
            .field("launch_template_configs", &self.launch_template_configs)
            .field("spot_fleet_request_id", &self.spot_fleet_request_id)
            .field("target_capacity", &self.target_capacity)
            .field("on_demand_target_capacity", &self.on_demand_target_capacity)
            .field("context", &self.context)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifySubnetAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifySubnetAttributeInput")
            .field(
                "assign_ipv6_address_on_creation",
                &self.assign_ipv6_address_on_creation,
            )
            .field("map_public_ip_on_launch", &self.map_public_ip_on_launch)
            .field("subnet_id", &self.subnet_id)
            .field(
                "map_customer_owned_ip_on_launch",
                &self.map_customer_owned_ip_on_launch,
            )
            .field("customer_owned_ipv4_pool", &self.customer_owned_ipv4_pool)
            .field("enable_dns64", &self.enable_dns64)
            .field(
                "private_dns_hostname_type_on_launch",
                &self.private_dns_hostname_type_on_launch,
            )
            .field(
                "enable_resource_name_dns_a_record_on_launch",
                &self.enable_resource_name_dns_a_record_on_launch,
            )
            .field(
                "enable_resource_name_dns_aaaa_record_on_launch",
                &self.enable_resource_name_dns_aaaa_record_on_launch,
            )
            .field(
                "enable_lni_at_device_index",
                &self.enable_lni_at_device_index,
            )
            .field(
                "disable_lni_at_device_index",
                &self.disable_lni_at_device_index,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyTrafficMirrorFilterNetworkServicesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyTrafficMirrorFilterNetworkServicesInput")
            .field("traffic_mirror_filter_id", &self.traffic_mirror_filter_id)
            .field("add_network_services", &self.add_network_services)
            .field("remove_network_services", &self.remove_network_services)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyTrafficMirrorFilterRuleInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyTrafficMirrorFilterRuleInput")
            .field(
                "traffic_mirror_filter_rule_id",
                &self.traffic_mirror_filter_rule_id,
            )
            .field("traffic_direction", &self.traffic_direction)
            .field("rule_number", &self.rule_number)
            .field("rule_action", &self.rule_action)
            .field("destination_port_range", &self.destination_port_range)
            .field("source_port_range", &self.source_port_range)
            .field("protocol", &self.protocol)
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field("source_cidr_block", &self.source_cidr_block)
            .field("description", &self.description)
            .field("remove_fields", &self.remove_fields)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyTrafficMirrorSessionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyTrafficMirrorSessionInput")
            .field("traffic_mirror_session_id", &self.traffic_mirror_session_id)
            .field("traffic_mirror_target_id", &self.traffic_mirror_target_id)
            .field("traffic_mirror_filter_id", &self.traffic_mirror_filter_id)
            .field("packet_length", &self.packet_length)
            .field("session_number", &self.session_number)
            .field("virtual_network_id", &self.virtual_network_id)
            .field("description", &self.description)
            .field("remove_fields", &self.remove_fields)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyTransitGatewayInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyTransitGatewayInput")
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("description", &self.description)
            .field("options", &self.options)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyTransitGatewayPrefixListReferenceInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyTransitGatewayPrefixListReferenceInput")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field("prefix_list_id", &self.prefix_list_id)
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("blackhole", &self.blackhole)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyTransitGatewayVpcAttachmentInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyTransitGatewayVpcAttachmentInput")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("add_subnet_ids", &self.add_subnet_ids)
            .field("remove_subnet_ids", &self.remove_subnet_ids)
            .field("options", &self.options)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyVolumeAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVolumeAttributeInput")
            .field("auto_enable_io", &self.auto_enable_io)
            .field("volume_id", &self.volume_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyVolumeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVolumeInput")
            .field("dry_run", &self.dry_run)
            .field("volume_id", &self.volume_id)
            .field("size", &self.size)
            .field("volume_type", &self.volume_type)
            .field("iops", &self.iops)
            .field("throughput", &self.throughput)
            .field("multi_attach_enabled", &self.multi_attach_enabled)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyVpcAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpcAttributeInput")
            .field("enable_dns_hostnames", &self.enable_dns_hostnames)
            .field("enable_dns_support", &self.enable_dns_support)
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyVpcEndpointConnectionNotificationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpcEndpointConnectionNotificationInput")
            .field("dry_run", &self.dry_run)
            .field(
                "connection_notification_id",
                &self.connection_notification_id,
            )
            .field(
                "connection_notification_arn",
                &self.connection_notification_arn,
            )
            .field("connection_events", &self.connection_events)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyVpcEndpointInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpcEndpointInput")
            .field("dry_run", &self.dry_run)
            .field("vpc_endpoint_id", &self.vpc_endpoint_id)
            .field("reset_policy", &self.reset_policy)
            .field("policy_document", &self.policy_document)
            .field("add_route_table_ids", &self.add_route_table_ids)
            .field("remove_route_table_ids", &self.remove_route_table_ids)
            .field("add_subnet_ids", &self.add_subnet_ids)
            .field("remove_subnet_ids", &self.remove_subnet_ids)
            .field("add_security_group_ids", &self.add_security_group_ids)
            .field("remove_security_group_ids", &self.remove_security_group_ids)
            .field("ip_address_type", &self.ip_address_type)
            .field("dns_options", &self.dns_options)
            .field("private_dns_enabled", &self.private_dns_enabled)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyVpcEndpointServiceConfigurationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpcEndpointServiceConfigurationInput")
            .field("dry_run", &self.dry_run)
            .field("service_id", &self.service_id)
            .field("private_dns_name", &self.private_dns_name)
            .field("remove_private_dns_name", &self.remove_private_dns_name)
            .field("acceptance_required", &self.acceptance_required)
            .field(
                "add_network_load_balancer_arns",
                &self.add_network_load_balancer_arns,
            )
            .field(
                "remove_network_load_balancer_arns",
                &self.remove_network_load_balancer_arns,
            )
            .field(
                "add_gateway_load_balancer_arns",
                &self.add_gateway_load_balancer_arns,
            )
            .field(
                "remove_gateway_load_balancer_arns",
                &self.remove_gateway_load_balancer_arns,
            )
            .field(
                "add_supported_ip_address_types",
                &self.add_supported_ip_address_types,
            )
            .field(
                "remove_supported_ip_address_types",
                &self.remove_supported_ip_address_types,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyVpcEndpointServicePayerResponsibilityInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpcEndpointServicePayerResponsibilityInput")
            .field("dry_run", &self.dry_run)
            .field("service_id", &self.service_id)
            .field("payer_responsibility", &self.payer_responsibility)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyVpcEndpointServicePermissionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpcEndpointServicePermissionsInput")
            .field("dry_run", &self.dry_run)
            .field("service_id", &self.service_id)
            .field("add_allowed_principals", &self.add_allowed_principals)
            .field("remove_allowed_principals", &self.remove_allowed_principals)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyVpcPeeringConnectionOptionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpcPeeringConnectionOptionsInput")
            .field(
                "accepter_peering_connection_options",
                &self.accepter_peering_connection_options,
            )
            .field("dry_run", &self.dry_run)
            .field(
                "requester_peering_connection_options",
                &self.requester_peering_connection_options,
            )
            .field("vpc_peering_connection_id", &self.vpc_peering_connection_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyVpcTenancyInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpcTenancyInput")
            .field("vpc_id", &self.vpc_id)
            .field("instance_tenancy", &self.instance_tenancy)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyVpnConnectionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpnConnectionInput")
            .field("vpn_connection_id", &self.vpn_connection_id)
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("customer_gateway_id", &self.customer_gateway_id)
            .field("vpn_gateway_id", &self.vpn_gateway_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyVpnConnectionOptionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpnConnectionOptionsInput")
            .field("vpn_connection_id", &self.vpn_connection_id)
            .field("local_ipv4_network_cidr", &self.local_ipv4_network_cidr)
            .field("remote_ipv4_network_cidr", &self.remote_ipv4_network_cidr)
            .field("local_ipv6_network_cidr", &self.local_ipv6_network_cidr)
            .field("remote_ipv6_network_cidr", &self.remote_ipv6_network_cidr)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyVpnTunnelCertificateInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpnTunnelCertificateInput")
            .field("vpn_connection_id", &self.vpn_connection_id)
            .field(
                "vpn_tunnel_outside_ip_address",
                &self.vpn_tunnel_outside_ip_address,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ModifyVpnTunnelOptionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpnTunnelOptionsInput")
            .field("vpn_connection_id", &self.vpn_connection_id)
            .field(
                "vpn_tunnel_outside_ip_address",
                &self.vpn_tunnel_outside_ip_address,
            )
            .field("tunnel_options", &self.tunnel_options)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::MonitorInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("MonitorInstancesInput")
            .field("instance_ids", &self.instance_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::MoveAddressToVpcInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("MoveAddressToVpcInput")
            .field("dry_run", &self.dry_run)
            .field("public_ip", &self.public_ip)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::MoveByoipCidrToIpamInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("MoveByoipCidrToIpamInput")
            .field("dry_run", &self.dry_run)
            .field("cidr", &self.cidr)
            .field("ipam_pool_id", &self.ipam_pool_id)
            .field("ipam_pool_owner", &self.ipam_pool_owner)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ProvisionByoipCidrInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ProvisionByoipCidrInput")
            .field("cidr", &self.cidr)
            .field(
                "cidr_authorization_context",
                &self.cidr_authorization_context,
            )
            .field("publicly_advertisable", &self.publicly_advertisable)
            .field("description", &self.description)
            .field("dry_run", &self.dry_run)
            .field("pool_tag_specifications", &self.pool_tag_specifications)
            .field("multi_region", &self.multi_region)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ProvisionIpamPoolCidrInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ProvisionIpamPoolCidrInput")
            .field("dry_run", &self.dry_run)
            .field("ipam_pool_id", &self.ipam_pool_id)
            .field("cidr", &self.cidr)
            .field(
                "cidr_authorization_context",
                &self.cidr_authorization_context,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ProvisionPublicIpv4PoolCidrInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ProvisionPublicIpv4PoolCidrInput")
            .field("dry_run", &self.dry_run)
            .field("ipam_pool_id", &self.ipam_pool_id)
            .field("pool_id", &self.pool_id)
            .field("netmask_length", &self.netmask_length)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::PurchaseHostReservationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PurchaseHostReservationInput")
            .field("client_token", &self.client_token)
            .field("currency_code", &self.currency_code)
            .field("host_id_set", &self.host_id_set)
            .field("limit_price", &self.limit_price)
            .field("offering_id", &self.offering_id)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::PurchaseReservedInstancesOfferingInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PurchaseReservedInstancesOfferingInput")
            .field("instance_count", &self.instance_count)
            .field(
                "reserved_instances_offering_id",
                &self.reserved_instances_offering_id,
            )
            .field("dry_run", &self.dry_run)
            .field("limit_price", &self.limit_price)
            .field("purchase_time", &self.purchase_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::PurchaseScheduledInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PurchaseScheduledInstancesInput")
            .field("client_token", &self.client_token)
            .field("dry_run", &self.dry_run)
            .field("purchase_requests", &self.purchase_requests)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RebootInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RebootInstancesInput")
            .field("instance_ids", &self.instance_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RegisterImageInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RegisterImageInput")
            .field("image_location", &self.image_location)
            .field("architecture", &self.architecture)
            .field("block_device_mappings", &self.block_device_mappings)
            .field("description", &self.description)
            .field("dry_run", &self.dry_run)
            .field("ena_support", &self.ena_support)
            .field("kernel_id", &self.kernel_id)
            .field("name", &self.name)
            .field("billing_products", &self.billing_products)
            .field("ramdisk_id", &self.ramdisk_id)
            .field("root_device_name", &self.root_device_name)
            .field("sriov_net_support", &self.sriov_net_support)
            .field("virtualization_type", &self.virtualization_type)
            .field("boot_mode", &self.boot_mode)
            .field("tpm_support", &self.tpm_support)
            .field("uefi_data", &self.uefi_data)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RegisterInstanceEventNotificationAttributesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RegisterInstanceEventNotificationAttributesInput")
            .field("dry_run", &self.dry_run)
            .field("instance_tag_attribute", &self.instance_tag_attribute)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RegisterTransitGatewayMulticastGroupMembersInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RegisterTransitGatewayMulticastGroupMembersInput")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field("group_ip_address", &self.group_ip_address)
            .field("network_interface_ids", &self.network_interface_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RegisterTransitGatewayMulticastGroupSourcesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RegisterTransitGatewayMulticastGroupSourcesInput")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field("group_ip_address", &self.group_ip_address)
            .field("network_interface_ids", &self.network_interface_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RejectTransitGatewayMulticastDomainAssociationsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RejectTransitGatewayMulticastDomainAssociationsInput")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("subnet_ids", &self.subnet_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RejectTransitGatewayPeeringAttachmentInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RejectTransitGatewayPeeringAttachmentInput")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RejectTransitGatewayVpcAttachmentInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RejectTransitGatewayVpcAttachmentInput")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RejectVpcEndpointConnectionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RejectVpcEndpointConnectionsInput")
            .field("dry_run", &self.dry_run)
            .field("service_id", &self.service_id)
            .field("vpc_endpoint_ids", &self.vpc_endpoint_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RejectVpcPeeringConnectionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RejectVpcPeeringConnectionInput")
            .field("dry_run", &self.dry_run)
            .field("vpc_peering_connection_id", &self.vpc_peering_connection_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ReleaseAddressInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReleaseAddressInput")
            .field("allocation_id", &self.allocation_id)
            .field("public_ip", &self.public_ip)
            .field("network_border_group", &self.network_border_group)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ReleaseHostsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReleaseHostsInput")
            .field("host_ids", &self.host_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ReleaseIpamPoolAllocationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReleaseIpamPoolAllocationInput")
            .field("dry_run", &self.dry_run)
            .field("ipam_pool_id", &self.ipam_pool_id)
            .field("cidr", &self.cidr)
            .field("ipam_pool_allocation_id", &self.ipam_pool_allocation_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ReplaceIamInstanceProfileAssociationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReplaceIamInstanceProfileAssociationInput")
            .field("iam_instance_profile", &self.iam_instance_profile)
            .field("association_id", &self.association_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ReplaceNetworkAclAssociationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReplaceNetworkAclAssociationInput")
            .field("association_id", &self.association_id)
            .field("dry_run", &self.dry_run)
            .field("network_acl_id", &self.network_acl_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ReplaceNetworkAclEntryInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReplaceNetworkAclEntryInput")
            .field("cidr_block", &self.cidr_block)
            .field("dry_run", &self.dry_run)
            .field("egress", &self.egress)
            .field("icmp_type_code", &self.icmp_type_code)
            .field("ipv6_cidr_block", &self.ipv6_cidr_block)
            .field("network_acl_id", &self.network_acl_id)
            .field("port_range", &self.port_range)
            .field("protocol", &self.protocol)
            .field("rule_action", &self.rule_action)
            .field("rule_number", &self.rule_number)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ReplaceRouteInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReplaceRouteInput")
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field(
                "destination_ipv6_cidr_block",
                &self.destination_ipv6_cidr_block,
            )
            .field(
                "destination_prefix_list_id",
                &self.destination_prefix_list_id,
            )
            .field("dry_run", &self.dry_run)
            .field("vpc_endpoint_id", &self.vpc_endpoint_id)
            .field(
                "egress_only_internet_gateway_id",
                &self.egress_only_internet_gateway_id,
            )
            .field("gateway_id", &self.gateway_id)
            .field("instance_id", &self.instance_id)
            .field("local_target", &self.local_target)
            .field("nat_gateway_id", &self.nat_gateway_id)
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("local_gateway_id", &self.local_gateway_id)
            .field("carrier_gateway_id", &self.carrier_gateway_id)
            .field("network_interface_id", &self.network_interface_id)
            .field("route_table_id", &self.route_table_id)
            .field("vpc_peering_connection_id", &self.vpc_peering_connection_id)
            .field("core_network_arn", &self.core_network_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ReplaceRouteTableAssociationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReplaceRouteTableAssociationInput")
            .field("association_id", &self.association_id)
            .field("dry_run", &self.dry_run)
            .field("route_table_id", &self.route_table_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ReplaceTransitGatewayRouteInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReplaceTransitGatewayRouteInput")
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("blackhole", &self.blackhole)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ReportInstanceStatusInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReportInstanceStatusInput")
            .field("description", &self.description)
            .field("dry_run", &self.dry_run)
            .field("end_time", &self.end_time)
            .field("instances", &self.instances)
            .field("reason_codes", &self.reason_codes)
            .field("start_time", &self.start_time)
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RequestSpotFleetInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RequestSpotFleetInput")
            .field("dry_run", &self.dry_run)
            .field("spot_fleet_request_config", &self.spot_fleet_request_config)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RequestSpotInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RequestSpotInstancesInput")
            .field("availability_zone_group", &self.availability_zone_group)
            .field("block_duration_minutes", &self.block_duration_minutes)
            .field("client_token", &self.client_token)
            .field("dry_run", &self.dry_run)
            .field("instance_count", &self.instance_count)
            .field("launch_group", &self.launch_group)
            .field("launch_specification", &self.launch_specification)
            .field("spot_price", &self.spot_price)
            .field("r#type", &self.r#type)
            .field("valid_from", &self.valid_from)
            .field("valid_until", &self.valid_until)
            .field("tag_specifications", &self.tag_specifications)
            .field(
                "instance_interruption_behavior",
                &self.instance_interruption_behavior,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ResetAddressAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResetAddressAttributeInput")
            .field("allocation_id", &self.allocation_id)
            .field("attribute", &self.attribute)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ResetEbsDefaultKmsKeyIdInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResetEbsDefaultKmsKeyIdInput")
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ResetFpgaImageAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResetFpgaImageAttributeInput")
            .field("dry_run", &self.dry_run)
            .field("fpga_image_id", &self.fpga_image_id)
            .field("attribute", &self.attribute)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ResetImageAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResetImageAttributeInput")
            .field("attribute", &self.attribute)
            .field("image_id", &self.image_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ResetInstanceAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResetInstanceAttributeInput")
            .field("attribute", &self.attribute)
            .field("dry_run", &self.dry_run)
            .field("instance_id", &self.instance_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ResetNetworkInterfaceAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResetNetworkInterfaceAttributeInput")
            .field("dry_run", &self.dry_run)
            .field("network_interface_id", &self.network_interface_id)
            .field("source_dest_check", &self.source_dest_check)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::ResetSnapshotAttributeInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResetSnapshotAttributeInput")
            .field("attribute", &self.attribute)
            .field("snapshot_id", &self.snapshot_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RestoreAddressToClassicInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RestoreAddressToClassicInput")
            .field("dry_run", &self.dry_run)
            .field("public_ip", &self.public_ip)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RestoreImageFromRecycleBinInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RestoreImageFromRecycleBinInput")
            .field("image_id", &self.image_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RestoreManagedPrefixListVersionInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RestoreManagedPrefixListVersionInput")
            .field("dry_run", &self.dry_run)
            .field("prefix_list_id", &self.prefix_list_id)
            .field("previous_version", &self.previous_version)
            .field("current_version", &self.current_version)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RestoreSnapshotFromRecycleBinInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RestoreSnapshotFromRecycleBinInput")
            .field("snapshot_id", &self.snapshot_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RestoreSnapshotTierInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RestoreSnapshotTierInput")
            .field("snapshot_id", &self.snapshot_id)
            .field("temporary_restore_days", &self.temporary_restore_days)
            .field("permanent_restore", &self.permanent_restore)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RevokeClientVpnIngressInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RevokeClientVpnIngressInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("target_network_cidr", &self.target_network_cidr)
            .field("access_group_id", &self.access_group_id)
            .field("revoke_all_groups", &self.revoke_all_groups)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RevokeSecurityGroupEgressInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RevokeSecurityGroupEgressInput")
            .field("dry_run", &self.dry_run)
            .field("group_id", &self.group_id)
            .field("ip_permissions", &self.ip_permissions)
            .field("security_group_rule_ids", &self.security_group_rule_ids)
            .field("cidr_ip", &self.cidr_ip)
            .field("from_port", &self.from_port)
            .field("ip_protocol", &self.ip_protocol)
            .field("to_port", &self.to_port)
            .field(
                "source_security_group_name",
                &self.source_security_group_name,
            )
            .field(
                "source_security_group_owner_id",
                &self.source_security_group_owner_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RevokeSecurityGroupIngressInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RevokeSecurityGroupIngressInput")
            .field("cidr_ip", &self.cidr_ip)
            .field("from_port", &self.from_port)
            .field("group_id", &self.group_id)
            .field("group_name", &self.group_name)
            .field("ip_permissions", &self.ip_permissions)
            .field("ip_protocol", &self.ip_protocol)
            .field(
                "source_security_group_name",
                &self.source_security_group_name,
            )
            .field(
                "source_security_group_owner_id",
                &self.source_security_group_owner_id,
            )
            .field("to_port", &self.to_port)
            .field("dry_run", &self.dry_run)
            .field("security_group_rule_ids", &self.security_group_rule_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RunInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RunInstancesInput")
            .field("block_device_mappings", &self.block_device_mappings)
            .field("image_id", &self.image_id)
            .field("instance_type", &self.instance_type)
            .field("ipv6_address_count", &self.ipv6_address_count)
            .field("ipv6_addresses", &self.ipv6_addresses)
            .field("kernel_id", &self.kernel_id)
            .field("key_name", &self.key_name)
            .field("max_count", &self.max_count)
            .field("min_count", &self.min_count)
            .field("monitoring", &self.monitoring)
            .field("placement", &self.placement)
            .field("ramdisk_id", &self.ramdisk_id)
            .field("security_group_ids", &self.security_group_ids)
            .field("security_groups", &self.security_groups)
            .field("subnet_id", &self.subnet_id)
            .field("user_data", &self.user_data)
            .field("additional_info", &self.additional_info)
            .field("client_token", &self.client_token)
            .field("disable_api_termination", &self.disable_api_termination)
            .field("dry_run", &self.dry_run)
            .field("ebs_optimized", &self.ebs_optimized)
            .field("iam_instance_profile", &self.iam_instance_profile)
            .field(
                "instance_initiated_shutdown_behavior",
                &self.instance_initiated_shutdown_behavior,
            )
            .field("network_interfaces", &self.network_interfaces)
            .field("private_ip_address", &self.private_ip_address)
            .field("elastic_gpu_specification", &self.elastic_gpu_specification)
            .field(
                "elastic_inference_accelerators",
                &self.elastic_inference_accelerators,
            )
            .field("tag_specifications", &self.tag_specifications)
            .field("launch_template", &self.launch_template)
            .field("instance_market_options", &self.instance_market_options)
            .field("credit_specification", &self.credit_specification)
            .field("cpu_options", &self.cpu_options)
            .field(
                "capacity_reservation_specification",
                &self.capacity_reservation_specification,
            )
            .field("hibernation_options", &self.hibernation_options)
            .field("license_specifications", &self.license_specifications)
            .field("metadata_options", &self.metadata_options)
            .field("enclave_options", &self.enclave_options)
            .field("private_dns_name_options", &self.private_dns_name_options)
            .field("maintenance_options", &self.maintenance_options)
            .field("disable_api_stop", &self.disable_api_stop)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::RunScheduledInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RunScheduledInstancesInput")
            .field("client_token", &self.client_token)
            .field("dry_run", &self.dry_run)
            .field("instance_count", &self.instance_count)
            .field("launch_specification", &self.launch_specification)
            .field("scheduled_instance_id", &self.scheduled_instance_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::SearchLocalGatewayRoutesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SearchLocalGatewayRoutesInput")
            .field(
                "local_gateway_route_table_id",
                &self.local_gateway_route_table_id,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::SearchTransitGatewayMulticastGroupsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SearchTransitGatewayMulticastGroupsInput")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::SearchTransitGatewayRoutesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SearchTransitGatewayRoutesInput")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field("filters", &self.filters)
            .field("max_results", &self.max_results)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::SendDiagnosticInterruptInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SendDiagnosticInterruptInput")
            .field("instance_id", &self.instance_id)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::StartInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("StartInstancesInput")
            .field("instance_ids", &self.instance_ids)
            .field("additional_info", &self.additional_info)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::StartNetworkInsightsAccessScopeAnalysisInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("StartNetworkInsightsAccessScopeAnalysisInput")
            .field(
                "network_insights_access_scope_id",
                &self.network_insights_access_scope_id,
            )
            .field("dry_run", &self.dry_run)
            .field("tag_specifications", &self.tag_specifications)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::StartNetworkInsightsAnalysisInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("StartNetworkInsightsAnalysisInput")
            .field("network_insights_path_id", &self.network_insights_path_id)
            .field("filter_in_arns", &self.filter_in_arns)
            .field("dry_run", &self.dry_run)
            .field("tag_specifications", &self.tag_specifications)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::StartVpcEndpointServicePrivateDnsVerificationInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("StartVpcEndpointServicePrivateDnsVerificationInput")
            .field("dry_run", &self.dry_run)
            .field("service_id", &self.service_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::StopInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("StopInstancesInput")
            .field("instance_ids", &self.instance_ids)
            .field("hibernate", &self.hibernate)
            .field("dry_run", &self.dry_run)
            .field("force", &self.force)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::TerminateClientVpnConnectionsInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TerminateClientVpnConnectionsInput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("connection_id", &self.connection_id)
            .field("username", &self.username)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::TerminateInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TerminateInstancesInput")
            .field("instance_ids", &self.instance_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::UnassignIpv6AddressesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UnassignIpv6AddressesInput")
            .field("ipv6_addresses", &self.ipv6_addresses)
            .field("ipv6_prefixes", &self.ipv6_prefixes)
            .field("network_interface_id", &self.network_interface_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::UnassignPrivateIpAddressesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UnassignPrivateIpAddressesInput")
            .field("network_interface_id", &self.network_interface_id)
            .field("private_ip_addresses", &self.private_ip_addresses)
            .field("ipv4_prefixes", &self.ipv4_prefixes)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::UnmonitorInstancesInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UnmonitorInstancesInput")
            .field("instance_ids", &self.instance_ids)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::UpdateSecurityGroupRuleDescriptionsEgressInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UpdateSecurityGroupRuleDescriptionsEgressInput")
            .field("dry_run", &self.dry_run)
            .field("group_id", &self.group_id)
            .field("group_name", &self.group_name)
            .field("ip_permissions", &self.ip_permissions)
            .field(
                "security_group_rule_descriptions",
                &self.security_group_rule_descriptions,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::UpdateSecurityGroupRuleDescriptionsIngressInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UpdateSecurityGroupRuleDescriptionsIngressInput")
            .field("dry_run", &self.dry_run)
            .field("group_id", &self.group_id)
            .field("group_name", &self.group_name)
            .field("ip_permissions", &self.ip_permissions)
            .field(
                "security_group_rule_descriptions",
                &self.security_group_rule_descriptions,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::input::WithdrawByoipCidrInput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("WithdrawByoipCidrInput")
            .field("cidr", &self.cidr)
            .field("dry_run", &self.dry_run)
            .finish()
    }
}
// Skipping aws_sdk_ec2::input::accept_reserved_instances_exchange_quote_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::accept_transit_gateway_multicast_domain_associations_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::accept_transit_gateway_peering_attachment_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::accept_transit_gateway_vpc_attachment_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::accept_vpc_endpoint_connections_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::accept_vpc_peering_connection_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::advertise_byoip_cidr_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::allocate_address_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::allocate_hosts_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::allocate_ipam_pool_cidr_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::apply_security_groups_to_client_vpn_target_network_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::assign_ipv6_addresses_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::assign_private_ip_addresses_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::associate_address_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::associate_client_vpn_target_network_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::associate_dhcp_options_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::associate_enclave_certificate_iam_role_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::associate_iam_instance_profile_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::associate_instance_event_window_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::associate_route_table_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::associate_subnet_cidr_block_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::associate_transit_gateway_multicast_domain_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::associate_transit_gateway_route_table_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::associate_trunk_interface_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::associate_vpc_cidr_block_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::attach_classic_link_vpc_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::attach_internet_gateway_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::attach_network_interface_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::attach_volume_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::attach_vpn_gateway_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::authorize_client_vpn_ingress_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::authorize_security_group_egress_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::authorize_security_group_ingress_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::bundle_instance_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::cancel_bundle_task_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::cancel_capacity_reservation_fleets_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::cancel_capacity_reservation_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::cancel_conversion_task_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::cancel_export_task_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::cancel_import_task_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::cancel_reserved_instances_listing_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::cancel_spot_fleet_requests_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::cancel_spot_instance_requests_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::confirm_product_instance_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::copy_fpga_image_input::Builder due
// to hidden fields Skipping aws_sdk_ec2::input::copy_image_input::Builder due
// to hidden fields Skipping aws_sdk_ec2::input::copy_snapshot_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::create_capacity_reservation_fleet_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::create_capacity_reservation_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::create_carrier_gateway_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::create_client_vpn_endpoint_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::create_client_vpn_route_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::create_customer_gateway_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::create_default_subnet_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::create_default_vpc_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::create_dhcp_options_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::create_egress_only_internet_gateway_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::create_fleet_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::create_flow_logs_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::create_fpga_image_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::create_image_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::create_instance_event_window_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::create_instance_export_task_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::create_internet_gateway_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::create_ipam_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::create_ipam_pool_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::create_ipam_scope_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::create_key_pair_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::create_launch_template_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::create_launch_template_version_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::create_local_gateway_route_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::create_local_gateway_route_table_vpc_association_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::create_managed_prefix_list_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::create_nat_gateway_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::create_network_acl_entry_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::create_network_acl_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::create_network_insights_access_scope_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::create_network_insights_path_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::create_network_interface_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::create_network_interface_permission_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::create_placement_group_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::create_public_ipv4_pool_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::create_replace_root_volume_task_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::create_reserved_instances_listing_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::create_restore_image_task_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::create_route_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::create_route_table_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::create_security_group_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::create_snapshot_input::Builder due
// to hidden fields Skipping aws_sdk_ec2::input::create_snapshots_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::create_spot_datafeed_subscription_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::create_store_image_task_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::create_subnet_cidr_reservation_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::create_subnet_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::create_tags_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::create_traffic_mirror_filter_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::create_traffic_mirror_filter_rule_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::create_traffic_mirror_session_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::create_traffic_mirror_target_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::create_transit_gateway_connect_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::create_transit_gateway_connect_peer_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::create_transit_gateway_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::create_transit_gateway_multicast_domain_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::create_transit_gateway_peering_attachment_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::create_transit_gateway_prefix_list_reference_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::create_transit_gateway_route_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::create_transit_gateway_route_table_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::create_transit_gateway_vpc_attachment_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::create_volume_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::create_vpc_endpoint_connection_notification_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::create_vpc_endpoint_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::create_vpc_endpoint_service_configuration_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::create_vpc_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::create_vpc_peering_connection_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::create_vpn_connection_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::create_vpn_connection_route_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::create_vpn_gateway_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::delete_carrier_gateway_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::delete_client_vpn_endpoint_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::delete_client_vpn_route_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::delete_customer_gateway_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::delete_dhcp_options_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::delete_egress_only_internet_gateway_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::delete_fleets_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::delete_flow_logs_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::delete_fpga_image_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::delete_instance_event_window_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::delete_internet_gateway_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::delete_ipam_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::delete_ipam_pool_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::delete_ipam_scope_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::delete_key_pair_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::delete_launch_template_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::delete_launch_template_versions_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::delete_local_gateway_route_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::delete_local_gateway_route_table_vpc_association_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::delete_managed_prefix_list_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::delete_nat_gateway_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::delete_network_acl_entry_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::delete_network_acl_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::delete_network_insights_access_scope_analysis_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::delete_network_insights_access_scope_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::delete_network_insights_analysis_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::delete_network_insights_path_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::delete_network_interface_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::delete_network_interface_permission_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::delete_placement_group_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::delete_public_ipv4_pool_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::delete_queued_reserved_instances_input::Builder
// due to hidden fields Skipping aws_sdk_ec2::input::delete_route_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::delete_route_table_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::delete_security_group_input::Builder due
// to hidden fields Skipping aws_sdk_ec2::input::delete_snapshot_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::delete_spot_datafeed_subscription_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::delete_subnet_cidr_reservation_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::delete_subnet_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::delete_tags_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::delete_traffic_mirror_filter_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::delete_traffic_mirror_filter_rule_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::delete_traffic_mirror_session_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::delete_traffic_mirror_target_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::delete_transit_gateway_connect_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::delete_transit_gateway_connect_peer_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::delete_transit_gateway_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::delete_transit_gateway_multicast_domain_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::delete_transit_gateway_peering_attachment_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::delete_transit_gateway_prefix_list_reference_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::delete_transit_gateway_route_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::delete_transit_gateway_route_table_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::delete_transit_gateway_vpc_attachment_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::delete_volume_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::delete_vpc_endpoint_connection_notifications_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::delete_vpc_endpoint_service_configurations_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::delete_vpc_endpoints_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::delete_vpc_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::delete_vpc_peering_connection_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::delete_vpn_connection_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::delete_vpn_connection_route_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::delete_vpn_gateway_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::deprovision_byoip_cidr_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::deprovision_ipam_pool_cidr_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::deprovision_public_ipv4_pool_cidr_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::deregister_image_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::deregister_instance_event_notification_attributes_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::deregister_transit_gateway_multicast_group_members_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::deregister_transit_gateway_multicast_group_sources_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_account_attributes_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_addresses_attribute_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_addresses_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::describe_aggregate_id_format_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_availability_zones_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_bundle_tasks_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_byoip_cidrs_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_capacity_reservation_fleets_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_capacity_reservations_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_carrier_gateways_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_classic_link_instances_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_client_vpn_authorization_rules_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_client_vpn_connections_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_client_vpn_endpoints_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_client_vpn_routes_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_client_vpn_target_networks_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_coip_pools_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::describe_conversion_tasks_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_customer_gateways_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_dhcp_options_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_egress_only_internet_gateways_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_elastic_gpus_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_export_image_tasks_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_export_tasks_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_fast_launch_images_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_fast_snapshot_restores_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_fleet_history_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_fleet_instances_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::describe_fleets_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_flow_logs_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::describe_fpga_image_attribute_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_fpga_images_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_host_reservation_offerings_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_host_reservations_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::describe_hosts_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_iam_instance_profile_associations_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_id_format_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::describe_identity_id_format_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_image_attribute_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::describe_images_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_import_image_tasks_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_import_snapshot_tasks_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_instance_attribute_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_instance_credit_specifications_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_instance_event_notification_attributes_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_instance_event_windows_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_instance_status_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_instance_type_offerings_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_instance_types_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::describe_instances_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_internet_gateways_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::describe_ipam_pools_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_ipam_scopes_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::describe_ipams_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_ipv6_pools_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::describe_key_pairs_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_launch_template_versions_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_launch_templates_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_local_gateway_route_table_virtual_interface_group_associations_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_local_gateway_route_table_vpc_associations_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_local_gateway_route_tables_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_local_gateway_virtual_interface_groups_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_local_gateway_virtual_interfaces_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_local_gateways_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_managed_prefix_lists_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_moving_addresses_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_nat_gateways_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_network_acls_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_network_insights_access_scope_analyses_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_network_insights_access_scopes_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_network_insights_analyses_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_network_insights_paths_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_network_interface_attribute_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_network_interface_permissions_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_network_interfaces_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_placement_groups_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_prefix_lists_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_principal_id_format_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_public_ipv4_pools_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::describe_regions_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_replace_root_volume_tasks_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_reserved_instances_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_reserved_instances_listings_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_reserved_instances_modifications_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_reserved_instances_offerings_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_route_tables_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_scheduled_instance_availability_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_scheduled_instances_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_security_group_references_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_security_group_rules_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_security_groups_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_snapshot_attribute_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_snapshot_tier_status_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_snapshots_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::describe_spot_datafeed_subscription_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_spot_fleet_instances_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_spot_fleet_request_history_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_spot_fleet_requests_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_spot_instance_requests_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_spot_price_history_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::describe_stale_security_groups_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_store_image_tasks_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::describe_subnets_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_tags_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::describe_traffic_mirror_filters_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_traffic_mirror_sessions_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_traffic_mirror_targets_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_transit_gateway_attachments_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_transit_gateway_connect_peers_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_transit_gateway_connects_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_transit_gateway_multicast_domains_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_transit_gateway_peering_attachments_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_transit_gateway_route_tables_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_transit_gateway_vpc_attachments_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_transit_gateways_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_trunk_interface_associations_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_volume_attribute_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_volume_status_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::describe_volumes_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_volumes_modifications_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_vpc_attribute_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_vpc_classic_link_dns_support_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_vpc_classic_link_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_vpc_endpoint_connection_notifications_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_vpc_endpoint_connections_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_vpc_endpoint_service_configurations_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_vpc_endpoint_service_permissions_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::describe_vpc_endpoint_services_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_vpc_endpoints_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::describe_vpc_peering_connections_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_vpcs_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::describe_vpn_connections_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::describe_vpn_gateways_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::detach_classic_link_vpc_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::detach_internet_gateway_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::detach_network_interface_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::detach_volume_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::detach_vpn_gateway_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::disable_ebs_encryption_by_default_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::disable_fast_launch_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::disable_fast_snapshot_restores_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::disable_image_deprecation_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::disable_ipam_organization_admin_account_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::disable_serial_console_access_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::disable_transit_gateway_route_table_propagation_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::disable_vgw_route_propagation_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::disable_vpc_classic_link_dns_support_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::disable_vpc_classic_link_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::disassociate_address_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::disassociate_client_vpn_target_network_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::disassociate_enclave_certificate_iam_role_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::disassociate_iam_instance_profile_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::disassociate_instance_event_window_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::disassociate_route_table_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::disassociate_subnet_cidr_block_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::disassociate_transit_gateway_multicast_domain_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::disassociate_transit_gateway_route_table_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::disassociate_trunk_interface_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::disassociate_vpc_cidr_block_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::enable_ebs_encryption_by_default_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::enable_fast_launch_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::enable_fast_snapshot_restores_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::enable_image_deprecation_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::enable_ipam_organization_admin_account_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::enable_serial_console_access_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::enable_transit_gateway_route_table_propagation_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::enable_vgw_route_propagation_input::Builder due
// to hidden fields Skipping aws_sdk_ec2::input::enable_volume_io_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::enable_vpc_classic_link_dns_support_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::enable_vpc_classic_link_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::export_client_vpn_client_certificate_revocation_list_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::export_client_vpn_client_configuration_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::export_image_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::export_transit_gateway_routes_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::get_associated_enclave_certificate_iam_roles_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::get_associated_ipv6_pool_cidrs_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::get_capacity_reservation_usage_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::get_coip_pool_usage_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::get_console_output_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::get_console_screenshot_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::get_default_credit_specification_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::get_ebs_default_kms_key_id_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::get_ebs_encryption_by_default_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::get_flow_logs_integration_template_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::get_groups_for_capacity_reservation_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::get_host_reservation_purchase_preview_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::get_instance_types_from_instance_requirements_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::get_instance_uefi_data_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::get_ipam_address_history_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::get_ipam_pool_allocations_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::get_ipam_pool_cidrs_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::get_ipam_resource_cidrs_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::get_launch_template_data_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::get_managed_prefix_list_associations_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::get_managed_prefix_list_entries_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::get_network_insights_access_scope_analysis_findings_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::get_network_insights_access_scope_content_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::get_password_data_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::get_reserved_instances_exchange_quote_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::get_serial_console_access_status_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::get_spot_placement_scores_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::get_subnet_cidr_reservations_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::get_transit_gateway_attachment_propagations_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::get_transit_gateway_multicast_domain_associations_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::get_transit_gateway_prefix_list_references_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::get_transit_gateway_route_table_associations_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::get_transit_gateway_route_table_propagations_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::get_vpn_connection_device_sample_configuration_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::get_vpn_connection_device_types_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::import_client_vpn_client_certificate_revocation_list_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::import_image_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::import_instance_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::import_key_pair_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::import_snapshot_input::Builder due
// to hidden fields Skipping aws_sdk_ec2::input::import_volume_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::list_images_in_recycle_bin_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::list_snapshots_in_recycle_bin_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::modify_address_attribute_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::modify_availability_zone_group_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::modify_capacity_reservation_fleet_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::modify_capacity_reservation_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::modify_client_vpn_endpoint_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::modify_default_credit_specification_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::modify_ebs_default_kms_key_id_input::Builder due
// to hidden fields Skipping aws_sdk_ec2::input::modify_fleet_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::modify_fpga_image_attribute_input::Builder due
// to hidden fields Skipping aws_sdk_ec2::input::modify_hosts_input::Builder due
// to hidden fields Skipping aws_sdk_ec2::input::modify_id_format_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::modify_identity_id_format_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::modify_image_attribute_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::modify_instance_attribute_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::modify_instance_capacity_reservation_attributes_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::modify_instance_credit_specification_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::modify_instance_event_start_time_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::modify_instance_event_window_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::modify_instance_maintenance_options_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::modify_instance_metadata_options_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::modify_instance_placement_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::modify_ipam_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::modify_ipam_pool_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::modify_ipam_resource_cidr_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::modify_ipam_scope_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::modify_launch_template_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::modify_managed_prefix_list_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::modify_network_interface_attribute_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::modify_private_dns_name_options_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::modify_reserved_instances_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::modify_security_group_rules_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::modify_snapshot_attribute_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::modify_snapshot_tier_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::modify_spot_fleet_request_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::modify_subnet_attribute_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::modify_traffic_mirror_filter_network_services_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::modify_traffic_mirror_filter_rule_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::modify_traffic_mirror_session_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::modify_transit_gateway_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::modify_transit_gateway_prefix_list_reference_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::modify_transit_gateway_vpc_attachment_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::modify_volume_attribute_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::modify_volume_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::modify_vpc_attribute_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::modify_vpc_endpoint_connection_notification_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::modify_vpc_endpoint_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::modify_vpc_endpoint_service_configuration_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::modify_vpc_endpoint_service_payer_responsibility_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::modify_vpc_endpoint_service_permissions_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::modify_vpc_peering_connection_options_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::modify_vpc_tenancy_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::modify_vpn_connection_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::modify_vpn_connection_options_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::modify_vpn_tunnel_certificate_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::modify_vpn_tunnel_options_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::monitor_instances_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::move_address_to_vpc_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::move_byoip_cidr_to_ipam_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::provision_byoip_cidr_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::provision_ipam_pool_cidr_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::provision_public_ipv4_pool_cidr_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::purchase_host_reservation_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::purchase_reserved_instances_offering_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::purchase_scheduled_instances_input::Builder due
// to hidden fields Skipping aws_sdk_ec2::input::reboot_instances_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::register_image_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::register_instance_event_notification_attributes_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::register_transit_gateway_multicast_group_members_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::register_transit_gateway_multicast_group_sources_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::reject_transit_gateway_multicast_domain_associations_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::reject_transit_gateway_peering_attachment_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::reject_transit_gateway_vpc_attachment_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::reject_vpc_endpoint_connections_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::reject_vpc_peering_connection_input::Builder due
// to hidden fields Skipping aws_sdk_ec2::input::release_address_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::release_hosts_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::release_ipam_pool_allocation_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::replace_iam_instance_profile_association_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::replace_network_acl_association_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::replace_network_acl_entry_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::replace_route_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::replace_route_table_association_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::replace_transit_gateway_route_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::report_instance_status_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::request_spot_fleet_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::request_spot_instances_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::reset_address_attribute_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::reset_ebs_default_kms_key_id_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::reset_fpga_image_attribute_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::reset_image_attribute_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::reset_instance_attribute_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::reset_network_interface_attribute_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::reset_snapshot_attribute_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::restore_address_to_classic_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::restore_image_from_recycle_bin_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::restore_managed_prefix_list_version_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::restore_snapshot_from_recycle_bin_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::restore_snapshot_tier_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::revoke_client_vpn_ingress_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::revoke_security_group_egress_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::revoke_security_group_ingress_input::Builder due
// to hidden fields Skipping aws_sdk_ec2::input::run_instances_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::run_scheduled_instances_input::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::input::search_local_gateway_routes_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::search_transit_gateway_multicast_groups_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::search_transit_gateway_routes_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::send_diagnostic_interrupt_input::Builder due to
// hidden fields Skipping aws_sdk_ec2::input::start_instances_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::start_network_insights_access_scope_analysis_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::start_network_insights_analysis_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::start_vpc_endpoint_service_private_dns_verification_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::stop_instances_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::terminate_client_vpn_connections_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::terminate_instances_input::Builder due to hidden
// fields Skipping aws_sdk_ec2::input::unassign_ipv6_addresses_input::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::input::unassign_private_ip_addresses_input::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::input::unmonitor_instances_input::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::input::update_security_group_rule_descriptions_egress_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::update_security_group_rule_descriptions_ingress_input::Builder due to hidden fields
// Skipping aws_sdk_ec2::input::withdraw_byoip_cidr_input::Builder due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::middleware::DefaultMiddleware {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DefaultMiddleware").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AcceleratorCount {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AcceleratorCount")
            .field("min", &self.min)
            .field("max", &self.max)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AcceleratorCountRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AcceleratorCountRequest")
            .field("min", &self.min)
            .field("max", &self.max)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AcceleratorManufacturer {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::AmazonWebServices => {
                f.debug_tuple("AmazonWebServices").finish();
            }
            Self::Amd => {
                f.debug_tuple("Amd").finish();
            }
            Self::Nvidia => {
                f.debug_tuple("Nvidia").finish();
            }
            Self::Xilinx => {
                f.debug_tuple("Xilinx").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AcceleratorName {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::A100 => {
                f.debug_tuple("A100").finish();
            }
            Self::K80 => {
                f.debug_tuple("K80").finish();
            }
            Self::M60 => {
                f.debug_tuple("M60").finish();
            }
            Self::RadeonProV520 => {
                f.debug_tuple("RadeonProV520").finish();
            }
            Self::T4 => {
                f.debug_tuple("T4").finish();
            }
            Self::V100 => {
                f.debug_tuple("V100").finish();
            }
            Self::Vu9P => {
                f.debug_tuple("Vu9P").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AcceleratorTotalMemoryMiB {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AcceleratorTotalMemoryMiB")
            .field("min", &self.min)
            .field("max", &self.max)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AcceleratorTotalMemoryMiBRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AcceleratorTotalMemoryMiBRequest")
            .field("min", &self.min)
            .field("max", &self.max)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AcceleratorType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Fpga => {
                f.debug_tuple("Fpga").finish();
            }
            Self::Gpu => {
                f.debug_tuple("Gpu").finish();
            }
            Self::Inference => {
                f.debug_tuple("Inference").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AccessScopeAnalysisFinding {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AccessScopeAnalysisFinding")
            .field(
                "network_insights_access_scope_analysis_id",
                &self.network_insights_access_scope_analysis_id,
            )
            .field(
                "network_insights_access_scope_id",
                &self.network_insights_access_scope_id,
            )
            .field("finding_id", &self.finding_id)
            .field("finding_components", &self.finding_components)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AccessScopePath {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AccessScopePath")
            .field("source", &self.source)
            .field("destination", &self.destination)
            .field("through_resources", &self.through_resources)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AccessScopePathRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AccessScopePathRequest")
            .field("source", &self.source)
            .field("destination", &self.destination)
            .field("through_resources", &self.through_resources)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AccountAttribute {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AccountAttribute")
            .field("attribute_name", &self.attribute_name)
            .field("attribute_values", &self.attribute_values)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AccountAttributeName {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::DefaultVpc => {
                f.debug_tuple("DefaultVpc").finish();
            }
            Self::SupportedPlatforms => {
                f.debug_tuple("SupportedPlatforms").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AccountAttributeValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AccountAttributeValue")
            .field("attribute_value", &self.attribute_value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ActiveInstance {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ActiveInstance")
            .field("instance_id", &self.instance_id)
            .field("instance_type", &self.instance_type)
            .field("spot_instance_request_id", &self.spot_instance_request_id)
            .field("instance_health", &self.instance_health)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ActivityStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Error => {
                f.debug_tuple("Error").finish();
            }
            Self::Fulfilled => {
                f.debug_tuple("Fulfilled").finish();
            }
            Self::PendingFulfillment => {
                f.debug_tuple("PendingFulfillment").finish();
            }
            Self::PendingTermination => {
                f.debug_tuple("PendingTermination").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AddIpamOperatingRegion {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AddIpamOperatingRegion")
            .field("region_name", &self.region_name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AddPrefixListEntry {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AddPrefixListEntry")
            .field("cidr", &self.cidr)
            .field("description", &self.description)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AdditionalDetail {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AdditionalDetail")
            .field("additional_detail_type", &self.additional_detail_type)
            .field("component", &self.component)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Address {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Address")
            .field("instance_id", &self.instance_id)
            .field("public_ip", &self.public_ip)
            .field("allocation_id", &self.allocation_id)
            .field("association_id", &self.association_id)
            .field("domain", &self.domain)
            .field("network_interface_id", &self.network_interface_id)
            .field(
                "network_interface_owner_id",
                &self.network_interface_owner_id,
            )
            .field("private_ip_address", &self.private_ip_address)
            .field("tags", &self.tags)
            .field("public_ipv4_pool", &self.public_ipv4_pool)
            .field("network_border_group", &self.network_border_group)
            .field("customer_owned_ip", &self.customer_owned_ip)
            .field("customer_owned_ipv4_pool", &self.customer_owned_ipv4_pool)
            .field("carrier_ip", &self.carrier_ip)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AddressAttribute {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AddressAttribute")
            .field("public_ip", &self.public_ip)
            .field("allocation_id", &self.allocation_id)
            .field("ptr_record", &self.ptr_record)
            .field("ptr_record_update", &self.ptr_record_update)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AddressAttributeName {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::DomainName => {
                f.debug_tuple("DomainName").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AddressFamily {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Ipv4 => {
                f.debug_tuple("Ipv4").finish();
            }
            Self::Ipv6 => {
                f.debug_tuple("Ipv6").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::Affinity {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Default => {
                f.debug_tuple("Default").finish();
            }
            Self::Host => {
                f.debug_tuple("Host").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AllocationState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::PermanentFailure => {
                f.debug_tuple("PermanentFailure").finish();
            }
            Self::Released => {
                f.debug_tuple("Released").finish();
            }
            Self::ReleasedPermanentFailure => {
                f.debug_tuple("ReleasedPermanentFailure").finish();
            }
            Self::UnderAssessment => {
                f.debug_tuple("UnderAssessment").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AllocationStrategy {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::CapacityOptimized => {
                f.debug_tuple("CapacityOptimized").finish();
            }
            Self::CapacityOptimizedPrioritized => {
                f.debug_tuple("CapacityOptimizedPrioritized").finish();
            }
            Self::Diversified => {
                f.debug_tuple("Diversified").finish();
            }
            Self::LowestPrice => {
                f.debug_tuple("LowestPrice").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AllowedPrincipal {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AllowedPrincipal")
            .field("principal_type", &self.principal_type)
            .field("principal", &self.principal)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AllowsMultipleInstanceTypes {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Off => {
                f.debug_tuple("Off").finish();
            }
            Self::On => {
                f.debug_tuple("On").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AlternatePathHint {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AlternatePathHint")
            .field("component_id", &self.component_id)
            .field("component_arn", &self.component_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AnalysisAclRule {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AnalysisAclRule")
            .field("cidr", &self.cidr)
            .field("egress", &self.egress)
            .field("port_range", &self.port_range)
            .field("protocol", &self.protocol)
            .field("rule_action", &self.rule_action)
            .field("rule_number", &self.rule_number)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AnalysisComponent {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AnalysisComponent")
            .field("id", &self.id)
            .field("arn", &self.arn)
            .field("name", &self.name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AnalysisLoadBalancerListener {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AnalysisLoadBalancerListener")
            .field("load_balancer_port", &self.load_balancer_port)
            .field("instance_port", &self.instance_port)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AnalysisLoadBalancerTarget {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AnalysisLoadBalancerTarget")
            .field("address", &self.address)
            .field("availability_zone", &self.availability_zone)
            .field("instance", &self.instance)
            .field("port", &self.port)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AnalysisPacketHeader {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AnalysisPacketHeader")
            .field("destination_addresses", &self.destination_addresses)
            .field("destination_port_ranges", &self.destination_port_ranges)
            .field("protocol", &self.protocol)
            .field("source_addresses", &self.source_addresses)
            .field("source_port_ranges", &self.source_port_ranges)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AnalysisRouteTableRoute {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AnalysisRouteTableRoute")
            .field("destination_cidr", &self.destination_cidr)
            .field(
                "destination_prefix_list_id",
                &self.destination_prefix_list_id,
            )
            .field(
                "egress_only_internet_gateway_id",
                &self.egress_only_internet_gateway_id,
            )
            .field("gateway_id", &self.gateway_id)
            .field("instance_id", &self.instance_id)
            .field("nat_gateway_id", &self.nat_gateway_id)
            .field("network_interface_id", &self.network_interface_id)
            .field("origin", &self.origin)
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("vpc_peering_connection_id", &self.vpc_peering_connection_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AnalysisSecurityGroupRule {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AnalysisSecurityGroupRule")
            .field("cidr", &self.cidr)
            .field("direction", &self.direction)
            .field("security_group_id", &self.security_group_id)
            .field("port_range", &self.port_range)
            .field("prefix_list_id", &self.prefix_list_id)
            .field("protocol", &self.protocol)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AnalysisStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Running => {
                f.debug_tuple("Running").finish();
            }
            Self::Succeeded => {
                f.debug_tuple("Succeeded").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ApplianceModeSupportValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disable => {
                f.debug_tuple("Disable").finish();
            }
            Self::Enable => {
                f.debug_tuple("Enable").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ArchitectureType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Arm64 => {
                f.debug_tuple("Arm64").finish();
            }
            Self::I386 => {
                f.debug_tuple("I386").finish();
            }
            Self::X8664 => {
                f.debug_tuple("X8664").finish();
            }
            Self::X8664Mac => {
                f.debug_tuple("X8664Mac").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ArchitectureValues {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Arm64 => {
                f.debug_tuple("Arm64").finish();
            }
            Self::I386 => {
                f.debug_tuple("I386").finish();
            }
            Self::X8664 => {
                f.debug_tuple("X8664").finish();
            }
            Self::X8664Mac => {
                f.debug_tuple("X8664Mac").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AssignedPrivateIpAddress {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssignedPrivateIpAddress")
            .field("private_ip_address", &self.private_ip_address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AssociatedNetworkType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Vpc => {
                f.debug_tuple("Vpc").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AssociatedRole {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociatedRole")
            .field("associated_role_arn", &self.associated_role_arn)
            .field(
                "certificate_s3_bucket_name",
                &self.certificate_s3_bucket_name,
            )
            .field("certificate_s3_object_key", &self.certificate_s3_object_key)
            .field("encryption_kms_key_id", &self.encryption_kms_key_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AssociatedTargetNetwork {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociatedTargetNetwork")
            .field("network_id", &self.network_id)
            .field("network_type", &self.network_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AssociationStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociationStatus")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AssociationStatusCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Associated => {
                f.debug_tuple("Associated").finish();
            }
            Self::Associating => {
                f.debug_tuple("Associating").finish();
            }
            Self::AssociationFailed => {
                f.debug_tuple("AssociationFailed").finish();
            }
            Self::Disassociated => {
                f.debug_tuple("Disassociated").finish();
            }
            Self::Disassociating => {
                f.debug_tuple("Disassociating").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AthenaIntegration {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AthenaIntegration")
            .field(
                "integration_result_s3_destination_arn",
                &self.integration_result_s3_destination_arn,
            )
            .field("partition_load_frequency", &self.partition_load_frequency)
            .field("partition_start_date", &self.partition_start_date)
            .field("partition_end_date", &self.partition_end_date)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AttachmentStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Attached => {
                f.debug_tuple("Attached").finish();
            }
            Self::Attaching => {
                f.debug_tuple("Attaching").finish();
            }
            Self::Detached => {
                f.debug_tuple("Detached").finish();
            }
            Self::Detaching => {
                f.debug_tuple("Detaching").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AttributeBooleanValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AttributeBooleanValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AttributeValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AttributeValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AuthorizationRule {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AuthorizationRule")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("description", &self.description)
            .field("group_id", &self.group_id)
            .field("access_all", &self.access_all)
            .field("destination_cidr", &self.destination_cidr)
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AutoAcceptSharedAssociationsValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disable => {
                f.debug_tuple("Disable").finish();
            }
            Self::Enable => {
                f.debug_tuple("Enable").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AutoAcceptSharedAttachmentsValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disable => {
                f.debug_tuple("Disable").finish();
            }
            Self::Enable => {
                f.debug_tuple("Enable").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AutoPlacement {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Off => {
                f.debug_tuple("Off").finish();
            }
            Self::On => {
                f.debug_tuple("On").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AvailabilityZone {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AvailabilityZone")
            .field("state", &self.state)
            .field("opt_in_status", &self.opt_in_status)
            .field("messages", &self.messages)
            .field("region_name", &self.region_name)
            .field("zone_name", &self.zone_name)
            .field("zone_id", &self.zone_id)
            .field("group_name", &self.group_name)
            .field("network_border_group", &self.network_border_group)
            .field("zone_type", &self.zone_type)
            .field("parent_zone_name", &self.parent_zone_name)
            .field("parent_zone_id", &self.parent_zone_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AvailabilityZoneMessage {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AvailabilityZoneMessage")
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::AvailabilityZoneOptInStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::NotOptedIn => {
                f.debug_tuple("NotOptedIn").finish();
            }
            Self::OptInNotRequired => {
                f.debug_tuple("OptInNotRequired").finish();
            }
            Self::OptedIn => {
                f.debug_tuple("OptedIn").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AvailabilityZoneState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Impaired => {
                f.debug_tuple("Impaired").finish();
            }
            Self::Information => {
                f.debug_tuple("Information").finish();
            }
            Self::Unavailable => {
                f.debug_tuple("Unavailable").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::AvailableCapacity {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AvailableCapacity")
            .field(
                "available_instance_capacity",
                &self.available_instance_capacity,
            )
            .field("available_v_cpus", &self.available_v_cpus)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::BareMetal {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Excluded => {
                f.debug_tuple("Excluded").finish();
            }
            Self::Included => {
                f.debug_tuple("Included").finish();
            }
            Self::Required => {
                f.debug_tuple("Required").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::BaselineEbsBandwidthMbps {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("BaselineEbsBandwidthMbps")
            .field("min", &self.min)
            .field("max", &self.max)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::BaselineEbsBandwidthMbpsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("BaselineEbsBandwidthMbpsRequest")
            .field("min", &self.min)
            .field("max", &self.max)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::BatchState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Cancelled => {
                f.debug_tuple("Cancelled").finish();
            }
            Self::CancelledRunning => {
                f.debug_tuple("CancelledRunning").finish();
            }
            Self::CancelledTerminatingInstances => {
                f.debug_tuple("CancelledTerminatingInstances").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Modifying => {
                f.debug_tuple("Modifying").finish();
            }
            Self::Submitted => {
                f.debug_tuple("Submitted").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::BgpStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Down => {
                f.debug_tuple("Down").finish();
            }
            Self::Up => {
                f.debug_tuple("Up").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::BlobAttributeValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("BlobAttributeValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::BlockDeviceMapping {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("BlockDeviceMapping")
            .field("device_name", &self.device_name)
            .field("virtual_name", &self.virtual_name)
            .field("ebs", &self.ebs)
            .field("no_device", &self.no_device)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::BootModeType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::LegacyBios => {
                f.debug_tuple("LegacyBios").finish();
            }
            Self::Uefi => {
                f.debug_tuple("Uefi").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::BootModeValues {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::LegacyBios => {
                f.debug_tuple("LegacyBios").finish();
            }
            Self::Uefi => {
                f.debug_tuple("Uefi").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::BundleTask {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("BundleTask")
            .field("bundle_id", &self.bundle_id)
            .field("bundle_task_error", &self.bundle_task_error)
            .field("instance_id", &self.instance_id)
            .field("progress", &self.progress)
            .field("start_time", &self.start_time)
            .field("state", &self.state)
            .field("storage", &self.storage)
            .field("update_time", &self.update_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::BundleTaskError {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("BundleTaskError")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::BundleTaskState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Bundling => {
                f.debug_tuple("Bundling").finish();
            }
            Self::Cancelling => {
                f.debug_tuple("Cancelling").finish();
            }
            Self::Complete => {
                f.debug_tuple("Complete").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Storing => {
                f.debug_tuple("Storing").finish();
            }
            Self::WaitingForShutdown => {
                f.debug_tuple("WaitingForShutdown").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::BurstablePerformance {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Excluded => {
                f.debug_tuple("Excluded").finish();
            }
            Self::Included => {
                f.debug_tuple("Included").finish();
            }
            Self::Required => {
                f.debug_tuple("Required").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ByoipCidr {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ByoipCidr")
            .field("cidr", &self.cidr)
            .field("description", &self.description)
            .field("status_message", &self.status_message)
            .field("state", &self.state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ByoipCidrState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Advertised => {
                f.debug_tuple("Advertised").finish();
            }
            Self::Deprovisioned => {
                f.debug_tuple("Deprovisioned").finish();
            }
            Self::FailedDeprovision => {
                f.debug_tuple("FailedDeprovision").finish();
            }
            Self::FailedProvision => {
                f.debug_tuple("FailedProvision").finish();
            }
            Self::PendingDeprovision => {
                f.debug_tuple("PendingDeprovision").finish();
            }
            Self::PendingProvision => {
                f.debug_tuple("PendingProvision").finish();
            }
            Self::Provisioned => {
                f.debug_tuple("Provisioned").finish();
            }
            Self::ProvisionedNotPubliclyAdvertisable => {
                f.debug_tuple("ProvisionedNotPubliclyAdvertisable").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::CancelBatchErrorCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::FleetRequestIdDoesNotExist => {
                f.debug_tuple("FleetRequestIdDoesNotExist").finish();
            }
            Self::FleetRequestIdMalformed => {
                f.debug_tuple("FleetRequestIdMalformed").finish();
            }
            Self::FleetRequestNotInCancellableState => {
                f.debug_tuple("FleetRequestNotInCancellableState").finish();
            }
            Self::UnexpectedError => {
                f.debug_tuple("UnexpectedError").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::CancelCapacityReservationFleetError {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelCapacityReservationFleetError")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CancelSpotFleetRequestsError {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelSpotFleetRequestsError")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CancelSpotFleetRequestsErrorItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelSpotFleetRequestsErrorItem")
            .field("error", &self.error)
            .field("spot_fleet_request_id", &self.spot_fleet_request_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CancelSpotFleetRequestsSuccessItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelSpotFleetRequestsSuccessItem")
            .field(
                "current_spot_fleet_request_state",
                &self.current_spot_fleet_request_state,
            )
            .field(
                "previous_spot_fleet_request_state",
                &self.previous_spot_fleet_request_state,
            )
            .field("spot_fleet_request_id", &self.spot_fleet_request_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CancelSpotInstanceRequestState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Cancelled => {
                f.debug_tuple("Cancelled").finish();
            }
            Self::Closed => {
                f.debug_tuple("Closed").finish();
            }
            Self::Completed => {
                f.debug_tuple("Completed").finish();
            }
            Self::Open => {
                f.debug_tuple("Open").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::CancelledSpotInstanceRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelledSpotInstanceRequest")
            .field("spot_instance_request_id", &self.spot_instance_request_id)
            .field("state", &self.state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CapacityReservation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CapacityReservation")
            .field("capacity_reservation_id", &self.capacity_reservation_id)
            .field("owner_id", &self.owner_id)
            .field("capacity_reservation_arn", &self.capacity_reservation_arn)
            .field("availability_zone_id", &self.availability_zone_id)
            .field("instance_type", &self.instance_type)
            .field("instance_platform", &self.instance_platform)
            .field("availability_zone", &self.availability_zone)
            .field("tenancy", &self.tenancy)
            .field("total_instance_count", &self.total_instance_count)
            .field("available_instance_count", &self.available_instance_count)
            .field("ebs_optimized", &self.ebs_optimized)
            .field("ephemeral_storage", &self.ephemeral_storage)
            .field("state", &self.state)
            .field("start_date", &self.start_date)
            .field("end_date", &self.end_date)
            .field("end_date_type", &self.end_date_type)
            .field("instance_match_criteria", &self.instance_match_criteria)
            .field("create_date", &self.create_date)
            .field("tags", &self.tags)
            .field("outpost_arn", &self.outpost_arn)
            .field(
                "capacity_reservation_fleet_id",
                &self.capacity_reservation_fleet_id,
            )
            .field("placement_group_arn", &self.placement_group_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CapacityReservationFleet {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CapacityReservationFleet")
            .field(
                "capacity_reservation_fleet_id",
                &self.capacity_reservation_fleet_id,
            )
            .field(
                "capacity_reservation_fleet_arn",
                &self.capacity_reservation_fleet_arn,
            )
            .field("state", &self.state)
            .field("total_target_capacity", &self.total_target_capacity)
            .field("total_fulfilled_capacity", &self.total_fulfilled_capacity)
            .field("tenancy", &self.tenancy)
            .field("end_date", &self.end_date)
            .field("create_time", &self.create_time)
            .field("instance_match_criteria", &self.instance_match_criteria)
            .field("allocation_strategy", &self.allocation_strategy)
            .field(
                "instance_type_specifications",
                &self.instance_type_specifications,
            )
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CapacityReservationFleetCancellationState {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CapacityReservationFleetCancellationState")
            .field("current_fleet_state", &self.current_fleet_state)
            .field("previous_fleet_state", &self.previous_fleet_state)
            .field(
                "capacity_reservation_fleet_id",
                &self.capacity_reservation_fleet_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CapacityReservationFleetState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Cancelled => {
                f.debug_tuple("Cancelled").finish();
            }
            Self::Cancelling => {
                f.debug_tuple("Cancelling").finish();
            }
            Self::Expired => {
                f.debug_tuple("Expired").finish();
            }
            Self::Expiring => {
                f.debug_tuple("Expiring").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Modifying => {
                f.debug_tuple("Modifying").finish();
            }
            Self::PartiallyFulfilled => {
                f.debug_tuple("PartiallyFulfilled").finish();
            }
            Self::Submitted => {
                f.debug_tuple("Submitted").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::CapacityReservationGroup {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CapacityReservationGroup")
            .field("group_arn", &self.group_arn)
            .field("owner_id", &self.owner_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CapacityReservationInstancePlatform {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::LinuxWithSqlServerEnterprise => {
                f.debug_tuple("LinuxWithSqlServerEnterprise").finish();
            }
            Self::LinuxWithSqlServerStandard => {
                f.debug_tuple("LinuxWithSqlServerStandard").finish();
            }
            Self::LinuxWithSqlServerWeb => {
                f.debug_tuple("LinuxWithSqlServerWeb").finish();
            }
            Self::LinuxUnix => {
                f.debug_tuple("LinuxUnix").finish();
            }
            Self::RhelWithHa => {
                f.debug_tuple("RhelWithHa").finish();
            }
            Self::RhelWithHaAndSqlServerEnterprise => {
                f.debug_tuple("RhelWithHaAndSqlServerEnterprise").finish();
            }
            Self::RhelWithHaAndSqlServerStandard => {
                f.debug_tuple("RhelWithHaAndSqlServerStandard").finish();
            }
            Self::RhelWithSqlServerEnterprise => {
                f.debug_tuple("RhelWithSqlServerEnterprise").finish();
            }
            Self::RhelWithSqlServerStandard => {
                f.debug_tuple("RhelWithSqlServerStandard").finish();
            }
            Self::RhelWithSqlServerWeb => {
                f.debug_tuple("RhelWithSqlServerWeb").finish();
            }
            Self::RedHatEnterpriseLinux => {
                f.debug_tuple("RedHatEnterpriseLinux").finish();
            }
            Self::SuseLinux => {
                f.debug_tuple("SuseLinux").finish();
            }
            Self::Windows => {
                f.debug_tuple("Windows").finish();
            }
            Self::WindowsWithSqlServer => {
                f.debug_tuple("WindowsWithSqlServer").finish();
            }
            Self::WindowsWithSqlServerEnterprise => {
                f.debug_tuple("WindowsWithSqlServerEnterprise").finish();
            }
            Self::WindowsWithSqlServerStandard => {
                f.debug_tuple("WindowsWithSqlServerStandard").finish();
            }
            Self::WindowsWithSqlServerWeb => {
                f.debug_tuple("WindowsWithSqlServerWeb").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::CapacityReservationOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CapacityReservationOptions")
            .field("usage_strategy", &self.usage_strategy)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CapacityReservationOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CapacityReservationOptionsRequest")
            .field("usage_strategy", &self.usage_strategy)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CapacityReservationPreference {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::None => {
                f.debug_tuple("None").finish();
            }
            Self::Open => {
                f.debug_tuple("Open").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::CapacityReservationSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CapacityReservationSpecification")
            .field(
                "capacity_reservation_preference",
                &self.capacity_reservation_preference,
            )
            .field(
                "capacity_reservation_target",
                &self.capacity_reservation_target,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CapacityReservationSpecificationResponse {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CapacityReservationSpecificationResponse")
            .field(
                "capacity_reservation_preference",
                &self.capacity_reservation_preference,
            )
            .field(
                "capacity_reservation_target",
                &self.capacity_reservation_target,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CapacityReservationState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Cancelled => {
                f.debug_tuple("Cancelled").finish();
            }
            Self::Expired => {
                f.debug_tuple("Expired").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::CapacityReservationTarget {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CapacityReservationTarget")
            .field("capacity_reservation_id", &self.capacity_reservation_id)
            .field(
                "capacity_reservation_resource_group_arn",
                &self.capacity_reservation_resource_group_arn,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CapacityReservationTargetResponse {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CapacityReservationTargetResponse")
            .field("capacity_reservation_id", &self.capacity_reservation_id)
            .field(
                "capacity_reservation_resource_group_arn",
                &self.capacity_reservation_resource_group_arn,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CapacityReservationTenancy {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Dedicated => {
                f.debug_tuple("Dedicated").finish();
            }
            Self::Default => {
                f.debug_tuple("Default").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::CarrierGateway {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CarrierGateway")
            .field("carrier_gateway_id", &self.carrier_gateway_id)
            .field("vpc_id", &self.vpc_id)
            .field("state", &self.state)
            .field("owner_id", &self.owner_id)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CarrierGatewayState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::CertificateAuthentication {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CertificateAuthentication")
            .field(
                "client_root_certificate_chain",
                &self.client_root_certificate_chain,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CertificateAuthenticationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CertificateAuthenticationRequest")
            .field(
                "client_root_certificate_chain_arn",
                &self.client_root_certificate_chain_arn,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CidrAuthorizationContext {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CidrAuthorizationContext")
            .field("message", &self.message)
            .field("signature", &self.signature)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CidrBlock {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CidrBlock")
            .field("cidr_block", &self.cidr_block)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClassicLinkDnsSupport {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClassicLinkDnsSupport")
            .field(
                "classic_link_dns_supported",
                &self.classic_link_dns_supported,
            )
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClassicLinkInstance {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClassicLinkInstance")
            .field("groups", &self.groups)
            .field("instance_id", &self.instance_id)
            .field("tags", &self.tags)
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClassicLoadBalancer {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClassicLoadBalancer")
            .field("name", &self.name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClassicLoadBalancersConfig {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClassicLoadBalancersConfig")
            .field("classic_load_balancers", &self.classic_load_balancers)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientCertificateRevocationListStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClientCertificateRevocationListStatus")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientCertificateRevocationListStatusCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientConnectOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClientConnectOptions")
            .field("enabled", &self.enabled)
            .field("lambda_function_arn", &self.lambda_function_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientConnectResponseOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClientConnectResponseOptions")
            .field("enabled", &self.enabled)
            .field("lambda_function_arn", &self.lambda_function_arn)
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientData {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClientData")
            .field("comment", &self.comment)
            .field("upload_end", &self.upload_end)
            .field("upload_size", &self.upload_size)
            .field("upload_start", &self.upload_start)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientLoginBannerOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClientLoginBannerOptions")
            .field("enabled", &self.enabled)
            .field("banner_text", &self.banner_text)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientLoginBannerResponseOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClientLoginBannerResponseOptions")
            .field("enabled", &self.enabled)
            .field("banner_text", &self.banner_text)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientVpnAuthentication {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClientVpnAuthentication")
            .field("r#type", &self.r#type)
            .field("active_directory", &self.active_directory)
            .field("mutual_authentication", &self.mutual_authentication)
            .field("federated_authentication", &self.federated_authentication)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientVpnAuthenticationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClientVpnAuthenticationRequest")
            .field("r#type", &self.r#type)
            .field("active_directory", &self.active_directory)
            .field("mutual_authentication", &self.mutual_authentication)
            .field("federated_authentication", &self.federated_authentication)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientVpnAuthenticationType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::CertificateAuthentication => {
                f.debug_tuple("CertificateAuthentication").finish();
            }
            Self::DirectoryServiceAuthentication => {
                f.debug_tuple("DirectoryServiceAuthentication").finish();
            }
            Self::FederatedAuthentication => {
                f.debug_tuple("FederatedAuthentication").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientVpnAuthorizationRuleStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClientVpnAuthorizationRuleStatus")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientVpnAuthorizationRuleStatusCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Authorizing => {
                f.debug_tuple("Authorizing").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Revoking => {
                f.debug_tuple("Revoking").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientVpnConnection {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClientVpnConnection")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("timestamp", &self.timestamp)
            .field("connection_id", &self.connection_id)
            .field("username", &self.username)
            .field(
                "connection_established_time",
                &self.connection_established_time,
            )
            .field("ingress_bytes", &self.ingress_bytes)
            .field("egress_bytes", &self.egress_bytes)
            .field("ingress_packets", &self.ingress_packets)
            .field("egress_packets", &self.egress_packets)
            .field("client_ip", &self.client_ip)
            .field("common_name", &self.common_name)
            .field("status", &self.status)
            .field("connection_end_time", &self.connection_end_time)
            .field(
                "posture_compliance_statuses",
                &self.posture_compliance_statuses,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientVpnConnectionStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClientVpnConnectionStatus")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientVpnConnectionStatusCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::FailedToTerminate => {
                f.debug_tuple("FailedToTerminate").finish();
            }
            Self::Terminated => {
                f.debug_tuple("Terminated").finish();
            }
            Self::Terminating => {
                f.debug_tuple("Terminating").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientVpnEndpoint {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClientVpnEndpoint")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("description", &self.description)
            .field("status", &self.status)
            .field("creation_time", &self.creation_time)
            .field("deletion_time", &self.deletion_time)
            .field("dns_name", &self.dns_name)
            .field("client_cidr_block", &self.client_cidr_block)
            .field("dns_servers", &self.dns_servers)
            .field("split_tunnel", &self.split_tunnel)
            .field("vpn_protocol", &self.vpn_protocol)
            .field("transport_protocol", &self.transport_protocol)
            .field("vpn_port", &self.vpn_port)
            .field(
                "associated_target_networks",
                &self.associated_target_networks,
            )
            .field("server_certificate_arn", &self.server_certificate_arn)
            .field("authentication_options", &self.authentication_options)
            .field("connection_log_options", &self.connection_log_options)
            .field("tags", &self.tags)
            .field("security_group_ids", &self.security_group_ids)
            .field("vpc_id", &self.vpc_id)
            .field("self_service_portal_url", &self.self_service_portal_url)
            .field("client_connect_options", &self.client_connect_options)
            .field("session_timeout_hours", &self.session_timeout_hours)
            .field(
                "client_login_banner_options",
                &self.client_login_banner_options,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientVpnEndpointAttributeStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClientVpnEndpointAttributeStatus")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientVpnEndpointAttributeStatusCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Applied => {
                f.debug_tuple("Applied").finish();
            }
            Self::Applying => {
                f.debug_tuple("Applying").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientVpnEndpointStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClientVpnEndpointStatus")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientVpnEndpointStatusCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::PendingAssociate => {
                f.debug_tuple("PendingAssociate").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientVpnRoute {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClientVpnRoute")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("destination_cidr", &self.destination_cidr)
            .field("target_subnet", &self.target_subnet)
            .field("r#type", &self.r#type)
            .field("origin", &self.origin)
            .field("status", &self.status)
            .field("description", &self.description)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientVpnRouteStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ClientVpnRouteStatus")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ClientVpnRouteStatusCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Creating => {
                f.debug_tuple("Creating").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::CoipAddressUsage {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CoipAddressUsage")
            .field("allocation_id", &self.allocation_id)
            .field("aws_account_id", &self.aws_account_id)
            .field("aws_service", &self.aws_service)
            .field("co_ip", &self.co_ip)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CoipPool {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CoipPool")
            .field("pool_id", &self.pool_id)
            .field("pool_cidrs", &self.pool_cidrs)
            .field(
                "local_gateway_route_table_id",
                &self.local_gateway_route_table_id,
            )
            .field("tags", &self.tags)
            .field("pool_arn", &self.pool_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ConnectionLogOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ConnectionLogOptions")
            .field("enabled", &self.enabled)
            .field("cloudwatch_log_group", &self.cloudwatch_log_group)
            .field("cloudwatch_log_stream", &self.cloudwatch_log_stream)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ConnectionLogResponseOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ConnectionLogResponseOptions")
            .field("enabled", &self.enabled)
            .field("cloudwatch_log_group", &self.cloudwatch_log_group)
            .field("cloudwatch_log_stream", &self.cloudwatch_log_stream)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ConnectionNotification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ConnectionNotification")
            .field(
                "connection_notification_id",
                &self.connection_notification_id,
            )
            .field("service_id", &self.service_id)
            .field("vpc_endpoint_id", &self.vpc_endpoint_id)
            .field(
                "connection_notification_type",
                &self.connection_notification_type,
            )
            .field(
                "connection_notification_arn",
                &self.connection_notification_arn,
            )
            .field("connection_events", &self.connection_events)
            .field(
                "connection_notification_state",
                &self.connection_notification_state,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ConnectionNotificationState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disabled => {
                f.debug_tuple("Disabled").finish();
            }
            Self::Enabled => {
                f.debug_tuple("Enabled").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ConnectionNotificationType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Topic => {
                f.debug_tuple("Topic").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ConnectivityType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Private => {
                f.debug_tuple("Private").finish();
            }
            Self::Public => {
                f.debug_tuple("Public").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ContainerFormat {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Ova => {
                f.debug_tuple("Ova").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ConversionTask {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ConversionTask")
            .field("conversion_task_id", &self.conversion_task_id)
            .field("expiration_time", &self.expiration_time)
            .field("import_instance", &self.import_instance)
            .field("import_volume", &self.import_volume)
            .field("state", &self.state)
            .field("status_message", &self.status_message)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ConversionTaskState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Cancelled => {
                f.debug_tuple("Cancelled").finish();
            }
            Self::Cancelling => {
                f.debug_tuple("Cancelling").finish();
            }
            Self::Completed => {
                f.debug_tuple("Completed").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::CopyTagsFromSource {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Volume => {
                f.debug_tuple("Volume").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::CpuManufacturer {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::AmazonWebServices => {
                f.debug_tuple("AmazonWebServices").finish();
            }
            Self::Amd => {
                f.debug_tuple("Amd").finish();
            }
            Self::Intel => {
                f.debug_tuple("Intel").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::CpuOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CpuOptions")
            .field("core_count", &self.core_count)
            .field("threads_per_core", &self.threads_per_core)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CpuOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CpuOptionsRequest")
            .field("core_count", &self.core_count)
            .field("threads_per_core", &self.threads_per_core)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CreateFleetError {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateFleetError")
            .field(
                "launch_template_and_overrides",
                &self.launch_template_and_overrides,
            )
            .field("lifecycle", &self.lifecycle)
            .field("error_code", &self.error_code)
            .field("error_message", &self.error_message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CreateFleetInstance {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateFleetInstance")
            .field(
                "launch_template_and_overrides",
                &self.launch_template_and_overrides,
            )
            .field("lifecycle", &self.lifecycle)
            .field("instance_ids", &self.instance_ids)
            .field("instance_type", &self.instance_type)
            .field("platform", &self.platform)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CreateTransitGatewayConnectRequestOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayConnectRequestOptions")
            .field("protocol", &self.protocol)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CreateTransitGatewayMulticastDomainRequestOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayMulticastDomainRequestOptions")
            .field("igmpv2_support", &self.igmpv2_support)
            .field("static_sources_support", &self.static_sources_support)
            .field(
                "auto_accept_shared_associations",
                &self.auto_accept_shared_associations,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CreateTransitGatewayVpcAttachmentRequestOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayVpcAttachmentRequestOptions")
            .field("dns_support", &self.dns_support)
            .field("ipv6_support", &self.ipv6_support)
            .field("appliance_mode_support", &self.appliance_mode_support)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CreateVolumePermission {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVolumePermission")
            .field("group", &self.group)
            .field("user_id", &self.user_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CreateVolumePermissionModifications {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVolumePermissionModifications")
            .field("add", &self.add)
            .field("remove", &self.remove)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CreditSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreditSpecification")
            .field("cpu_credits", &self.cpu_credits)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CreditSpecificationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreditSpecificationRequest")
            .field("cpu_credits", &self.cpu_credits)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::CurrencyCodeValues {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Usd => {
                f.debug_tuple("Usd").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::CustomerGateway {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CustomerGateway")
            .field("bgp_asn", &self.bgp_asn)
            .field("customer_gateway_id", &self.customer_gateway_id)
            .field("ip_address", &self.ip_address)
            .field("certificate_arn", &self.certificate_arn)
            .field("state", &self.state)
            .field("r#type", &self.r#type)
            .field("device_name", &self.device_name)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DatafeedSubscriptionState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Inactive => {
                f.debug_tuple("Inactive").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::DefaultRouteTableAssociationValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disable => {
                f.debug_tuple("Disable").finish();
            }
            Self::Enable => {
                f.debug_tuple("Enable").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::DefaultRouteTablePropagationValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disable => {
                f.debug_tuple("Disable").finish();
            }
            Self::Enable => {
                f.debug_tuple("Enable").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::DefaultTargetCapacityType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::OnDemand => {
                f.debug_tuple("OnDemand").finish();
            }
            Self::Spot => {
                f.debug_tuple("Spot").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::DeleteFleetError {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteFleetError")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DeleteFleetErrorCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::FleetIdDoesNotExist => {
                f.debug_tuple("FleetIdDoesNotExist").finish();
            }
            Self::FleetIdMalformed => {
                f.debug_tuple("FleetIdMalformed").finish();
            }
            Self::FleetNotInDeletableState => {
                f.debug_tuple("FleetNotInDeletableState").finish();
            }
            Self::UnexpectedError => {
                f.debug_tuple("UnexpectedError").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::DeleteFleetErrorItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteFleetErrorItem")
            .field("error", &self.error)
            .field("fleet_id", &self.fleet_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DeleteFleetSuccessItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteFleetSuccessItem")
            .field("current_fleet_state", &self.current_fleet_state)
            .field("previous_fleet_state", &self.previous_fleet_state)
            .field("fleet_id", &self.fleet_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DeleteLaunchTemplateVersionsResponseErrorItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteLaunchTemplateVersionsResponseErrorItem")
            .field("launch_template_id", &self.launch_template_id)
            .field("launch_template_name", &self.launch_template_name)
            .field("version_number", &self.version_number)
            .field("response_error", &self.response_error)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DeleteLaunchTemplateVersionsResponseSuccessItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteLaunchTemplateVersionsResponseSuccessItem")
            .field("launch_template_id", &self.launch_template_id)
            .field("launch_template_name", &self.launch_template_name)
            .field("version_number", &self.version_number)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DeleteQueuedReservedInstancesError {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteQueuedReservedInstancesError")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DeleteQueuedReservedInstancesErrorCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::ReservedInstancesIdInvalid => {
                f.debug_tuple("ReservedInstancesIdInvalid").finish();
            }
            Self::ReservedInstancesNotInQueuedState => {
                f.debug_tuple("ReservedInstancesNotInQueuedState").finish();
            }
            Self::UnexpectedError => {
                f.debug_tuple("UnexpectedError").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::DeregisterInstanceTagAttributeRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeregisterInstanceTagAttributeRequest")
            .field(
                "include_all_tags_of_instance",
                &self.include_all_tags_of_instance,
            )
            .field("instance_tag_keys", &self.instance_tag_keys)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DescribeFastLaunchImagesSuccessItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFastLaunchImagesSuccessItem")
            .field("image_id", &self.image_id)
            .field("resource_type", &self.resource_type)
            .field("snapshot_configuration", &self.snapshot_configuration)
            .field("launch_template", &self.launch_template)
            .field("max_parallel_launches", &self.max_parallel_launches)
            .field("owner_id", &self.owner_id)
            .field("state", &self.state)
            .field("state_transition_reason", &self.state_transition_reason)
            .field("state_transition_time", &self.state_transition_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DescribeFastSnapshotRestoreSuccessItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFastSnapshotRestoreSuccessItem")
            .field("snapshot_id", &self.snapshot_id)
            .field("availability_zone", &self.availability_zone)
            .field("state", &self.state)
            .field("state_transition_reason", &self.state_transition_reason)
            .field("owner_id", &self.owner_id)
            .field("owner_alias", &self.owner_alias)
            .field("enabling_time", &self.enabling_time)
            .field("optimizing_time", &self.optimizing_time)
            .field("enabled_time", &self.enabled_time)
            .field("disabling_time", &self.disabling_time)
            .field("disabled_time", &self.disabled_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DescribeFleetError {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFleetError")
            .field(
                "launch_template_and_overrides",
                &self.launch_template_and_overrides,
            )
            .field("lifecycle", &self.lifecycle)
            .field("error_code", &self.error_code)
            .field("error_message", &self.error_message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DescribeFleetsInstances {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFleetsInstances")
            .field(
                "launch_template_and_overrides",
                &self.launch_template_and_overrides,
            )
            .field("lifecycle", &self.lifecycle)
            .field("instance_ids", &self.instance_ids)
            .field("instance_type", &self.instance_type)
            .field("platform", &self.platform)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DestinationFileFormat {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Parquet => {
                f.debug_tuple("Parquet").finish();
            }
            Self::PlainText => {
                f.debug_tuple("PlainText").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::DestinationOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DestinationOptionsRequest")
            .field("file_format", &self.file_format)
            .field(
                "hive_compatible_partitions",
                &self.hive_compatible_partitions,
            )
            .field("per_hour_partition", &self.per_hour_partition)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DestinationOptionsResponse {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DestinationOptionsResponse")
            .field("file_format", &self.file_format)
            .field(
                "hive_compatible_partitions",
                &self.hive_compatible_partitions,
            )
            .field("per_hour_partition", &self.per_hour_partition)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DeviceType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Ebs => {
                f.debug_tuple("Ebs").finish();
            }
            Self::InstanceStore => {
                f.debug_tuple("InstanceStore").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::DhcpConfiguration {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DhcpConfiguration")
            .field("key", &self.key)
            .field("values", &self.values)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DhcpOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DhcpOptions")
            .field("dhcp_configurations", &self.dhcp_configurations)
            .field("dhcp_options_id", &self.dhcp_options_id)
            .field("owner_id", &self.owner_id)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DirectoryServiceAuthentication {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DirectoryServiceAuthentication")
            .field("directory_id", &self.directory_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DirectoryServiceAuthenticationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DirectoryServiceAuthenticationRequest")
            .field("directory_id", &self.directory_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DisableFastSnapshotRestoreErrorItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableFastSnapshotRestoreErrorItem")
            .field("snapshot_id", &self.snapshot_id)
            .field(
                "fast_snapshot_restore_state_errors",
                &self.fast_snapshot_restore_state_errors,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DisableFastSnapshotRestoreStateError {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableFastSnapshotRestoreStateError")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DisableFastSnapshotRestoreStateErrorItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableFastSnapshotRestoreStateErrorItem")
            .field("availability_zone", &self.availability_zone)
            .field("error", &self.error)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DisableFastSnapshotRestoreSuccessItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableFastSnapshotRestoreSuccessItem")
            .field("snapshot_id", &self.snapshot_id)
            .field("availability_zone", &self.availability_zone)
            .field("state", &self.state)
            .field("state_transition_reason", &self.state_transition_reason)
            .field("owner_id", &self.owner_id)
            .field("owner_alias", &self.owner_alias)
            .field("enabling_time", &self.enabling_time)
            .field("optimizing_time", &self.optimizing_time)
            .field("enabled_time", &self.enabled_time)
            .field("disabling_time", &self.disabling_time)
            .field("disabled_time", &self.disabled_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DiskImage {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DiskImage")
            .field("description", &self.description)
            .field("image", &self.image)
            .field("volume", &self.volume)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DiskImageDescription {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DiskImageDescription")
            .field("checksum", &self.checksum)
            .field("format", &self.format)
            .field("import_manifest_url", &self.import_manifest_url)
            .field("size", &self.size)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DiskImageDetail {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DiskImageDetail")
            .field("bytes", &self.bytes)
            .field("format", &self.format)
            .field("import_manifest_url", &self.import_manifest_url)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DiskImageFormat {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Raw => {
                f.debug_tuple("Raw").finish();
            }
            Self::Vhd => {
                f.debug_tuple("Vhd").finish();
            }
            Self::Vmdk => {
                f.debug_tuple("Vmdk").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::DiskImageVolumeDescription {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DiskImageVolumeDescription")
            .field("id", &self.id)
            .field("size", &self.size)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DiskInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DiskInfo")
            .field("size_in_gb", &self.size_in_gb)
            .field("count", &self.count)
            .field("r#type", &self.r#type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DiskType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Hdd => {
                f.debug_tuple("Hdd").finish();
            }
            Self::Ssd => {
                f.debug_tuple("Ssd").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::DnsEntry {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DnsEntry")
            .field("dns_name", &self.dns_name)
            .field("hosted_zone_id", &self.hosted_zone_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DnsNameState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::PendingVerification => {
                f.debug_tuple("PendingVerification").finish();
            }
            Self::Verified => {
                f.debug_tuple("Verified").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::DnsOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DnsOptions")
            .field("dns_record_ip_type", &self.dns_record_ip_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DnsOptionsSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DnsOptionsSpecification")
            .field("dns_record_ip_type", &self.dns_record_ip_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DnsRecordIpType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Dualstack => {
                f.debug_tuple("Dualstack").finish();
            }
            Self::Ipv4 => {
                f.debug_tuple("Ipv4").finish();
            }
            Self::Ipv6 => {
                f.debug_tuple("Ipv6").finish();
            }
            Self::ServiceDefined => {
                f.debug_tuple("ServiceDefined").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::DnsServersOptionsModifyStructure {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DnsServersOptionsModifyStructure")
            .field("custom_dns_servers", &self.custom_dns_servers)
            .field("enabled", &self.enabled)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::DnsSupportValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disable => {
                f.debug_tuple("Disable").finish();
            }
            Self::Enable => {
                f.debug_tuple("Enable").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::DomainType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Standard => {
                f.debug_tuple("Standard").finish();
            }
            Self::Vpc => {
                f.debug_tuple("Vpc").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::EbsBlockDevice {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EbsBlockDevice")
            .field("delete_on_termination", &self.delete_on_termination)
            .field("iops", &self.iops)
            .field("snapshot_id", &self.snapshot_id)
            .field("volume_size", &self.volume_size)
            .field("volume_type", &self.volume_type)
            .field("kms_key_id", &self.kms_key_id)
            .field("throughput", &self.throughput)
            .field("outpost_arn", &self.outpost_arn)
            .field("encrypted", &self.encrypted)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::EbsEncryptionSupport {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Supported => {
                f.debug_tuple("Supported").finish();
            }
            Self::Unsupported => {
                f.debug_tuple("Unsupported").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::EbsInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EbsInfo")
            .field("ebs_optimized_support", &self.ebs_optimized_support)
            .field("encryption_support", &self.encryption_support)
            .field("ebs_optimized_info", &self.ebs_optimized_info)
            .field("nvme_support", &self.nvme_support)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::EbsInstanceBlockDevice {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EbsInstanceBlockDevice")
            .field("attach_time", &self.attach_time)
            .field("delete_on_termination", &self.delete_on_termination)
            .field("status", &self.status)
            .field("volume_id", &self.volume_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::EbsInstanceBlockDeviceSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EbsInstanceBlockDeviceSpecification")
            .field("delete_on_termination", &self.delete_on_termination)
            .field("volume_id", &self.volume_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::EbsNvmeSupport {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Required => {
                f.debug_tuple("Required").finish();
            }
            Self::Supported => {
                f.debug_tuple("Supported").finish();
            }
            Self::Unsupported => {
                f.debug_tuple("Unsupported").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::EbsOptimizedInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EbsOptimizedInfo")
            .field(
                "baseline_bandwidth_in_mbps",
                &self.baseline_bandwidth_in_mbps,
            )
            .field(
                "baseline_throughput_in_m_bps",
                &self.baseline_throughput_in_m_bps,
            )
            .field("baseline_iops", &self.baseline_iops)
            .field("maximum_bandwidth_in_mbps", &self.maximum_bandwidth_in_mbps)
            .field(
                "maximum_throughput_in_m_bps",
                &self.maximum_throughput_in_m_bps,
            )
            .field("maximum_iops", &self.maximum_iops)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::EbsOptimizedSupport {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Default => {
                f.debug_tuple("Default").finish();
            }
            Self::Supported => {
                f.debug_tuple("Supported").finish();
            }
            Self::Unsupported => {
                f.debug_tuple("Unsupported").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::EfaInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EfaInfo")
            .field("maximum_efa_interfaces", &self.maximum_efa_interfaces)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::EgressOnlyInternetGateway {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EgressOnlyInternetGateway")
            .field("attachments", &self.attachments)
            .field(
                "egress_only_internet_gateway_id",
                &self.egress_only_internet_gateway_id,
            )
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ElasticGpuAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ElasticGpuAssociation")
            .field("elastic_gpu_id", &self.elastic_gpu_id)
            .field(
                "elastic_gpu_association_id",
                &self.elastic_gpu_association_id,
            )
            .field(
                "elastic_gpu_association_state",
                &self.elastic_gpu_association_state,
            )
            .field(
                "elastic_gpu_association_time",
                &self.elastic_gpu_association_time,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ElasticGpuHealth {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ElasticGpuHealth")
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ElasticGpuSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ElasticGpuSpecification")
            .field("r#type", &self.r#type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ElasticGpuSpecificationResponse {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ElasticGpuSpecificationResponse")
            .field("r#type", &self.r#type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ElasticGpuState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Attached => {
                f.debug_tuple("Attached").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ElasticGpuStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Impaired => {
                f.debug_tuple("Impaired").finish();
            }
            Self::Ok => {
                f.debug_tuple("Ok").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ElasticGpus {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ElasticGpus")
            .field("elastic_gpu_id", &self.elastic_gpu_id)
            .field("availability_zone", &self.availability_zone)
            .field("elastic_gpu_type", &self.elastic_gpu_type)
            .field("elastic_gpu_health", &self.elastic_gpu_health)
            .field("elastic_gpu_state", &self.elastic_gpu_state)
            .field("instance_id", &self.instance_id)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ElasticInferenceAccelerator {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ElasticInferenceAccelerator")
            .field("r#type", &self.r#type)
            .field("count", &self.count)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ElasticInferenceAcceleratorAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ElasticInferenceAcceleratorAssociation")
            .field(
                "elastic_inference_accelerator_arn",
                &self.elastic_inference_accelerator_arn,
            )
            .field(
                "elastic_inference_accelerator_association_id",
                &self.elastic_inference_accelerator_association_id,
            )
            .field(
                "elastic_inference_accelerator_association_state",
                &self.elastic_inference_accelerator_association_state,
            )
            .field(
                "elastic_inference_accelerator_association_time",
                &self.elastic_inference_accelerator_association_time,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::EnaSupport {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Required => {
                f.debug_tuple("Required").finish();
            }
            Self::Supported => {
                f.debug_tuple("Supported").finish();
            }
            Self::Unsupported => {
                f.debug_tuple("Unsupported").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::EnableFastSnapshotRestoreErrorItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableFastSnapshotRestoreErrorItem")
            .field("snapshot_id", &self.snapshot_id)
            .field(
                "fast_snapshot_restore_state_errors",
                &self.fast_snapshot_restore_state_errors,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::EnableFastSnapshotRestoreStateError {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableFastSnapshotRestoreStateError")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::EnableFastSnapshotRestoreStateErrorItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableFastSnapshotRestoreStateErrorItem")
            .field("availability_zone", &self.availability_zone)
            .field("error", &self.error)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::EnableFastSnapshotRestoreSuccessItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableFastSnapshotRestoreSuccessItem")
            .field("snapshot_id", &self.snapshot_id)
            .field("availability_zone", &self.availability_zone)
            .field("state", &self.state)
            .field("state_transition_reason", &self.state_transition_reason)
            .field("owner_id", &self.owner_id)
            .field("owner_alias", &self.owner_alias)
            .field("enabling_time", &self.enabling_time)
            .field("optimizing_time", &self.optimizing_time)
            .field("enabled_time", &self.enabled_time)
            .field("disabling_time", &self.disabling_time)
            .field("disabled_time", &self.disabled_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::EnclaveOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnclaveOptions")
            .field("enabled", &self.enabled)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::EnclaveOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnclaveOptionsRequest")
            .field("enabled", &self.enabled)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::EndDateType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Limited => {
                f.debug_tuple("Limited").finish();
            }
            Self::Unlimited => {
                f.debug_tuple("Unlimited").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::EphemeralNvmeSupport {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Required => {
                f.debug_tuple("Required").finish();
            }
            Self::Supported => {
                f.debug_tuple("Supported").finish();
            }
            Self::Unsupported => {
                f.debug_tuple("Unsupported").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::EventCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::InstanceReboot => {
                f.debug_tuple("InstanceReboot").finish();
            }
            Self::InstanceRetirement => {
                f.debug_tuple("InstanceRetirement").finish();
            }
            Self::InstanceStop => {
                f.debug_tuple("InstanceStop").finish();
            }
            Self::SystemMaintenance => {
                f.debug_tuple("SystemMaintenance").finish();
            }
            Self::SystemReboot => {
                f.debug_tuple("SystemReboot").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::EventInformation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EventInformation")
            .field("event_description", &self.event_description)
            .field("event_sub_type", &self.event_sub_type)
            .field("instance_id", &self.instance_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::EventType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Error => {
                f.debug_tuple("Error").finish();
            }
            Self::BatchChange => {
                f.debug_tuple("BatchChange").finish();
            }
            Self::Information => {
                f.debug_tuple("Information").finish();
            }
            Self::InstanceChange => {
                f.debug_tuple("InstanceChange").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ExcessCapacityTerminationPolicy {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Default => {
                f.debug_tuple("Default").finish();
            }
            Self::NoTermination => {
                f.debug_tuple("NoTermination").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::Explanation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Explanation")
            .field("acl", &self.acl)
            .field("acl_rule", &self.acl_rule)
            .field("address", &self.address)
            .field("addresses", &self.addresses)
            .field("attached_to", &self.attached_to)
            .field("availability_zones", &self.availability_zones)
            .field("cidrs", &self.cidrs)
            .field("component", &self.component)
            .field("customer_gateway", &self.customer_gateway)
            .field("destination", &self.destination)
            .field("destination_vpc", &self.destination_vpc)
            .field("direction", &self.direction)
            .field("explanation_code", &self.explanation_code)
            .field("ingress_route_table", &self.ingress_route_table)
            .field("internet_gateway", &self.internet_gateway)
            .field("load_balancer_arn", &self.load_balancer_arn)
            .field(
                "classic_load_balancer_listener",
                &self.classic_load_balancer_listener,
            )
            .field(
                "load_balancer_listener_port",
                &self.load_balancer_listener_port,
            )
            .field("load_balancer_target", &self.load_balancer_target)
            .field(
                "load_balancer_target_group",
                &self.load_balancer_target_group,
            )
            .field(
                "load_balancer_target_groups",
                &self.load_balancer_target_groups,
            )
            .field("load_balancer_target_port", &self.load_balancer_target_port)
            .field(
                "elastic_load_balancer_listener",
                &self.elastic_load_balancer_listener,
            )
            .field("missing_component", &self.missing_component)
            .field("nat_gateway", &self.nat_gateway)
            .field("network_interface", &self.network_interface)
            .field("packet_field", &self.packet_field)
            .field("vpc_peering_connection", &self.vpc_peering_connection)
            .field("port", &self.port)
            .field("port_ranges", &self.port_ranges)
            .field("prefix_list", &self.prefix_list)
            .field("protocols", &self.protocols)
            .field("route_table_route", &self.route_table_route)
            .field("route_table", &self.route_table)
            .field("security_group", &self.security_group)
            .field("security_group_rule", &self.security_group_rule)
            .field("security_groups", &self.security_groups)
            .field("source_vpc", &self.source_vpc)
            .field("state", &self.state)
            .field("subnet", &self.subnet)
            .field("subnet_route_table", &self.subnet_route_table)
            .field("vpc", &self.vpc)
            .field("vpc_endpoint", &self.vpc_endpoint)
            .field("vpn_connection", &self.vpn_connection)
            .field("vpn_gateway", &self.vpn_gateway)
            .field("transit_gateway", &self.transit_gateway)
            .field(
                "transit_gateway_route_table",
                &self.transit_gateway_route_table,
            )
            .field(
                "transit_gateway_route_table_route",
                &self.transit_gateway_route_table_route,
            )
            .field(
                "transit_gateway_attachment",
                &self.transit_gateway_attachment,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ExportEnvironment {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Citrix => {
                f.debug_tuple("Citrix").finish();
            }
            Self::Microsoft => {
                f.debug_tuple("Microsoft").finish();
            }
            Self::Vmware => {
                f.debug_tuple("Vmware").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ExportImageTask {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ExportImageTask")
            .field("description", &self.description)
            .field("export_image_task_id", &self.export_image_task_id)
            .field("image_id", &self.image_id)
            .field("progress", &self.progress)
            .field("s3_export_location", &self.s3_export_location)
            .field("status", &self.status)
            .field("status_message", &self.status_message)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ExportTask {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ExportTask")
            .field("description", &self.description)
            .field("export_task_id", &self.export_task_id)
            .field("export_to_s3_task", &self.export_to_s3_task)
            .field("instance_export_details", &self.instance_export_details)
            .field("state", &self.state)
            .field("status_message", &self.status_message)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ExportTaskS3Location {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ExportTaskS3Location")
            .field("s3_bucket", &self.s3_bucket)
            .field("s3_prefix", &self.s3_prefix)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ExportTaskS3LocationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ExportTaskS3LocationRequest")
            .field("s3_bucket", &self.s3_bucket)
            .field("s3_prefix", &self.s3_prefix)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ExportTaskState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Cancelled => {
                f.debug_tuple("Cancelled").finish();
            }
            Self::Cancelling => {
                f.debug_tuple("Cancelling").finish();
            }
            Self::Completed => {
                f.debug_tuple("Completed").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ExportToS3Task {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ExportToS3Task")
            .field("container_format", &self.container_format)
            .field("disk_image_format", &self.disk_image_format)
            .field("s3_bucket", &self.s3_bucket)
            .field("s3_key", &self.s3_key)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ExportToS3TaskSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ExportToS3TaskSpecification")
            .field("container_format", &self.container_format)
            .field("disk_image_format", &self.disk_image_format)
            .field("s3_bucket", &self.s3_bucket)
            .field("s3_prefix", &self.s3_prefix)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FailedCapacityReservationFleetCancellationResult {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FailedCapacityReservationFleetCancellationResult")
            .field(
                "capacity_reservation_fleet_id",
                &self.capacity_reservation_fleet_id,
            )
            .field(
                "cancel_capacity_reservation_fleet_error",
                &self.cancel_capacity_reservation_fleet_error,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FailedQueuedPurchaseDeletion {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FailedQueuedPurchaseDeletion")
            .field("error", &self.error)
            .field("reserved_instances_id", &self.reserved_instances_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FastLaunchLaunchTemplateSpecificationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FastLaunchLaunchTemplateSpecificationRequest")
            .field("launch_template_id", &self.launch_template_id)
            .field("launch_template_name", &self.launch_template_name)
            .field("version", &self.version)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FastLaunchLaunchTemplateSpecificationResponse {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FastLaunchLaunchTemplateSpecificationResponse")
            .field("launch_template_id", &self.launch_template_id)
            .field("launch_template_name", &self.launch_template_name)
            .field("version", &self.version)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FastLaunchResourceType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Snapshot => {
                f.debug_tuple("Snapshot").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FastLaunchSnapshotConfigurationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FastLaunchSnapshotConfigurationRequest")
            .field("target_resource_count", &self.target_resource_count)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FastLaunchSnapshotConfigurationResponse {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FastLaunchSnapshotConfigurationResponse")
            .field("target_resource_count", &self.target_resource_count)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FastLaunchStateCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disabling => {
                f.debug_tuple("Disabling").finish();
            }
            Self::DisablingFailed => {
                f.debug_tuple("DisablingFailed").finish();
            }
            Self::Enabled => {
                f.debug_tuple("Enabled").finish();
            }
            Self::EnabledFailed => {
                f.debug_tuple("EnabledFailed").finish();
            }
            Self::Enabling => {
                f.debug_tuple("Enabling").finish();
            }
            Self::EnablingFailed => {
                f.debug_tuple("EnablingFailed").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FastSnapshotRestoreStateCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disabled => {
                f.debug_tuple("Disabled").finish();
            }
            Self::Disabling => {
                f.debug_tuple("Disabling").finish();
            }
            Self::Enabled => {
                f.debug_tuple("Enabled").finish();
            }
            Self::Enabling => {
                f.debug_tuple("Enabling").finish();
            }
            Self::Optimizing => {
                f.debug_tuple("Optimizing").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FederatedAuthentication {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FederatedAuthentication")
            .field("saml_provider_arn", &self.saml_provider_arn)
            .field(
                "self_service_saml_provider_arn",
                &self.self_service_saml_provider_arn,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FederatedAuthenticationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FederatedAuthenticationRequest")
            .field("saml_provider_arn", &self.saml_provider_arn)
            .field(
                "self_service_saml_provider_arn",
                &self.self_service_saml_provider_arn,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Filter {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Filter")
            .field("name", &self.name)
            .field("values", &self.values)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FindingsFound {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::False => {
                f.debug_tuple("False").finish();
            }
            Self::True => {
                f.debug_tuple("True").finish();
            }
            Self::UnknownValue => {
                f.debug_tuple("UnknownValue").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetActivityStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Error => {
                f.debug_tuple("Error").finish();
            }
            Self::Fulfilled => {
                f.debug_tuple("Fulfilled").finish();
            }
            Self::PendingFulfillment => {
                f.debug_tuple("PendingFulfillment").finish();
            }
            Self::PendingTermination => {
                f.debug_tuple("PendingTermination").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetCapacityReservation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FleetCapacityReservation")
            .field("capacity_reservation_id", &self.capacity_reservation_id)
            .field("availability_zone_id", &self.availability_zone_id)
            .field("instance_type", &self.instance_type)
            .field("instance_platform", &self.instance_platform)
            .field("availability_zone", &self.availability_zone)
            .field("total_instance_count", &self.total_instance_count)
            .field("fulfilled_capacity", &self.fulfilled_capacity)
            .field("ebs_optimized", &self.ebs_optimized)
            .field("create_date", &self.create_date)
            .field("weight", &self.weight)
            .field("priority", &self.priority)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetCapacityReservationTenancy {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Default => {
                f.debug_tuple("Default").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetCapacityReservationUsageStrategy {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::UseCapacityReservationsFirst => {
                f.debug_tuple("UseCapacityReservationsFirst").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetData {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FleetData")
            .field("activity_status", &self.activity_status)
            .field("create_time", &self.create_time)
            .field("fleet_id", &self.fleet_id)
            .field("fleet_state", &self.fleet_state)
            .field("client_token", &self.client_token)
            .field(
                "excess_capacity_termination_policy",
                &self.excess_capacity_termination_policy,
            )
            .field("fulfilled_capacity", &self.fulfilled_capacity)
            .field(
                "fulfilled_on_demand_capacity",
                &self.fulfilled_on_demand_capacity,
            )
            .field("launch_template_configs", &self.launch_template_configs)
            .field(
                "target_capacity_specification",
                &self.target_capacity_specification,
            )
            .field(
                "terminate_instances_with_expiration",
                &self.terminate_instances_with_expiration,
            )
            .field("r#type", &self.r#type)
            .field("valid_from", &self.valid_from)
            .field("valid_until", &self.valid_until)
            .field(
                "replace_unhealthy_instances",
                &self.replace_unhealthy_instances,
            )
            .field("spot_options", &self.spot_options)
            .field("on_demand_options", &self.on_demand_options)
            .field("tags", &self.tags)
            .field("errors", &self.errors)
            .field("instances", &self.instances)
            .field("context", &self.context)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetEventType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::FleetChange => {
                f.debug_tuple("FleetChange").finish();
            }
            Self::InstanceChange => {
                f.debug_tuple("InstanceChange").finish();
            }
            Self::ServiceError => {
                f.debug_tuple("ServiceError").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetExcessCapacityTerminationPolicy {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::NoTermination => {
                f.debug_tuple("NoTermination").finish();
            }
            Self::Termination => {
                f.debug_tuple("Termination").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetInstanceMatchCriteria {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Open => {
                f.debug_tuple("Open").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetLaunchTemplateConfig {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FleetLaunchTemplateConfig")
            .field(
                "launch_template_specification",
                &self.launch_template_specification,
            )
            .field("overrides", &self.overrides)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetLaunchTemplateConfigRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FleetLaunchTemplateConfigRequest")
            .field(
                "launch_template_specification",
                &self.launch_template_specification,
            )
            .field("overrides", &self.overrides)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetLaunchTemplateOverrides {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FleetLaunchTemplateOverrides")
            .field("instance_type", &self.instance_type)
            .field("max_price", &self.max_price)
            .field("subnet_id", &self.subnet_id)
            .field("availability_zone", &self.availability_zone)
            .field("weighted_capacity", &self.weighted_capacity)
            .field("priority", &self.priority)
            .field("placement", &self.placement)
            .field("instance_requirements", &self.instance_requirements)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetLaunchTemplateOverridesRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FleetLaunchTemplateOverridesRequest")
            .field("instance_type", &self.instance_type)
            .field("max_price", &self.max_price)
            .field("subnet_id", &self.subnet_id)
            .field("availability_zone", &self.availability_zone)
            .field("weighted_capacity", &self.weighted_capacity)
            .field("priority", &self.priority)
            .field("placement", &self.placement)
            .field("instance_requirements", &self.instance_requirements)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetLaunchTemplateSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FleetLaunchTemplateSpecification")
            .field("launch_template_id", &self.launch_template_id)
            .field("launch_template_name", &self.launch_template_name)
            .field("version", &self.version)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetLaunchTemplateSpecificationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FleetLaunchTemplateSpecificationRequest")
            .field("launch_template_id", &self.launch_template_id)
            .field("launch_template_name", &self.launch_template_name)
            .field("version", &self.version)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetOnDemandAllocationStrategy {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::LowestPrice => {
                f.debug_tuple("LowestPrice").finish();
            }
            Self::Prioritized => {
                f.debug_tuple("Prioritized").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetReplacementStrategy {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Launch => {
                f.debug_tuple("Launch").finish();
            }
            Self::LaunchBeforeTerminate => {
                f.debug_tuple("LaunchBeforeTerminate").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetSpotCapacityRebalance {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FleetSpotCapacityRebalance")
            .field("replacement_strategy", &self.replacement_strategy)
            .field("termination_delay", &self.termination_delay)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetSpotCapacityRebalanceRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FleetSpotCapacityRebalanceRequest")
            .field("replacement_strategy", &self.replacement_strategy)
            .field("termination_delay", &self.termination_delay)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetSpotMaintenanceStrategies {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FleetSpotMaintenanceStrategies")
            .field("capacity_rebalance", &self.capacity_rebalance)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetSpotMaintenanceStrategiesRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FleetSpotMaintenanceStrategiesRequest")
            .field("capacity_rebalance", &self.capacity_rebalance)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetStateCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::DeletedRunning => {
                f.debug_tuple("DeletedRunning").finish();
            }
            Self::DeletedTerminatingInstances => {
                f.debug_tuple("DeletedTerminatingInstances").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Modifying => {
                f.debug_tuple("Modifying").finish();
            }
            Self::Submitted => {
                f.debug_tuple("Submitted").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FleetType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Instant => {
                f.debug_tuple("Instant").finish();
            }
            Self::Maintain => {
                f.debug_tuple("Maintain").finish();
            }
            Self::Request => {
                f.debug_tuple("Request").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FlowLog {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FlowLog")
            .field("creation_time", &self.creation_time)
            .field(
                "deliver_logs_error_message",
                &self.deliver_logs_error_message,
            )
            .field(
                "deliver_logs_permission_arn",
                &self.deliver_logs_permission_arn,
            )
            .field("deliver_logs_status", &self.deliver_logs_status)
            .field("flow_log_id", &self.flow_log_id)
            .field("flow_log_status", &self.flow_log_status)
            .field("log_group_name", &self.log_group_name)
            .field("resource_id", &self.resource_id)
            .field("traffic_type", &self.traffic_type)
            .field("log_destination_type", &self.log_destination_type)
            .field("log_destination", &self.log_destination)
            .field("log_format", &self.log_format)
            .field("tags", &self.tags)
            .field("max_aggregation_interval", &self.max_aggregation_interval)
            .field("destination_options", &self.destination_options)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FlowLogsResourceType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::NetworkInterface => {
                f.debug_tuple("NetworkInterface").finish();
            }
            Self::Subnet => {
                f.debug_tuple("Subnet").finish();
            }
            Self::Vpc => {
                f.debug_tuple("Vpc").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FpgaDeviceInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FpgaDeviceInfo")
            .field("name", &self.name)
            .field("manufacturer", &self.manufacturer)
            .field("count", &self.count)
            .field("memory_info", &self.memory_info)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FpgaDeviceMemoryInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FpgaDeviceMemoryInfo")
            .field("size_in_mi_b", &self.size_in_mi_b)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FpgaImage {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FpgaImage")
            .field("fpga_image_id", &self.fpga_image_id)
            .field("fpga_image_global_id", &self.fpga_image_global_id)
            .field("name", &self.name)
            .field("description", &self.description)
            .field("shell_version", &self.shell_version)
            .field("pci_id", &self.pci_id)
            .field("state", &self.state)
            .field("create_time", &self.create_time)
            .field("update_time", &self.update_time)
            .field("owner_id", &self.owner_id)
            .field("owner_alias", &self.owner_alias)
            .field("product_codes", &self.product_codes)
            .field("tags", &self.tags)
            .field("public", &self.public)
            .field("data_retention_support", &self.data_retention_support)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FpgaImageAttribute {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FpgaImageAttribute")
            .field("fpga_image_id", &self.fpga_image_id)
            .field("name", &self.name)
            .field("description", &self.description)
            .field("load_permissions", &self.load_permissions)
            .field("product_codes", &self.product_codes)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FpgaImageAttributeName {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Description => {
                f.debug_tuple("Description").finish();
            }
            Self::LoadPermission => {
                f.debug_tuple("LoadPermission").finish();
            }
            Self::Name => {
                f.debug_tuple("Name").finish();
            }
            Self::ProductCodes => {
                f.debug_tuple("ProductCodes").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FpgaImageState {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FpgaImageState")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::FpgaImageStateCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unavailable => {
                f.debug_tuple("Unavailable").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::FpgaInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("FpgaInfo")
            .field("fpgas", &self.fpgas)
            .field("total_fpga_memory_in_mi_b", &self.total_fpga_memory_in_mi_b)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::GatewayAssociationState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Associated => {
                f.debug_tuple("Associated").finish();
            }
            Self::Associating => {
                f.debug_tuple("Associating").finish();
            }
            Self::Disassociating => {
                f.debug_tuple("Disassociating").finish();
            }
            Self::NotAssociated => {
                f.debug_tuple("NotAssociated").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::GatewayType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Ipsec1 => {
                f.debug_tuple("Ipsec1").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::GpuDeviceInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GpuDeviceInfo")
            .field("name", &self.name)
            .field("manufacturer", &self.manufacturer)
            .field("count", &self.count)
            .field("memory_info", &self.memory_info)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::GpuDeviceMemoryInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GpuDeviceMemoryInfo")
            .field("size_in_mi_b", &self.size_in_mi_b)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::GpuInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GpuInfo")
            .field("gpus", &self.gpus)
            .field("total_gpu_memory_in_mi_b", &self.total_gpu_memory_in_mi_b)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::GroupIdentifier {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GroupIdentifier")
            .field("group_name", &self.group_name)
            .field("group_id", &self.group_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::HibernationOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("HibernationOptions")
            .field("configured", &self.configured)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::HibernationOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("HibernationOptionsRequest")
            .field("configured", &self.configured)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::HistoryRecord {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("HistoryRecord")
            .field("event_information", &self.event_information)
            .field("event_type", &self.event_type)
            .field("timestamp", &self.timestamp)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::HistoryRecordEntry {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("HistoryRecordEntry")
            .field("event_information", &self.event_information)
            .field("event_type", &self.event_type)
            .field("timestamp", &self.timestamp)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Host {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Host")
            .field("auto_placement", &self.auto_placement)
            .field("availability_zone", &self.availability_zone)
            .field("available_capacity", &self.available_capacity)
            .field("client_token", &self.client_token)
            .field("host_id", &self.host_id)
            .field("host_properties", &self.host_properties)
            .field("host_reservation_id", &self.host_reservation_id)
            .field("instances", &self.instances)
            .field("state", &self.state)
            .field("allocation_time", &self.allocation_time)
            .field("release_time", &self.release_time)
            .field("tags", &self.tags)
            .field("host_recovery", &self.host_recovery)
            .field(
                "allows_multiple_instance_types",
                &self.allows_multiple_instance_types,
            )
            .field("owner_id", &self.owner_id)
            .field("availability_zone_id", &self.availability_zone_id)
            .field(
                "member_of_service_linked_resource_group",
                &self.member_of_service_linked_resource_group,
            )
            .field("outpost_arn", &self.outpost_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::HostInstance {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("HostInstance")
            .field("instance_id", &self.instance_id)
            .field("instance_type", &self.instance_type)
            .field("owner_id", &self.owner_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::HostOffering {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("HostOffering")
            .field("currency_code", &self.currency_code)
            .field("duration", &self.duration)
            .field("hourly_price", &self.hourly_price)
            .field("instance_family", &self.instance_family)
            .field("offering_id", &self.offering_id)
            .field("payment_option", &self.payment_option)
            .field("upfront_price", &self.upfront_price)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::HostProperties {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("HostProperties")
            .field("cores", &self.cores)
            .field("instance_type", &self.instance_type)
            .field("instance_family", &self.instance_family)
            .field("sockets", &self.sockets)
            .field("total_v_cpus", &self.total_v_cpus)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::HostRecovery {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Off => {
                f.debug_tuple("Off").finish();
            }
            Self::On => {
                f.debug_tuple("On").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::HostReservation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("HostReservation")
            .field("count", &self.count)
            .field("currency_code", &self.currency_code)
            .field("duration", &self.duration)
            .field("end", &self.end)
            .field("host_id_set", &self.host_id_set)
            .field("host_reservation_id", &self.host_reservation_id)
            .field("hourly_price", &self.hourly_price)
            .field("instance_family", &self.instance_family)
            .field("offering_id", &self.offering_id)
            .field("payment_option", &self.payment_option)
            .field("start", &self.start)
            .field("state", &self.state)
            .field("upfront_price", &self.upfront_price)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::HostTenancy {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Dedicated => {
                f.debug_tuple("Dedicated").finish();
            }
            Self::Host => {
                f.debug_tuple("Host").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::HostnameType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::IpName => {
                f.debug_tuple("IpName").finish();
            }
            Self::ResourceName => {
                f.debug_tuple("ResourceName").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::HttpTokensState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Optional => {
                f.debug_tuple("Optional").finish();
            }
            Self::Required => {
                f.debug_tuple("Required").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::HypervisorType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Ovm => {
                f.debug_tuple("Ovm").finish();
            }
            Self::Xen => {
                f.debug_tuple("Xen").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::IamInstanceProfile {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IamInstanceProfile")
            .field("arn", &self.arn)
            .field("id", &self.id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IamInstanceProfileAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IamInstanceProfileAssociation")
            .field("association_id", &self.association_id)
            .field("instance_id", &self.instance_id)
            .field("iam_instance_profile", &self.iam_instance_profile)
            .field("state", &self.state)
            .field("timestamp", &self.timestamp)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IamInstanceProfileAssociationState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Associated => {
                f.debug_tuple("Associated").finish();
            }
            Self::Associating => {
                f.debug_tuple("Associating").finish();
            }
            Self::Disassociated => {
                f.debug_tuple("Disassociated").finish();
            }
            Self::Disassociating => {
                f.debug_tuple("Disassociating").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::IamInstanceProfileSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IamInstanceProfileSpecification")
            .field("arn", &self.arn)
            .field("name", &self.name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IcmpTypeCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IcmpTypeCode")
            .field("code", &self.code)
            .field("r#type", &self.r#type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IdFormat {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IdFormat")
            .field("deadline", &self.deadline)
            .field("resource", &self.resource)
            .field("use_long_ids", &self.use_long_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Igmpv2SupportValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disable => {
                f.debug_tuple("Disable").finish();
            }
            Self::Enable => {
                f.debug_tuple("Enable").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::IkeVersionsListValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IkeVersionsListValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IkeVersionsRequestListValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IkeVersionsRequestListValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Image {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Image")
            .field("architecture", &self.architecture)
            .field("creation_date", &self.creation_date)
            .field("image_id", &self.image_id)
            .field("image_location", &self.image_location)
            .field("image_type", &self.image_type)
            .field("public", &self.public)
            .field("kernel_id", &self.kernel_id)
            .field("owner_id", &self.owner_id)
            .field("platform", &self.platform)
            .field("platform_details", &self.platform_details)
            .field("usage_operation", &self.usage_operation)
            .field("product_codes", &self.product_codes)
            .field("ramdisk_id", &self.ramdisk_id)
            .field("state", &self.state)
            .field("block_device_mappings", &self.block_device_mappings)
            .field("description", &self.description)
            .field("ena_support", &self.ena_support)
            .field("hypervisor", &self.hypervisor)
            .field("image_owner_alias", &self.image_owner_alias)
            .field("name", &self.name)
            .field("root_device_name", &self.root_device_name)
            .field("root_device_type", &self.root_device_type)
            .field("sriov_net_support", &self.sriov_net_support)
            .field("state_reason", &self.state_reason)
            .field("tags", &self.tags)
            .field("virtualization_type", &self.virtualization_type)
            .field("boot_mode", &self.boot_mode)
            .field("tpm_support", &self.tpm_support)
            .field("deprecation_time", &self.deprecation_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ImageAttributeName {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::BlockDeviceMapping => {
                f.debug_tuple("BlockDeviceMapping").finish();
            }
            Self::BootMode => {
                f.debug_tuple("BootMode").finish();
            }
            Self::Description => {
                f.debug_tuple("Description").finish();
            }
            Self::Kernel => {
                f.debug_tuple("Kernel").finish();
            }
            Self::LastLaunchedTime => {
                f.debug_tuple("LastLaunchedTime").finish();
            }
            Self::LaunchPermission => {
                f.debug_tuple("LaunchPermission").finish();
            }
            Self::ProductCodes => {
                f.debug_tuple("ProductCodes").finish();
            }
            Self::Ramdisk => {
                f.debug_tuple("Ramdisk").finish();
            }
            Self::SriovNetSupport => {
                f.debug_tuple("SriovNetSupport").finish();
            }
            Self::TpmSupport => {
                f.debug_tuple("TpmSupport").finish();
            }
            Self::UefiData => {
                f.debug_tuple("UefiData").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ImageDiskContainer {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImageDiskContainer")
            .field("description", &self.description)
            .field("device_name", &self.device_name)
            .field("format", &self.format)
            .field("snapshot_id", &self.snapshot_id)
            .field("url", &self.url)
            .field("user_bucket", &self.user_bucket)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ImageRecycleBinInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImageRecycleBinInfo")
            .field("image_id", &self.image_id)
            .field("name", &self.name)
            .field("description", &self.description)
            .field("recycle_bin_enter_time", &self.recycle_bin_enter_time)
            .field("recycle_bin_exit_time", &self.recycle_bin_exit_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ImageState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Deregistered => {
                f.debug_tuple("Deregistered").finish();
            }
            Self::Error => {
                f.debug_tuple("Error").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Invalid => {
                f.debug_tuple("Invalid").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Transient => {
                f.debug_tuple("Transient").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ImageTypeValues {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Kernel => {
                f.debug_tuple("Kernel").finish();
            }
            Self::Machine => {
                f.debug_tuple("Machine").finish();
            }
            Self::Ramdisk => {
                f.debug_tuple("Ramdisk").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ImportImageLicenseConfigurationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportImageLicenseConfigurationRequest")
            .field("license_configuration_arn", &self.license_configuration_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ImportImageLicenseConfigurationResponse {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportImageLicenseConfigurationResponse")
            .field("license_configuration_arn", &self.license_configuration_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ImportImageTask {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportImageTask")
            .field("architecture", &self.architecture)
            .field("description", &self.description)
            .field("encrypted", &self.encrypted)
            .field("hypervisor", &self.hypervisor)
            .field("image_id", &self.image_id)
            .field("import_task_id", &self.import_task_id)
            .field("kms_key_id", &self.kms_key_id)
            .field("license_type", &self.license_type)
            .field("platform", &self.platform)
            .field("progress", &self.progress)
            .field("snapshot_details", &self.snapshot_details)
            .field("status", &self.status)
            .field("status_message", &self.status_message)
            .field("tags", &self.tags)
            .field("license_specifications", &self.license_specifications)
            .field("usage_operation", &self.usage_operation)
            .field("boot_mode", &self.boot_mode)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ImportInstanceLaunchSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportInstanceLaunchSpecification")
            .field("additional_info", &self.additional_info)
            .field("architecture", &self.architecture)
            .field("group_ids", &self.group_ids)
            .field("group_names", &self.group_names)
            .field(
                "instance_initiated_shutdown_behavior",
                &self.instance_initiated_shutdown_behavior,
            )
            .field("instance_type", &self.instance_type)
            .field("monitoring", &self.monitoring)
            .field("placement", &self.placement)
            .field("private_ip_address", &self.private_ip_address)
            .field("subnet_id", &self.subnet_id)
            .field("user_data", &self.user_data)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ImportInstanceTaskDetails {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportInstanceTaskDetails")
            .field("description", &self.description)
            .field("instance_id", &self.instance_id)
            .field("platform", &self.platform)
            .field("volumes", &self.volumes)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ImportInstanceVolumeDetailItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportInstanceVolumeDetailItem")
            .field("availability_zone", &self.availability_zone)
            .field("bytes_converted", &self.bytes_converted)
            .field("description", &self.description)
            .field("image", &self.image)
            .field("status", &self.status)
            .field("status_message", &self.status_message)
            .field("volume", &self.volume)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ImportSnapshotTask {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportSnapshotTask")
            .field("description", &self.description)
            .field("import_task_id", &self.import_task_id)
            .field("snapshot_task_detail", &self.snapshot_task_detail)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ImportVolumeTaskDetails {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportVolumeTaskDetails")
            .field("availability_zone", &self.availability_zone)
            .field("bytes_converted", &self.bytes_converted)
            .field("description", &self.description)
            .field("image", &self.image)
            .field("volume", &self.volume)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InferenceAcceleratorInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InferenceAcceleratorInfo")
            .field("accelerators", &self.accelerators)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InferenceDeviceInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InferenceDeviceInfo")
            .field("count", &self.count)
            .field("name", &self.name)
            .field("manufacturer", &self.manufacturer)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Instance {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Instance")
            .field("ami_launch_index", &self.ami_launch_index)
            .field("image_id", &self.image_id)
            .field("instance_id", &self.instance_id)
            .field("instance_type", &self.instance_type)
            .field("kernel_id", &self.kernel_id)
            .field("key_name", &self.key_name)
            .field("launch_time", &self.launch_time)
            .field("monitoring", &self.monitoring)
            .field("placement", &self.placement)
            .field("platform", &self.platform)
            .field("private_dns_name", &self.private_dns_name)
            .field("private_ip_address", &self.private_ip_address)
            .field("product_codes", &self.product_codes)
            .field("public_dns_name", &self.public_dns_name)
            .field("public_ip_address", &self.public_ip_address)
            .field("ramdisk_id", &self.ramdisk_id)
            .field("state", &self.state)
            .field("state_transition_reason", &self.state_transition_reason)
            .field("subnet_id", &self.subnet_id)
            .field("vpc_id", &self.vpc_id)
            .field("architecture", &self.architecture)
            .field("block_device_mappings", &self.block_device_mappings)
            .field("client_token", &self.client_token)
            .field("ebs_optimized", &self.ebs_optimized)
            .field("ena_support", &self.ena_support)
            .field("hypervisor", &self.hypervisor)
            .field("iam_instance_profile", &self.iam_instance_profile)
            .field("instance_lifecycle", &self.instance_lifecycle)
            .field("elastic_gpu_associations", &self.elastic_gpu_associations)
            .field(
                "elastic_inference_accelerator_associations",
                &self.elastic_inference_accelerator_associations,
            )
            .field("network_interfaces", &self.network_interfaces)
            .field("outpost_arn", &self.outpost_arn)
            .field("root_device_name", &self.root_device_name)
            .field("root_device_type", &self.root_device_type)
            .field("security_groups", &self.security_groups)
            .field("source_dest_check", &self.source_dest_check)
            .field("spot_instance_request_id", &self.spot_instance_request_id)
            .field("sriov_net_support", &self.sriov_net_support)
            .field("state_reason", &self.state_reason)
            .field("tags", &self.tags)
            .field("virtualization_type", &self.virtualization_type)
            .field("cpu_options", &self.cpu_options)
            .field("capacity_reservation_id", &self.capacity_reservation_id)
            .field(
                "capacity_reservation_specification",
                &self.capacity_reservation_specification,
            )
            .field("hibernation_options", &self.hibernation_options)
            .field("licenses", &self.licenses)
            .field("metadata_options", &self.metadata_options)
            .field("enclave_options", &self.enclave_options)
            .field("boot_mode", &self.boot_mode)
            .field("platform_details", &self.platform_details)
            .field("usage_operation", &self.usage_operation)
            .field(
                "usage_operation_update_time",
                &self.usage_operation_update_time,
            )
            .field("private_dns_name_options", &self.private_dns_name_options)
            .field("ipv6_address", &self.ipv6_address)
            .field("tpm_support", &self.tpm_support)
            .field("maintenance_options", &self.maintenance_options)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceAttributeName {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::BlockDeviceMapping => {
                f.debug_tuple("BlockDeviceMapping").finish();
            }
            Self::DisableApiStop => {
                f.debug_tuple("DisableApiStop").finish();
            }
            Self::DisableApiTermination => {
                f.debug_tuple("DisableApiTermination").finish();
            }
            Self::EbsOptimized => {
                f.debug_tuple("EbsOptimized").finish();
            }
            Self::EnaSupport => {
                f.debug_tuple("EnaSupport").finish();
            }
            Self::EnclaveOptions => {
                f.debug_tuple("EnclaveOptions").finish();
            }
            Self::GroupSet => {
                f.debug_tuple("GroupSet").finish();
            }
            Self::InstanceInitiatedShutdownBehavior => {
                f.debug_tuple("InstanceInitiatedShutdownBehavior").finish();
            }
            Self::InstanceType => {
                f.debug_tuple("InstanceType").finish();
            }
            Self::Kernel => {
                f.debug_tuple("Kernel").finish();
            }
            Self::ProductCodes => {
                f.debug_tuple("ProductCodes").finish();
            }
            Self::Ramdisk => {
                f.debug_tuple("Ramdisk").finish();
            }
            Self::RootDeviceName => {
                f.debug_tuple("RootDeviceName").finish();
            }
            Self::SourceDestCheck => {
                f.debug_tuple("SourceDestCheck").finish();
            }
            Self::SriovNetSupport => {
                f.debug_tuple("SriovNetSupport").finish();
            }
            Self::UserData => {
                f.debug_tuple("UserData").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceAutoRecoveryState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Default => {
                f.debug_tuple("Default").finish();
            }
            Self::Disabled => {
                f.debug_tuple("Disabled").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceBlockDeviceMapping {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceBlockDeviceMapping")
            .field("device_name", &self.device_name)
            .field("ebs", &self.ebs)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceBlockDeviceMappingSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceBlockDeviceMappingSpecification")
            .field("device_name", &self.device_name)
            .field("ebs", &self.ebs)
            .field("no_device", &self.no_device)
            .field("virtual_name", &self.virtual_name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceCapacity {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceCapacity")
            .field("available_capacity", &self.available_capacity)
            .field("instance_type", &self.instance_type)
            .field("total_capacity", &self.total_capacity)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceCount {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceCount")
            .field("instance_count", &self.instance_count)
            .field("state", &self.state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceCreditSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceCreditSpecification")
            .field("instance_id", &self.instance_id)
            .field("cpu_credits", &self.cpu_credits)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceCreditSpecificationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceCreditSpecificationRequest")
            .field("instance_id", &self.instance_id)
            .field("cpu_credits", &self.cpu_credits)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceEventWindow {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceEventWindow")
            .field("instance_event_window_id", &self.instance_event_window_id)
            .field("time_ranges", &self.time_ranges)
            .field("name", &self.name)
            .field("cron_expression", &self.cron_expression)
            .field("association_target", &self.association_target)
            .field("state", &self.state)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceEventWindowAssociationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceEventWindowAssociationRequest")
            .field("instance_ids", &self.instance_ids)
            .field("instance_tags", &self.instance_tags)
            .field("dedicated_host_ids", &self.dedicated_host_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceEventWindowAssociationTarget {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceEventWindowAssociationTarget")
            .field("instance_ids", &self.instance_ids)
            .field("tags", &self.tags)
            .field("dedicated_host_ids", &self.dedicated_host_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceEventWindowDisassociationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceEventWindowDisassociationRequest")
            .field("instance_ids", &self.instance_ids)
            .field("instance_tags", &self.instance_tags)
            .field("dedicated_host_ids", &self.dedicated_host_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceEventWindowState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Creating => {
                f.debug_tuple("Creating").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceEventWindowStateChange {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceEventWindowStateChange")
            .field("instance_event_window_id", &self.instance_event_window_id)
            .field("state", &self.state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceEventWindowTimeRange {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceEventWindowTimeRange")
            .field("start_week_day", &self.start_week_day)
            .field("start_hour", &self.start_hour)
            .field("end_week_day", &self.end_week_day)
            .field("end_hour", &self.end_hour)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceEventWindowTimeRangeRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceEventWindowTimeRangeRequest")
            .field("start_week_day", &self.start_week_day)
            .field("start_hour", &self.start_hour)
            .field("end_week_day", &self.end_week_day)
            .field("end_hour", &self.end_hour)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceExportDetails {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceExportDetails")
            .field("instance_id", &self.instance_id)
            .field("target_environment", &self.target_environment)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceFamilyCreditSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceFamilyCreditSpecification")
            .field("instance_family", &self.instance_family)
            .field("cpu_credits", &self.cpu_credits)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceGeneration {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Current => {
                f.debug_tuple("Current").finish();
            }
            Self::Previous => {
                f.debug_tuple("Previous").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceHealthStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::HealthyStatus => {
                f.debug_tuple("HealthyStatus").finish();
            }
            Self::UnhealthyStatus => {
                f.debug_tuple("UnhealthyStatus").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceInterruptionBehavior {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Hibernate => {
                f.debug_tuple("Hibernate").finish();
            }
            Self::Stop => {
                f.debug_tuple("Stop").finish();
            }
            Self::Terminate => {
                f.debug_tuple("Terminate").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceIpv4Prefix {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceIpv4Prefix")
            .field("ipv4_prefix", &self.ipv4_prefix)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceIpv6Address {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceIpv6Address")
            .field("ipv6_address", &self.ipv6_address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceIpv6AddressRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceIpv6AddressRequest")
            .field("ipv6_address", &self.ipv6_address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceIpv6Prefix {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceIpv6Prefix")
            .field("ipv6_prefix", &self.ipv6_prefix)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceLifecycle {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::OnDemand => {
                f.debug_tuple("OnDemand").finish();
            }
            Self::Spot => {
                f.debug_tuple("Spot").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceLifecycleType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Scheduled => {
                f.debug_tuple("Scheduled").finish();
            }
            Self::Spot => {
                f.debug_tuple("Spot").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceMaintenanceOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceMaintenanceOptions")
            .field("auto_recovery", &self.auto_recovery)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceMaintenanceOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceMaintenanceOptionsRequest")
            .field("auto_recovery", &self.auto_recovery)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceMarketOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceMarketOptionsRequest")
            .field("market_type", &self.market_type)
            .field("spot_options", &self.spot_options)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceMatchCriteria {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Open => {
                f.debug_tuple("Open").finish();
            }
            Self::Targeted => {
                f.debug_tuple("Targeted").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceMetadataEndpointState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disabled => {
                f.debug_tuple("Disabled").finish();
            }
            Self::Enabled => {
                f.debug_tuple("Enabled").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceMetadataOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceMetadataOptionsRequest")
            .field("http_tokens", &self.http_tokens)
            .field(
                "http_put_response_hop_limit",
                &self.http_put_response_hop_limit,
            )
            .field("http_endpoint", &self.http_endpoint)
            .field("http_protocol_ipv6", &self.http_protocol_ipv6)
            .field("instance_metadata_tags", &self.instance_metadata_tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceMetadataOptionsResponse {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceMetadataOptionsResponse")
            .field("state", &self.state)
            .field("http_tokens", &self.http_tokens)
            .field(
                "http_put_response_hop_limit",
                &self.http_put_response_hop_limit,
            )
            .field("http_endpoint", &self.http_endpoint)
            .field("http_protocol_ipv6", &self.http_protocol_ipv6)
            .field("instance_metadata_tags", &self.instance_metadata_tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceMetadataOptionsState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Applied => {
                f.debug_tuple("Applied").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceMetadataProtocolState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disabled => {
                f.debug_tuple("Disabled").finish();
            }
            Self::Enabled => {
                f.debug_tuple("Enabled").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceMetadataTagsState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disabled => {
                f.debug_tuple("Disabled").finish();
            }
            Self::Enabled => {
                f.debug_tuple("Enabled").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceMonitoring {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceMonitoring")
            .field("instance_id", &self.instance_id)
            .field("monitoring", &self.monitoring)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceNetworkInterface {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceNetworkInterface")
            .field("association", &self.association)
            .field("attachment", &self.attachment)
            .field("description", &self.description)
            .field("groups", &self.groups)
            .field("ipv6_addresses", &self.ipv6_addresses)
            .field("mac_address", &self.mac_address)
            .field("network_interface_id", &self.network_interface_id)
            .field("owner_id", &self.owner_id)
            .field("private_dns_name", &self.private_dns_name)
            .field("private_ip_address", &self.private_ip_address)
            .field("private_ip_addresses", &self.private_ip_addresses)
            .field("source_dest_check", &self.source_dest_check)
            .field("status", &self.status)
            .field("subnet_id", &self.subnet_id)
            .field("vpc_id", &self.vpc_id)
            .field("interface_type", &self.interface_type)
            .field("ipv4_prefixes", &self.ipv4_prefixes)
            .field("ipv6_prefixes", &self.ipv6_prefixes)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceNetworkInterfaceAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceNetworkInterfaceAssociation")
            .field("carrier_ip", &self.carrier_ip)
            .field("customer_owned_ip", &self.customer_owned_ip)
            .field("ip_owner_id", &self.ip_owner_id)
            .field("public_dns_name", &self.public_dns_name)
            .field("public_ip", &self.public_ip)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceNetworkInterfaceAttachment {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceNetworkInterfaceAttachment")
            .field("attach_time", &self.attach_time)
            .field("attachment_id", &self.attachment_id)
            .field("delete_on_termination", &self.delete_on_termination)
            .field("device_index", &self.device_index)
            .field("status", &self.status)
            .field("network_card_index", &self.network_card_index)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceNetworkInterfaceSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceNetworkInterfaceSpecification")
            .field(
                "associate_public_ip_address",
                &self.associate_public_ip_address,
            )
            .field("delete_on_termination", &self.delete_on_termination)
            .field("description", &self.description)
            .field("device_index", &self.device_index)
            .field("groups", &self.groups)
            .field("ipv6_address_count", &self.ipv6_address_count)
            .field("ipv6_addresses", &self.ipv6_addresses)
            .field("network_interface_id", &self.network_interface_id)
            .field("private_ip_address", &self.private_ip_address)
            .field("private_ip_addresses", &self.private_ip_addresses)
            .field(
                "secondary_private_ip_address_count",
                &self.secondary_private_ip_address_count,
            )
            .field("subnet_id", &self.subnet_id)
            .field(
                "associate_carrier_ip_address",
                &self.associate_carrier_ip_address,
            )
            .field("interface_type", &self.interface_type)
            .field("network_card_index", &self.network_card_index)
            .field("ipv4_prefixes", &self.ipv4_prefixes)
            .field("ipv4_prefix_count", &self.ipv4_prefix_count)
            .field("ipv6_prefixes", &self.ipv6_prefixes)
            .field("ipv6_prefix_count", &self.ipv6_prefix_count)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstancePrivateIpAddress {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstancePrivateIpAddress")
            .field("association", &self.association)
            .field("primary", &self.primary)
            .field("private_dns_name", &self.private_dns_name)
            .field("private_ip_address", &self.private_ip_address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceRequirements {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceRequirements")
            .field("v_cpu_count", &self.v_cpu_count)
            .field("memory_mi_b", &self.memory_mi_b)
            .field("cpu_manufacturers", &self.cpu_manufacturers)
            .field("memory_gi_b_per_v_cpu", &self.memory_gi_b_per_v_cpu)
            .field("excluded_instance_types", &self.excluded_instance_types)
            .field("instance_generations", &self.instance_generations)
            .field(
                "spot_max_price_percentage_over_lowest_price",
                &self.spot_max_price_percentage_over_lowest_price,
            )
            .field(
                "on_demand_max_price_percentage_over_lowest_price",
                &self.on_demand_max_price_percentage_over_lowest_price,
            )
            .field("bare_metal", &self.bare_metal)
            .field("burstable_performance", &self.burstable_performance)
            .field("require_hibernate_support", &self.require_hibernate_support)
            .field("network_interface_count", &self.network_interface_count)
            .field("local_storage", &self.local_storage)
            .field("local_storage_types", &self.local_storage_types)
            .field("total_local_storage_gb", &self.total_local_storage_gb)
            .field(
                "baseline_ebs_bandwidth_mbps",
                &self.baseline_ebs_bandwidth_mbps,
            )
            .field("accelerator_types", &self.accelerator_types)
            .field("accelerator_count", &self.accelerator_count)
            .field("accelerator_manufacturers", &self.accelerator_manufacturers)
            .field("accelerator_names", &self.accelerator_names)
            .field(
                "accelerator_total_memory_mi_b",
                &self.accelerator_total_memory_mi_b,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceRequirementsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceRequirementsRequest")
            .field("v_cpu_count", &self.v_cpu_count)
            .field("memory_mi_b", &self.memory_mi_b)
            .field("cpu_manufacturers", &self.cpu_manufacturers)
            .field("memory_gi_b_per_v_cpu", &self.memory_gi_b_per_v_cpu)
            .field("excluded_instance_types", &self.excluded_instance_types)
            .field("instance_generations", &self.instance_generations)
            .field(
                "spot_max_price_percentage_over_lowest_price",
                &self.spot_max_price_percentage_over_lowest_price,
            )
            .field(
                "on_demand_max_price_percentage_over_lowest_price",
                &self.on_demand_max_price_percentage_over_lowest_price,
            )
            .field("bare_metal", &self.bare_metal)
            .field("burstable_performance", &self.burstable_performance)
            .field("require_hibernate_support", &self.require_hibernate_support)
            .field("network_interface_count", &self.network_interface_count)
            .field("local_storage", &self.local_storage)
            .field("local_storage_types", &self.local_storage_types)
            .field("total_local_storage_gb", &self.total_local_storage_gb)
            .field(
                "baseline_ebs_bandwidth_mbps",
                &self.baseline_ebs_bandwidth_mbps,
            )
            .field("accelerator_types", &self.accelerator_types)
            .field("accelerator_count", &self.accelerator_count)
            .field("accelerator_manufacturers", &self.accelerator_manufacturers)
            .field("accelerator_names", &self.accelerator_names)
            .field(
                "accelerator_total_memory_mi_b",
                &self.accelerator_total_memory_mi_b,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceRequirementsWithMetadataRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceRequirementsWithMetadataRequest")
            .field("architecture_types", &self.architecture_types)
            .field("virtualization_types", &self.virtualization_types)
            .field("instance_requirements", &self.instance_requirements)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceSpecification")
            .field("instance_id", &self.instance_id)
            .field("exclude_boot_volume", &self.exclude_boot_volume)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceState {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceState")
            .field("code", &self.code)
            .field("name", &self.name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceStateChange {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceStateChange")
            .field("current_state", &self.current_state)
            .field("instance_id", &self.instance_id)
            .field("previous_state", &self.previous_state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceStateName {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Running => {
                f.debug_tuple("Running").finish();
            }
            Self::ShuttingDown => {
                f.debug_tuple("ShuttingDown").finish();
            }
            Self::Stopped => {
                f.debug_tuple("Stopped").finish();
            }
            Self::Stopping => {
                f.debug_tuple("Stopping").finish();
            }
            Self::Terminated => {
                f.debug_tuple("Terminated").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceStatus")
            .field("availability_zone", &self.availability_zone)
            .field("outpost_arn", &self.outpost_arn)
            .field("events", &self.events)
            .field("instance_id", &self.instance_id)
            .field("instance_state", &self.instance_state)
            .field("instance_status", &self.instance_status)
            .field("system_status", &self.system_status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceStatusDetails {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceStatusDetails")
            .field("impaired_since", &self.impaired_since)
            .field("name", &self.name)
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceStatusEvent {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceStatusEvent")
            .field("instance_event_id", &self.instance_event_id)
            .field("code", &self.code)
            .field("description", &self.description)
            .field("not_after", &self.not_after)
            .field("not_before", &self.not_before)
            .field("not_before_deadline", &self.not_before_deadline)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceStatusSummary {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceStatusSummary")
            .field("details", &self.details)
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceStorageEncryptionSupport {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Required => {
                f.debug_tuple("Required").finish();
            }
            Self::Unsupported => {
                f.debug_tuple("Unsupported").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceStorageInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceStorageInfo")
            .field("total_size_in_gb", &self.total_size_in_gb)
            .field("disks", &self.disks)
            .field("nvme_support", &self.nvme_support)
            .field("encryption_support", &self.encryption_support)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceTagNotificationAttribute {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceTagNotificationAttribute")
            .field("instance_tag_keys", &self.instance_tag_keys)
            .field(
                "include_all_tags_of_instance",
                &self.include_all_tags_of_instance,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::A12xlarge => {
                f.debug_tuple("A12xlarge").finish();
            }
            Self::A14xlarge => {
                f.debug_tuple("A14xlarge").finish();
            }
            Self::A1Large => {
                f.debug_tuple("A1Large").finish();
            }
            Self::A1Medium => {
                f.debug_tuple("A1Medium").finish();
            }
            Self::A1Metal => {
                f.debug_tuple("A1Metal").finish();
            }
            Self::A1Xlarge => {
                f.debug_tuple("A1Xlarge").finish();
            }
            Self::C1Medium => {
                f.debug_tuple("C1Medium").finish();
            }
            Self::C1Xlarge => {
                f.debug_tuple("C1Xlarge").finish();
            }
            Self::C32xlarge => {
                f.debug_tuple("C32xlarge").finish();
            }
            Self::C34xlarge => {
                f.debug_tuple("C34xlarge").finish();
            }
            Self::C38xlarge => {
                f.debug_tuple("C38xlarge").finish();
            }
            Self::C3Large => {
                f.debug_tuple("C3Large").finish();
            }
            Self::C3Xlarge => {
                f.debug_tuple("C3Xlarge").finish();
            }
            Self::C42xlarge => {
                f.debug_tuple("C42xlarge").finish();
            }
            Self::C44xlarge => {
                f.debug_tuple("C44xlarge").finish();
            }
            Self::C48xlarge => {
                f.debug_tuple("C48xlarge").finish();
            }
            Self::C4Large => {
                f.debug_tuple("C4Large").finish();
            }
            Self::C4Xlarge => {
                f.debug_tuple("C4Xlarge").finish();
            }
            Self::C512xlarge => {
                f.debug_tuple("C512xlarge").finish();
            }
            Self::C518xlarge => {
                f.debug_tuple("C518xlarge").finish();
            }
            Self::C524xlarge => {
                f.debug_tuple("C524xlarge").finish();
            }
            Self::C52xlarge => {
                f.debug_tuple("C52xlarge").finish();
            }
            Self::C54xlarge => {
                f.debug_tuple("C54xlarge").finish();
            }
            Self::C59xlarge => {
                f.debug_tuple("C59xlarge").finish();
            }
            Self::C5Large => {
                f.debug_tuple("C5Large").finish();
            }
            Self::C5Metal => {
                f.debug_tuple("C5Metal").finish();
            }
            Self::C5Xlarge => {
                f.debug_tuple("C5Xlarge").finish();
            }
            Self::C5a12xlarge => {
                f.debug_tuple("C5a12xlarge").finish();
            }
            Self::C5a16xlarge => {
                f.debug_tuple("C5a16xlarge").finish();
            }
            Self::C5a24xlarge => {
                f.debug_tuple("C5a24xlarge").finish();
            }
            Self::C5a2xlarge => {
                f.debug_tuple("C5a2xlarge").finish();
            }
            Self::C5a4xlarge => {
                f.debug_tuple("C5a4xlarge").finish();
            }
            Self::C5a8xlarge => {
                f.debug_tuple("C5a8xlarge").finish();
            }
            Self::C5aLarge => {
                f.debug_tuple("C5aLarge").finish();
            }
            Self::C5aXlarge => {
                f.debug_tuple("C5aXlarge").finish();
            }
            Self::C5ad12xlarge => {
                f.debug_tuple("C5ad12xlarge").finish();
            }
            Self::C5ad16xlarge => {
                f.debug_tuple("C5ad16xlarge").finish();
            }
            Self::C5ad24xlarge => {
                f.debug_tuple("C5ad24xlarge").finish();
            }
            Self::C5ad2xlarge => {
                f.debug_tuple("C5ad2xlarge").finish();
            }
            Self::C5ad4xlarge => {
                f.debug_tuple("C5ad4xlarge").finish();
            }
            Self::C5ad8xlarge => {
                f.debug_tuple("C5ad8xlarge").finish();
            }
            Self::C5adLarge => {
                f.debug_tuple("C5adLarge").finish();
            }
            Self::C5adXlarge => {
                f.debug_tuple("C5adXlarge").finish();
            }
            Self::C5d12xlarge => {
                f.debug_tuple("C5d12xlarge").finish();
            }
            Self::C5d18xlarge => {
                f.debug_tuple("C5d18xlarge").finish();
            }
            Self::C5d24xlarge => {
                f.debug_tuple("C5d24xlarge").finish();
            }
            Self::C5d2xlarge => {
                f.debug_tuple("C5d2xlarge").finish();
            }
            Self::C5d4xlarge => {
                f.debug_tuple("C5d4xlarge").finish();
            }
            Self::C5d9xlarge => {
                f.debug_tuple("C5d9xlarge").finish();
            }
            Self::C5dLarge => {
                f.debug_tuple("C5dLarge").finish();
            }
            Self::C5dMetal => {
                f.debug_tuple("C5dMetal").finish();
            }
            Self::C5dXlarge => {
                f.debug_tuple("C5dXlarge").finish();
            }
            Self::C5n18xlarge => {
                f.debug_tuple("C5n18xlarge").finish();
            }
            Self::C5n2xlarge => {
                f.debug_tuple("C5n2xlarge").finish();
            }
            Self::C5n4xlarge => {
                f.debug_tuple("C5n4xlarge").finish();
            }
            Self::C5n9xlarge => {
                f.debug_tuple("C5n9xlarge").finish();
            }
            Self::C5nLarge => {
                f.debug_tuple("C5nLarge").finish();
            }
            Self::C5nMetal => {
                f.debug_tuple("C5nMetal").finish();
            }
            Self::C5nXlarge => {
                f.debug_tuple("C5nXlarge").finish();
            }
            Self::C6a12xlarge => {
                f.debug_tuple("C6a12xlarge").finish();
            }
            Self::C6a16xlarge => {
                f.debug_tuple("C6a16xlarge").finish();
            }
            Self::C6a24xlarge => {
                f.debug_tuple("C6a24xlarge").finish();
            }
            Self::C6a2xlarge => {
                f.debug_tuple("C6a2xlarge").finish();
            }
            Self::C6a32xlarge => {
                f.debug_tuple("C6a32xlarge").finish();
            }
            Self::C6a48xlarge => {
                f.debug_tuple("C6a48xlarge").finish();
            }
            Self::C6a4xlarge => {
                f.debug_tuple("C6a4xlarge").finish();
            }
            Self::C6a8xlarge => {
                f.debug_tuple("C6a8xlarge").finish();
            }
            Self::C6aLarge => {
                f.debug_tuple("C6aLarge").finish();
            }
            Self::C6aMetal => {
                f.debug_tuple("C6aMetal").finish();
            }
            Self::C6aXlarge => {
                f.debug_tuple("C6aXlarge").finish();
            }
            Self::C6g12xlarge => {
                f.debug_tuple("C6g12xlarge").finish();
            }
            Self::C6g16xlarge => {
                f.debug_tuple("C6g16xlarge").finish();
            }
            Self::C6g2xlarge => {
                f.debug_tuple("C6g2xlarge").finish();
            }
            Self::C6g4xlarge => {
                f.debug_tuple("C6g4xlarge").finish();
            }
            Self::C6g8xlarge => {
                f.debug_tuple("C6g8xlarge").finish();
            }
            Self::C6gLarge => {
                f.debug_tuple("C6gLarge").finish();
            }
            Self::C6gMedium => {
                f.debug_tuple("C6gMedium").finish();
            }
            Self::C6gMetal => {
                f.debug_tuple("C6gMetal").finish();
            }
            Self::C6gXlarge => {
                f.debug_tuple("C6gXlarge").finish();
            }
            Self::C6gd12xlarge => {
                f.debug_tuple("C6gd12xlarge").finish();
            }
            Self::C6gd16xlarge => {
                f.debug_tuple("C6gd16xlarge").finish();
            }
            Self::C6gd2xlarge => {
                f.debug_tuple("C6gd2xlarge").finish();
            }
            Self::C6gd4xlarge => {
                f.debug_tuple("C6gd4xlarge").finish();
            }
            Self::C6gd8xlarge => {
                f.debug_tuple("C6gd8xlarge").finish();
            }
            Self::C6gdLarge => {
                f.debug_tuple("C6gdLarge").finish();
            }
            Self::C6gdMedium => {
                f.debug_tuple("C6gdMedium").finish();
            }
            Self::C6gdMetal => {
                f.debug_tuple("C6gdMetal").finish();
            }
            Self::C6gdXlarge => {
                f.debug_tuple("C6gdXlarge").finish();
            }
            Self::C6gn12xlarge => {
                f.debug_tuple("C6gn12xlarge").finish();
            }
            Self::C6gn16xlarge => {
                f.debug_tuple("C6gn16xlarge").finish();
            }
            Self::C6gn2xlarge => {
                f.debug_tuple("C6gn2xlarge").finish();
            }
            Self::C6gn4xlarge => {
                f.debug_tuple("C6gn4xlarge").finish();
            }
            Self::C6gn8xlarge => {
                f.debug_tuple("C6gn8xlarge").finish();
            }
            Self::C6gnLarge => {
                f.debug_tuple("C6gnLarge").finish();
            }
            Self::C6gnMedium => {
                f.debug_tuple("C6gnMedium").finish();
            }
            Self::C6gnXlarge => {
                f.debug_tuple("C6gnXlarge").finish();
            }
            Self::C6i12xlarge => {
                f.debug_tuple("C6i12xlarge").finish();
            }
            Self::C6i16xlarge => {
                f.debug_tuple("C6i16xlarge").finish();
            }
            Self::C6i24xlarge => {
                f.debug_tuple("C6i24xlarge").finish();
            }
            Self::C6i2xlarge => {
                f.debug_tuple("C6i2xlarge").finish();
            }
            Self::C6i32xlarge => {
                f.debug_tuple("C6i32xlarge").finish();
            }
            Self::C6i4xlarge => {
                f.debug_tuple("C6i4xlarge").finish();
            }
            Self::C6i8xlarge => {
                f.debug_tuple("C6i8xlarge").finish();
            }
            Self::C6iLarge => {
                f.debug_tuple("C6iLarge").finish();
            }
            Self::C6iMetal => {
                f.debug_tuple("C6iMetal").finish();
            }
            Self::C6iXlarge => {
                f.debug_tuple("C6iXlarge").finish();
            }
            Self::C7g12xlarge => {
                f.debug_tuple("C7g12xlarge").finish();
            }
            Self::C7g16xlarge => {
                f.debug_tuple("C7g16xlarge").finish();
            }
            Self::C7g2xlarge => {
                f.debug_tuple("C7g2xlarge").finish();
            }
            Self::C7g4xlarge => {
                f.debug_tuple("C7g4xlarge").finish();
            }
            Self::C7g8xlarge => {
                f.debug_tuple("C7g8xlarge").finish();
            }
            Self::C7gLarge => {
                f.debug_tuple("C7gLarge").finish();
            }
            Self::C7gMedium => {
                f.debug_tuple("C7gMedium").finish();
            }
            Self::C7gXlarge => {
                f.debug_tuple("C7gXlarge").finish();
            }
            Self::Cc14xlarge => {
                f.debug_tuple("Cc14xlarge").finish();
            }
            Self::Cc28xlarge => {
                f.debug_tuple("Cc28xlarge").finish();
            }
            Self::Cg14xlarge => {
                f.debug_tuple("Cg14xlarge").finish();
            }
            Self::Cr18xlarge => {
                f.debug_tuple("Cr18xlarge").finish();
            }
            Self::D22xlarge => {
                f.debug_tuple("D22xlarge").finish();
            }
            Self::D24xlarge => {
                f.debug_tuple("D24xlarge").finish();
            }
            Self::D28xlarge => {
                f.debug_tuple("D28xlarge").finish();
            }
            Self::D2Xlarge => {
                f.debug_tuple("D2Xlarge").finish();
            }
            Self::D32xlarge => {
                f.debug_tuple("D32xlarge").finish();
            }
            Self::D34xlarge => {
                f.debug_tuple("D34xlarge").finish();
            }
            Self::D38xlarge => {
                f.debug_tuple("D38xlarge").finish();
            }
            Self::D3Xlarge => {
                f.debug_tuple("D3Xlarge").finish();
            }
            Self::D3en12xlarge => {
                f.debug_tuple("D3en12xlarge").finish();
            }
            Self::D3en2xlarge => {
                f.debug_tuple("D3en2xlarge").finish();
            }
            Self::D3en4xlarge => {
                f.debug_tuple("D3en4xlarge").finish();
            }
            Self::D3en6xlarge => {
                f.debug_tuple("D3en6xlarge").finish();
            }
            Self::D3en8xlarge => {
                f.debug_tuple("D3en8xlarge").finish();
            }
            Self::D3enXlarge => {
                f.debug_tuple("D3enXlarge").finish();
            }
            Self::Dl124xlarge => {
                f.debug_tuple("Dl124xlarge").finish();
            }
            Self::F116xlarge => {
                f.debug_tuple("F116xlarge").finish();
            }
            Self::F12xlarge => {
                f.debug_tuple("F12xlarge").finish();
            }
            Self::F14xlarge => {
                f.debug_tuple("F14xlarge").finish();
            }
            Self::G22xlarge => {
                f.debug_tuple("G22xlarge").finish();
            }
            Self::G28xlarge => {
                f.debug_tuple("G28xlarge").finish();
            }
            Self::G316xlarge => {
                f.debug_tuple("G316xlarge").finish();
            }
            Self::G34xlarge => {
                f.debug_tuple("G34xlarge").finish();
            }
            Self::G38xlarge => {
                f.debug_tuple("G38xlarge").finish();
            }
            Self::G3sXlarge => {
                f.debug_tuple("G3sXlarge").finish();
            }
            Self::G4ad16xlarge => {
                f.debug_tuple("G4ad16xlarge").finish();
            }
            Self::G4ad2xlarge => {
                f.debug_tuple("G4ad2xlarge").finish();
            }
            Self::G4ad4xlarge => {
                f.debug_tuple("G4ad4xlarge").finish();
            }
            Self::G4ad8xlarge => {
                f.debug_tuple("G4ad8xlarge").finish();
            }
            Self::G4adXlarge => {
                f.debug_tuple("G4adXlarge").finish();
            }
            Self::G4dn12xlarge => {
                f.debug_tuple("G4dn12xlarge").finish();
            }
            Self::G4dn16xlarge => {
                f.debug_tuple("G4dn16xlarge").finish();
            }
            Self::G4dn2xlarge => {
                f.debug_tuple("G4dn2xlarge").finish();
            }
            Self::G4dn4xlarge => {
                f.debug_tuple("G4dn4xlarge").finish();
            }
            Self::G4dn8xlarge => {
                f.debug_tuple("G4dn8xlarge").finish();
            }
            Self::G4dnMetal => {
                f.debug_tuple("G4dnMetal").finish();
            }
            Self::G4dnXlarge => {
                f.debug_tuple("G4dnXlarge").finish();
            }
            Self::G512xlarge => {
                f.debug_tuple("G512xlarge").finish();
            }
            Self::G516xlarge => {
                f.debug_tuple("G516xlarge").finish();
            }
            Self::G524xlarge => {
                f.debug_tuple("G524xlarge").finish();
            }
            Self::G52xlarge => {
                f.debug_tuple("G52xlarge").finish();
            }
            Self::G548xlarge => {
                f.debug_tuple("G548xlarge").finish();
            }
            Self::G54xlarge => {
                f.debug_tuple("G54xlarge").finish();
            }
            Self::G58xlarge => {
                f.debug_tuple("G58xlarge").finish();
            }
            Self::G5Xlarge => {
                f.debug_tuple("G5Xlarge").finish();
            }
            Self::G5g16xlarge => {
                f.debug_tuple("G5g16xlarge").finish();
            }
            Self::G5g2xlarge => {
                f.debug_tuple("G5g2xlarge").finish();
            }
            Self::G5g4xlarge => {
                f.debug_tuple("G5g4xlarge").finish();
            }
            Self::G5g8xlarge => {
                f.debug_tuple("G5g8xlarge").finish();
            }
            Self::G5gMetal => {
                f.debug_tuple("G5gMetal").finish();
            }
            Self::G5gXlarge => {
                f.debug_tuple("G5gXlarge").finish();
            }
            Self::H116xlarge => {
                f.debug_tuple("H116xlarge").finish();
            }
            Self::H12xlarge => {
                f.debug_tuple("H12xlarge").finish();
            }
            Self::H14xlarge => {
                f.debug_tuple("H14xlarge").finish();
            }
            Self::H18xlarge => {
                f.debug_tuple("H18xlarge").finish();
            }
            Self::Hi14xlarge => {
                f.debug_tuple("Hi14xlarge").finish();
            }
            Self::Hpc6a48xlarge => {
                f.debug_tuple("Hpc6a48xlarge").finish();
            }
            Self::Hs18xlarge => {
                f.debug_tuple("Hs18xlarge").finish();
            }
            Self::I22xlarge => {
                f.debug_tuple("I22xlarge").finish();
            }
            Self::I24xlarge => {
                f.debug_tuple("I24xlarge").finish();
            }
            Self::I28xlarge => {
                f.debug_tuple("I28xlarge").finish();
            }
            Self::I2Xlarge => {
                f.debug_tuple("I2Xlarge").finish();
            }
            Self::I316xlarge => {
                f.debug_tuple("I316xlarge").finish();
            }
            Self::I32xlarge => {
                f.debug_tuple("I32xlarge").finish();
            }
            Self::I34xlarge => {
                f.debug_tuple("I34xlarge").finish();
            }
            Self::I38xlarge => {
                f.debug_tuple("I38xlarge").finish();
            }
            Self::I3Large => {
                f.debug_tuple("I3Large").finish();
            }
            Self::I3Metal => {
                f.debug_tuple("I3Metal").finish();
            }
            Self::I3Xlarge => {
                f.debug_tuple("I3Xlarge").finish();
            }
            Self::I3en12xlarge => {
                f.debug_tuple("I3en12xlarge").finish();
            }
            Self::I3en24xlarge => {
                f.debug_tuple("I3en24xlarge").finish();
            }
            Self::I3en2xlarge => {
                f.debug_tuple("I3en2xlarge").finish();
            }
            Self::I3en3xlarge => {
                f.debug_tuple("I3en3xlarge").finish();
            }
            Self::I3en6xlarge => {
                f.debug_tuple("I3en6xlarge").finish();
            }
            Self::I3enLarge => {
                f.debug_tuple("I3enLarge").finish();
            }
            Self::I3enMetal => {
                f.debug_tuple("I3enMetal").finish();
            }
            Self::I3enXlarge => {
                f.debug_tuple("I3enXlarge").finish();
            }
            Self::I4i16xlarge => {
                f.debug_tuple("I4i16xlarge").finish();
            }
            Self::I4i2xlarge => {
                f.debug_tuple("I4i2xlarge").finish();
            }
            Self::I4i32xlarge => {
                f.debug_tuple("I4i32xlarge").finish();
            }
            Self::I4i4xlarge => {
                f.debug_tuple("I4i4xlarge").finish();
            }
            Self::I4i8xlarge => {
                f.debug_tuple("I4i8xlarge").finish();
            }
            Self::I4iLarge => {
                f.debug_tuple("I4iLarge").finish();
            }
            Self::I4iMetal => {
                f.debug_tuple("I4iMetal").finish();
            }
            Self::I4iXlarge => {
                f.debug_tuple("I4iXlarge").finish();
            }
            Self::Im4gn16xlarge => {
                f.debug_tuple("Im4gn16xlarge").finish();
            }
            Self::Im4gn2xlarge => {
                f.debug_tuple("Im4gn2xlarge").finish();
            }
            Self::Im4gn4xlarge => {
                f.debug_tuple("Im4gn4xlarge").finish();
            }
            Self::Im4gn8xlarge => {
                f.debug_tuple("Im4gn8xlarge").finish();
            }
            Self::Im4gnLarge => {
                f.debug_tuple("Im4gnLarge").finish();
            }
            Self::Im4gnXlarge => {
                f.debug_tuple("Im4gnXlarge").finish();
            }
            Self::Inf124xlarge => {
                f.debug_tuple("Inf124xlarge").finish();
            }
            Self::Inf12xlarge => {
                f.debug_tuple("Inf12xlarge").finish();
            }
            Self::Inf16xlarge => {
                f.debug_tuple("Inf16xlarge").finish();
            }
            Self::Inf1Xlarge => {
                f.debug_tuple("Inf1Xlarge").finish();
            }
            Self::Is4gen2xlarge => {
                f.debug_tuple("Is4gen2xlarge").finish();
            }
            Self::Is4gen4xlarge => {
                f.debug_tuple("Is4gen4xlarge").finish();
            }
            Self::Is4gen8xlarge => {
                f.debug_tuple("Is4gen8xlarge").finish();
            }
            Self::Is4genLarge => {
                f.debug_tuple("Is4genLarge").finish();
            }
            Self::Is4genMedium => {
                f.debug_tuple("Is4genMedium").finish();
            }
            Self::Is4genXlarge => {
                f.debug_tuple("Is4genXlarge").finish();
            }
            Self::M1Large => {
                f.debug_tuple("M1Large").finish();
            }
            Self::M1Medium => {
                f.debug_tuple("M1Medium").finish();
            }
            Self::M1Small => {
                f.debug_tuple("M1Small").finish();
            }
            Self::M1Xlarge => {
                f.debug_tuple("M1Xlarge").finish();
            }
            Self::M22xlarge => {
                f.debug_tuple("M22xlarge").finish();
            }
            Self::M24xlarge => {
                f.debug_tuple("M24xlarge").finish();
            }
            Self::M2Xlarge => {
                f.debug_tuple("M2Xlarge").finish();
            }
            Self::M32xlarge => {
                f.debug_tuple("M32xlarge").finish();
            }
            Self::M3Large => {
                f.debug_tuple("M3Large").finish();
            }
            Self::M3Medium => {
                f.debug_tuple("M3Medium").finish();
            }
            Self::M3Xlarge => {
                f.debug_tuple("M3Xlarge").finish();
            }
            Self::M410xlarge => {
                f.debug_tuple("M410xlarge").finish();
            }
            Self::M416xlarge => {
                f.debug_tuple("M416xlarge").finish();
            }
            Self::M42xlarge => {
                f.debug_tuple("M42xlarge").finish();
            }
            Self::M44xlarge => {
                f.debug_tuple("M44xlarge").finish();
            }
            Self::M4Large => {
                f.debug_tuple("M4Large").finish();
            }
            Self::M4Xlarge => {
                f.debug_tuple("M4Xlarge").finish();
            }
            Self::M512xlarge => {
                f.debug_tuple("M512xlarge").finish();
            }
            Self::M516xlarge => {
                f.debug_tuple("M516xlarge").finish();
            }
            Self::M524xlarge => {
                f.debug_tuple("M524xlarge").finish();
            }
            Self::M52xlarge => {
                f.debug_tuple("M52xlarge").finish();
            }
            Self::M54xlarge => {
                f.debug_tuple("M54xlarge").finish();
            }
            Self::M58xlarge => {
                f.debug_tuple("M58xlarge").finish();
            }
            Self::M5Large => {
                f.debug_tuple("M5Large").finish();
            }
            Self::M5Metal => {
                f.debug_tuple("M5Metal").finish();
            }
            Self::M5Xlarge => {
                f.debug_tuple("M5Xlarge").finish();
            }
            Self::M5a12xlarge => {
                f.debug_tuple("M5a12xlarge").finish();
            }
            Self::M5a16xlarge => {
                f.debug_tuple("M5a16xlarge").finish();
            }
            Self::M5a24xlarge => {
                f.debug_tuple("M5a24xlarge").finish();
            }
            Self::M5a2xlarge => {
                f.debug_tuple("M5a2xlarge").finish();
            }
            Self::M5a4xlarge => {
                f.debug_tuple("M5a4xlarge").finish();
            }
            Self::M5a8xlarge => {
                f.debug_tuple("M5a8xlarge").finish();
            }
            Self::M5aLarge => {
                f.debug_tuple("M5aLarge").finish();
            }
            Self::M5aXlarge => {
                f.debug_tuple("M5aXlarge").finish();
            }
            Self::M5ad12xlarge => {
                f.debug_tuple("M5ad12xlarge").finish();
            }
            Self::M5ad16xlarge => {
                f.debug_tuple("M5ad16xlarge").finish();
            }
            Self::M5ad24xlarge => {
                f.debug_tuple("M5ad24xlarge").finish();
            }
            Self::M5ad2xlarge => {
                f.debug_tuple("M5ad2xlarge").finish();
            }
            Self::M5ad4xlarge => {
                f.debug_tuple("M5ad4xlarge").finish();
            }
            Self::M5ad8xlarge => {
                f.debug_tuple("M5ad8xlarge").finish();
            }
            Self::M5adLarge => {
                f.debug_tuple("M5adLarge").finish();
            }
            Self::M5adXlarge => {
                f.debug_tuple("M5adXlarge").finish();
            }
            Self::M5d12xlarge => {
                f.debug_tuple("M5d12xlarge").finish();
            }
            Self::M5d16xlarge => {
                f.debug_tuple("M5d16xlarge").finish();
            }
            Self::M5d24xlarge => {
                f.debug_tuple("M5d24xlarge").finish();
            }
            Self::M5d2xlarge => {
                f.debug_tuple("M5d2xlarge").finish();
            }
            Self::M5d4xlarge => {
                f.debug_tuple("M5d4xlarge").finish();
            }
            Self::M5d8xlarge => {
                f.debug_tuple("M5d8xlarge").finish();
            }
            Self::M5dLarge => {
                f.debug_tuple("M5dLarge").finish();
            }
            Self::M5dMetal => {
                f.debug_tuple("M5dMetal").finish();
            }
            Self::M5dXlarge => {
                f.debug_tuple("M5dXlarge").finish();
            }
            Self::M5dn12xlarge => {
                f.debug_tuple("M5dn12xlarge").finish();
            }
            Self::M5dn16xlarge => {
                f.debug_tuple("M5dn16xlarge").finish();
            }
            Self::M5dn24xlarge => {
                f.debug_tuple("M5dn24xlarge").finish();
            }
            Self::M5dn2xlarge => {
                f.debug_tuple("M5dn2xlarge").finish();
            }
            Self::M5dn4xlarge => {
                f.debug_tuple("M5dn4xlarge").finish();
            }
            Self::M5dn8xlarge => {
                f.debug_tuple("M5dn8xlarge").finish();
            }
            Self::M5dnLarge => {
                f.debug_tuple("M5dnLarge").finish();
            }
            Self::M5dnMetal => {
                f.debug_tuple("M5dnMetal").finish();
            }
            Self::M5dnXlarge => {
                f.debug_tuple("M5dnXlarge").finish();
            }
            Self::M5n12xlarge => {
                f.debug_tuple("M5n12xlarge").finish();
            }
            Self::M5n16xlarge => {
                f.debug_tuple("M5n16xlarge").finish();
            }
            Self::M5n24xlarge => {
                f.debug_tuple("M5n24xlarge").finish();
            }
            Self::M5n2xlarge => {
                f.debug_tuple("M5n2xlarge").finish();
            }
            Self::M5n4xlarge => {
                f.debug_tuple("M5n4xlarge").finish();
            }
            Self::M5n8xlarge => {
                f.debug_tuple("M5n8xlarge").finish();
            }
            Self::M5nLarge => {
                f.debug_tuple("M5nLarge").finish();
            }
            Self::M5nMetal => {
                f.debug_tuple("M5nMetal").finish();
            }
            Self::M5nXlarge => {
                f.debug_tuple("M5nXlarge").finish();
            }
            Self::M5zn12xlarge => {
                f.debug_tuple("M5zn12xlarge").finish();
            }
            Self::M5zn2xlarge => {
                f.debug_tuple("M5zn2xlarge").finish();
            }
            Self::M5zn3xlarge => {
                f.debug_tuple("M5zn3xlarge").finish();
            }
            Self::M5zn6xlarge => {
                f.debug_tuple("M5zn6xlarge").finish();
            }
            Self::M5znLarge => {
                f.debug_tuple("M5znLarge").finish();
            }
            Self::M5znMetal => {
                f.debug_tuple("M5znMetal").finish();
            }
            Self::M5znXlarge => {
                f.debug_tuple("M5znXlarge").finish();
            }
            Self::M6a12xlarge => {
                f.debug_tuple("M6a12xlarge").finish();
            }
            Self::M6a16xlarge => {
                f.debug_tuple("M6a16xlarge").finish();
            }
            Self::M6a24xlarge => {
                f.debug_tuple("M6a24xlarge").finish();
            }
            Self::M6a2xlarge => {
                f.debug_tuple("M6a2xlarge").finish();
            }
            Self::M6a32xlarge => {
                f.debug_tuple("M6a32xlarge").finish();
            }
            Self::M6a48xlarge => {
                f.debug_tuple("M6a48xlarge").finish();
            }
            Self::M6a4xlarge => {
                f.debug_tuple("M6a4xlarge").finish();
            }
            Self::M6a8xlarge => {
                f.debug_tuple("M6a8xlarge").finish();
            }
            Self::M6aLarge => {
                f.debug_tuple("M6aLarge").finish();
            }
            Self::M6aMetal => {
                f.debug_tuple("M6aMetal").finish();
            }
            Self::M6aXlarge => {
                f.debug_tuple("M6aXlarge").finish();
            }
            Self::M6g12xlarge => {
                f.debug_tuple("M6g12xlarge").finish();
            }
            Self::M6g16xlarge => {
                f.debug_tuple("M6g16xlarge").finish();
            }
            Self::M6g2xlarge => {
                f.debug_tuple("M6g2xlarge").finish();
            }
            Self::M6g4xlarge => {
                f.debug_tuple("M6g4xlarge").finish();
            }
            Self::M6g8xlarge => {
                f.debug_tuple("M6g8xlarge").finish();
            }
            Self::M6gLarge => {
                f.debug_tuple("M6gLarge").finish();
            }
            Self::M6gMedium => {
                f.debug_tuple("M6gMedium").finish();
            }
            Self::M6gMetal => {
                f.debug_tuple("M6gMetal").finish();
            }
            Self::M6gXlarge => {
                f.debug_tuple("M6gXlarge").finish();
            }
            Self::M6gd12xlarge => {
                f.debug_tuple("M6gd12xlarge").finish();
            }
            Self::M6gd16xlarge => {
                f.debug_tuple("M6gd16xlarge").finish();
            }
            Self::M6gd2xlarge => {
                f.debug_tuple("M6gd2xlarge").finish();
            }
            Self::M6gd4xlarge => {
                f.debug_tuple("M6gd4xlarge").finish();
            }
            Self::M6gd8xlarge => {
                f.debug_tuple("M6gd8xlarge").finish();
            }
            Self::M6gdLarge => {
                f.debug_tuple("M6gdLarge").finish();
            }
            Self::M6gdMedium => {
                f.debug_tuple("M6gdMedium").finish();
            }
            Self::M6gdMetal => {
                f.debug_tuple("M6gdMetal").finish();
            }
            Self::M6gdXlarge => {
                f.debug_tuple("M6gdXlarge").finish();
            }
            Self::M6i12xlarge => {
                f.debug_tuple("M6i12xlarge").finish();
            }
            Self::M6i16xlarge => {
                f.debug_tuple("M6i16xlarge").finish();
            }
            Self::M6i24xlarge => {
                f.debug_tuple("M6i24xlarge").finish();
            }
            Self::M6i2xlarge => {
                f.debug_tuple("M6i2xlarge").finish();
            }
            Self::M6i32xlarge => {
                f.debug_tuple("M6i32xlarge").finish();
            }
            Self::M6i4xlarge => {
                f.debug_tuple("M6i4xlarge").finish();
            }
            Self::M6i8xlarge => {
                f.debug_tuple("M6i8xlarge").finish();
            }
            Self::M6iLarge => {
                f.debug_tuple("M6iLarge").finish();
            }
            Self::M6iMetal => {
                f.debug_tuple("M6iMetal").finish();
            }
            Self::M6iXlarge => {
                f.debug_tuple("M6iXlarge").finish();
            }
            Self::Mac1Metal => {
                f.debug_tuple("Mac1Metal").finish();
            }
            Self::P216xlarge => {
                f.debug_tuple("P216xlarge").finish();
            }
            Self::P28xlarge => {
                f.debug_tuple("P28xlarge").finish();
            }
            Self::P2Xlarge => {
                f.debug_tuple("P2Xlarge").finish();
            }
            Self::P316xlarge => {
                f.debug_tuple("P316xlarge").finish();
            }
            Self::P32xlarge => {
                f.debug_tuple("P32xlarge").finish();
            }
            Self::P38xlarge => {
                f.debug_tuple("P38xlarge").finish();
            }
            Self::P3dn24xlarge => {
                f.debug_tuple("P3dn24xlarge").finish();
            }
            Self::P4d24xlarge => {
                f.debug_tuple("P4d24xlarge").finish();
            }
            Self::R32xlarge => {
                f.debug_tuple("R32xlarge").finish();
            }
            Self::R34xlarge => {
                f.debug_tuple("R34xlarge").finish();
            }
            Self::R38xlarge => {
                f.debug_tuple("R38xlarge").finish();
            }
            Self::R3Large => {
                f.debug_tuple("R3Large").finish();
            }
            Self::R3Xlarge => {
                f.debug_tuple("R3Xlarge").finish();
            }
            Self::R416xlarge => {
                f.debug_tuple("R416xlarge").finish();
            }
            Self::R42xlarge => {
                f.debug_tuple("R42xlarge").finish();
            }
            Self::R44xlarge => {
                f.debug_tuple("R44xlarge").finish();
            }
            Self::R48xlarge => {
                f.debug_tuple("R48xlarge").finish();
            }
            Self::R4Large => {
                f.debug_tuple("R4Large").finish();
            }
            Self::R4Xlarge => {
                f.debug_tuple("R4Xlarge").finish();
            }
            Self::R512xlarge => {
                f.debug_tuple("R512xlarge").finish();
            }
            Self::R516xlarge => {
                f.debug_tuple("R516xlarge").finish();
            }
            Self::R524xlarge => {
                f.debug_tuple("R524xlarge").finish();
            }
            Self::R52xlarge => {
                f.debug_tuple("R52xlarge").finish();
            }
            Self::R54xlarge => {
                f.debug_tuple("R54xlarge").finish();
            }
            Self::R58xlarge => {
                f.debug_tuple("R58xlarge").finish();
            }
            Self::R5Large => {
                f.debug_tuple("R5Large").finish();
            }
            Self::R5Metal => {
                f.debug_tuple("R5Metal").finish();
            }
            Self::R5Xlarge => {
                f.debug_tuple("R5Xlarge").finish();
            }
            Self::R5a12xlarge => {
                f.debug_tuple("R5a12xlarge").finish();
            }
            Self::R5a16xlarge => {
                f.debug_tuple("R5a16xlarge").finish();
            }
            Self::R5a24xlarge => {
                f.debug_tuple("R5a24xlarge").finish();
            }
            Self::R5a2xlarge => {
                f.debug_tuple("R5a2xlarge").finish();
            }
            Self::R5a4xlarge => {
                f.debug_tuple("R5a4xlarge").finish();
            }
            Self::R5a8xlarge => {
                f.debug_tuple("R5a8xlarge").finish();
            }
            Self::R5aLarge => {
                f.debug_tuple("R5aLarge").finish();
            }
            Self::R5aXlarge => {
                f.debug_tuple("R5aXlarge").finish();
            }
            Self::R5ad12xlarge => {
                f.debug_tuple("R5ad12xlarge").finish();
            }
            Self::R5ad16xlarge => {
                f.debug_tuple("R5ad16xlarge").finish();
            }
            Self::R5ad24xlarge => {
                f.debug_tuple("R5ad24xlarge").finish();
            }
            Self::R5ad2xlarge => {
                f.debug_tuple("R5ad2xlarge").finish();
            }
            Self::R5ad4xlarge => {
                f.debug_tuple("R5ad4xlarge").finish();
            }
            Self::R5ad8xlarge => {
                f.debug_tuple("R5ad8xlarge").finish();
            }
            Self::R5adLarge => {
                f.debug_tuple("R5adLarge").finish();
            }
            Self::R5adXlarge => {
                f.debug_tuple("R5adXlarge").finish();
            }
            Self::R5b12xlarge => {
                f.debug_tuple("R5b12xlarge").finish();
            }
            Self::R5b16xlarge => {
                f.debug_tuple("R5b16xlarge").finish();
            }
            Self::R5b24xlarge => {
                f.debug_tuple("R5b24xlarge").finish();
            }
            Self::R5b2xlarge => {
                f.debug_tuple("R5b2xlarge").finish();
            }
            Self::R5b4xlarge => {
                f.debug_tuple("R5b4xlarge").finish();
            }
            Self::R5b8xlarge => {
                f.debug_tuple("R5b8xlarge").finish();
            }
            Self::R5bLarge => {
                f.debug_tuple("R5bLarge").finish();
            }
            Self::R5bMetal => {
                f.debug_tuple("R5bMetal").finish();
            }
            Self::R5bXlarge => {
                f.debug_tuple("R5bXlarge").finish();
            }
            Self::R5d12xlarge => {
                f.debug_tuple("R5d12xlarge").finish();
            }
            Self::R5d16xlarge => {
                f.debug_tuple("R5d16xlarge").finish();
            }
            Self::R5d24xlarge => {
                f.debug_tuple("R5d24xlarge").finish();
            }
            Self::R5d2xlarge => {
                f.debug_tuple("R5d2xlarge").finish();
            }
            Self::R5d4xlarge => {
                f.debug_tuple("R5d4xlarge").finish();
            }
            Self::R5d8xlarge => {
                f.debug_tuple("R5d8xlarge").finish();
            }
            Self::R5dLarge => {
                f.debug_tuple("R5dLarge").finish();
            }
            Self::R5dMetal => {
                f.debug_tuple("R5dMetal").finish();
            }
            Self::R5dXlarge => {
                f.debug_tuple("R5dXlarge").finish();
            }
            Self::R5dn12xlarge => {
                f.debug_tuple("R5dn12xlarge").finish();
            }
            Self::R5dn16xlarge => {
                f.debug_tuple("R5dn16xlarge").finish();
            }
            Self::R5dn24xlarge => {
                f.debug_tuple("R5dn24xlarge").finish();
            }
            Self::R5dn2xlarge => {
                f.debug_tuple("R5dn2xlarge").finish();
            }
            Self::R5dn4xlarge => {
                f.debug_tuple("R5dn4xlarge").finish();
            }
            Self::R5dn8xlarge => {
                f.debug_tuple("R5dn8xlarge").finish();
            }
            Self::R5dnLarge => {
                f.debug_tuple("R5dnLarge").finish();
            }
            Self::R5dnMetal => {
                f.debug_tuple("R5dnMetal").finish();
            }
            Self::R5dnXlarge => {
                f.debug_tuple("R5dnXlarge").finish();
            }
            Self::R5n12xlarge => {
                f.debug_tuple("R5n12xlarge").finish();
            }
            Self::R5n16xlarge => {
                f.debug_tuple("R5n16xlarge").finish();
            }
            Self::R5n24xlarge => {
                f.debug_tuple("R5n24xlarge").finish();
            }
            Self::R5n2xlarge => {
                f.debug_tuple("R5n2xlarge").finish();
            }
            Self::R5n4xlarge => {
                f.debug_tuple("R5n4xlarge").finish();
            }
            Self::R5n8xlarge => {
                f.debug_tuple("R5n8xlarge").finish();
            }
            Self::R5nLarge => {
                f.debug_tuple("R5nLarge").finish();
            }
            Self::R5nMetal => {
                f.debug_tuple("R5nMetal").finish();
            }
            Self::R5nXlarge => {
                f.debug_tuple("R5nXlarge").finish();
            }
            Self::R6g12xlarge => {
                f.debug_tuple("R6g12xlarge").finish();
            }
            Self::R6g16xlarge => {
                f.debug_tuple("R6g16xlarge").finish();
            }
            Self::R6g2xlarge => {
                f.debug_tuple("R6g2xlarge").finish();
            }
            Self::R6g4xlarge => {
                f.debug_tuple("R6g4xlarge").finish();
            }
            Self::R6g8xlarge => {
                f.debug_tuple("R6g8xlarge").finish();
            }
            Self::R6gLarge => {
                f.debug_tuple("R6gLarge").finish();
            }
            Self::R6gMedium => {
                f.debug_tuple("R6gMedium").finish();
            }
            Self::R6gMetal => {
                f.debug_tuple("R6gMetal").finish();
            }
            Self::R6gXlarge => {
                f.debug_tuple("R6gXlarge").finish();
            }
            Self::R6gd12xlarge => {
                f.debug_tuple("R6gd12xlarge").finish();
            }
            Self::R6gd16xlarge => {
                f.debug_tuple("R6gd16xlarge").finish();
            }
            Self::R6gd2xlarge => {
                f.debug_tuple("R6gd2xlarge").finish();
            }
            Self::R6gd4xlarge => {
                f.debug_tuple("R6gd4xlarge").finish();
            }
            Self::R6gd8xlarge => {
                f.debug_tuple("R6gd8xlarge").finish();
            }
            Self::R6gdLarge => {
                f.debug_tuple("R6gdLarge").finish();
            }
            Self::R6gdMedium => {
                f.debug_tuple("R6gdMedium").finish();
            }
            Self::R6gdMetal => {
                f.debug_tuple("R6gdMetal").finish();
            }
            Self::R6gdXlarge => {
                f.debug_tuple("R6gdXlarge").finish();
            }
            Self::R6i12xlarge => {
                f.debug_tuple("R6i12xlarge").finish();
            }
            Self::R6i16xlarge => {
                f.debug_tuple("R6i16xlarge").finish();
            }
            Self::R6i24xlarge => {
                f.debug_tuple("R6i24xlarge").finish();
            }
            Self::R6i2xlarge => {
                f.debug_tuple("R6i2xlarge").finish();
            }
            Self::R6i32xlarge => {
                f.debug_tuple("R6i32xlarge").finish();
            }
            Self::R6i4xlarge => {
                f.debug_tuple("R6i4xlarge").finish();
            }
            Self::R6i8xlarge => {
                f.debug_tuple("R6i8xlarge").finish();
            }
            Self::R6iLarge => {
                f.debug_tuple("R6iLarge").finish();
            }
            Self::R6iMetal => {
                f.debug_tuple("R6iMetal").finish();
            }
            Self::R6iXlarge => {
                f.debug_tuple("R6iXlarge").finish();
            }
            Self::T1Micro => {
                f.debug_tuple("T1Micro").finish();
            }
            Self::T22xlarge => {
                f.debug_tuple("T22xlarge").finish();
            }
            Self::T2Large => {
                f.debug_tuple("T2Large").finish();
            }
            Self::T2Medium => {
                f.debug_tuple("T2Medium").finish();
            }
            Self::T2Micro => {
                f.debug_tuple("T2Micro").finish();
            }
            Self::T2Nano => {
                f.debug_tuple("T2Nano").finish();
            }
            Self::T2Small => {
                f.debug_tuple("T2Small").finish();
            }
            Self::T2Xlarge => {
                f.debug_tuple("T2Xlarge").finish();
            }
            Self::T32xlarge => {
                f.debug_tuple("T32xlarge").finish();
            }
            Self::T3Large => {
                f.debug_tuple("T3Large").finish();
            }
            Self::T3Medium => {
                f.debug_tuple("T3Medium").finish();
            }
            Self::T3Micro => {
                f.debug_tuple("T3Micro").finish();
            }
            Self::T3Nano => {
                f.debug_tuple("T3Nano").finish();
            }
            Self::T3Small => {
                f.debug_tuple("T3Small").finish();
            }
            Self::T3Xlarge => {
                f.debug_tuple("T3Xlarge").finish();
            }
            Self::T3a2xlarge => {
                f.debug_tuple("T3a2xlarge").finish();
            }
            Self::T3aLarge => {
                f.debug_tuple("T3aLarge").finish();
            }
            Self::T3aMedium => {
                f.debug_tuple("T3aMedium").finish();
            }
            Self::T3aMicro => {
                f.debug_tuple("T3aMicro").finish();
            }
            Self::T3aNano => {
                f.debug_tuple("T3aNano").finish();
            }
            Self::T3aSmall => {
                f.debug_tuple("T3aSmall").finish();
            }
            Self::T3aXlarge => {
                f.debug_tuple("T3aXlarge").finish();
            }
            Self::T4g2xlarge => {
                f.debug_tuple("T4g2xlarge").finish();
            }
            Self::T4gLarge => {
                f.debug_tuple("T4gLarge").finish();
            }
            Self::T4gMedium => {
                f.debug_tuple("T4gMedium").finish();
            }
            Self::T4gMicro => {
                f.debug_tuple("T4gMicro").finish();
            }
            Self::T4gNano => {
                f.debug_tuple("T4gNano").finish();
            }
            Self::T4gSmall => {
                f.debug_tuple("T4gSmall").finish();
            }
            Self::T4gXlarge => {
                f.debug_tuple("T4gXlarge").finish();
            }
            Self::U12tb1112xlarge => {
                f.debug_tuple("U12tb1112xlarge").finish();
            }
            Self::U12tb1Metal => {
                f.debug_tuple("U12tb1Metal").finish();
            }
            Self::U18tb1Metal => {
                f.debug_tuple("U18tb1Metal").finish();
            }
            Self::U24tb1Metal => {
                f.debug_tuple("U24tb1Metal").finish();
            }
            Self::U6tb1112xlarge => {
                f.debug_tuple("U6tb1112xlarge").finish();
            }
            Self::U6tb156xlarge => {
                f.debug_tuple("U6tb156xlarge").finish();
            }
            Self::U6tb1Metal => {
                f.debug_tuple("U6tb1Metal").finish();
            }
            Self::U9tb1112xlarge => {
                f.debug_tuple("U9tb1112xlarge").finish();
            }
            Self::U9tb1Metal => {
                f.debug_tuple("U9tb1Metal").finish();
            }
            Self::Vt124xlarge => {
                f.debug_tuple("Vt124xlarge").finish();
            }
            Self::Vt13xlarge => {
                f.debug_tuple("Vt13xlarge").finish();
            }
            Self::Vt16xlarge => {
                f.debug_tuple("Vt16xlarge").finish();
            }
            Self::X116xlarge => {
                f.debug_tuple("X116xlarge").finish();
            }
            Self::X132xlarge => {
                f.debug_tuple("X132xlarge").finish();
            }
            Self::X1e16xlarge => {
                f.debug_tuple("X1e16xlarge").finish();
            }
            Self::X1e2xlarge => {
                f.debug_tuple("X1e2xlarge").finish();
            }
            Self::X1e32xlarge => {
                f.debug_tuple("X1e32xlarge").finish();
            }
            Self::X1e4xlarge => {
                f.debug_tuple("X1e4xlarge").finish();
            }
            Self::X1e8xlarge => {
                f.debug_tuple("X1e8xlarge").finish();
            }
            Self::X1eXlarge => {
                f.debug_tuple("X1eXlarge").finish();
            }
            Self::X2gd12xlarge => {
                f.debug_tuple("X2gd12xlarge").finish();
            }
            Self::X2gd16xlarge => {
                f.debug_tuple("X2gd16xlarge").finish();
            }
            Self::X2gd2xlarge => {
                f.debug_tuple("X2gd2xlarge").finish();
            }
            Self::X2gd4xlarge => {
                f.debug_tuple("X2gd4xlarge").finish();
            }
            Self::X2gd8xlarge => {
                f.debug_tuple("X2gd8xlarge").finish();
            }
            Self::X2gdLarge => {
                f.debug_tuple("X2gdLarge").finish();
            }
            Self::X2gdMedium => {
                f.debug_tuple("X2gdMedium").finish();
            }
            Self::X2gdMetal => {
                f.debug_tuple("X2gdMetal").finish();
            }
            Self::X2gdXlarge => {
                f.debug_tuple("X2gdXlarge").finish();
            }
            Self::X2idn16xlarge => {
                f.debug_tuple("X2idn16xlarge").finish();
            }
            Self::X2idn24xlarge => {
                f.debug_tuple("X2idn24xlarge").finish();
            }
            Self::X2idn32xlarge => {
                f.debug_tuple("X2idn32xlarge").finish();
            }
            Self::X2idnMetal => {
                f.debug_tuple("X2idnMetal").finish();
            }
            Self::X2iedn16xlarge => {
                f.debug_tuple("X2iedn16xlarge").finish();
            }
            Self::X2iedn24xlarge => {
                f.debug_tuple("X2iedn24xlarge").finish();
            }
            Self::X2iedn2xlarge => {
                f.debug_tuple("X2iedn2xlarge").finish();
            }
            Self::X2iedn32xlarge => {
                f.debug_tuple("X2iedn32xlarge").finish();
            }
            Self::X2iedn4xlarge => {
                f.debug_tuple("X2iedn4xlarge").finish();
            }
            Self::X2iedn8xlarge => {
                f.debug_tuple("X2iedn8xlarge").finish();
            }
            Self::X2iednMetal => {
                f.debug_tuple("X2iednMetal").finish();
            }
            Self::X2iednXlarge => {
                f.debug_tuple("X2iednXlarge").finish();
            }
            Self::X2iezn12xlarge => {
                f.debug_tuple("X2iezn12xlarge").finish();
            }
            Self::X2iezn2xlarge => {
                f.debug_tuple("X2iezn2xlarge").finish();
            }
            Self::X2iezn4xlarge => {
                f.debug_tuple("X2iezn4xlarge").finish();
            }
            Self::X2iezn6xlarge => {
                f.debug_tuple("X2iezn6xlarge").finish();
            }
            Self::X2iezn8xlarge => {
                f.debug_tuple("X2iezn8xlarge").finish();
            }
            Self::X2ieznMetal => {
                f.debug_tuple("X2ieznMetal").finish();
            }
            Self::Z1d12xlarge => {
                f.debug_tuple("Z1d12xlarge").finish();
            }
            Self::Z1d2xlarge => {
                f.debug_tuple("Z1d2xlarge").finish();
            }
            Self::Z1d3xlarge => {
                f.debug_tuple("Z1d3xlarge").finish();
            }
            Self::Z1d6xlarge => {
                f.debug_tuple("Z1d6xlarge").finish();
            }
            Self::Z1dLarge => {
                f.debug_tuple("Z1dLarge").finish();
            }
            Self::Z1dMetal => {
                f.debug_tuple("Z1dMetal").finish();
            }
            Self::Z1dXlarge => {
                f.debug_tuple("Z1dXlarge").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceTypeHypervisor {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Nitro => {
                f.debug_tuple("Nitro").finish();
            }
            Self::Xen => {
                f.debug_tuple("Xen").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceTypeInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceTypeInfo")
            .field("instance_type", &self.instance_type)
            .field("current_generation", &self.current_generation)
            .field("free_tier_eligible", &self.free_tier_eligible)
            .field("supported_usage_classes", &self.supported_usage_classes)
            .field(
                "supported_root_device_types",
                &self.supported_root_device_types,
            )
            .field(
                "supported_virtualization_types",
                &self.supported_virtualization_types,
            )
            .field("bare_metal", &self.bare_metal)
            .field("hypervisor", &self.hypervisor)
            .field("processor_info", &self.processor_info)
            .field("v_cpu_info", &self.v_cpu_info)
            .field("memory_info", &self.memory_info)
            .field(
                "instance_storage_supported",
                &self.instance_storage_supported,
            )
            .field("instance_storage_info", &self.instance_storage_info)
            .field("ebs_info", &self.ebs_info)
            .field("network_info", &self.network_info)
            .field("gpu_info", &self.gpu_info)
            .field("fpga_info", &self.fpga_info)
            .field("placement_group_info", &self.placement_group_info)
            .field(
                "inference_accelerator_info",
                &self.inference_accelerator_info,
            )
            .field("hibernation_supported", &self.hibernation_supported)
            .field(
                "burstable_performance_supported",
                &self.burstable_performance_supported,
            )
            .field("dedicated_hosts_supported", &self.dedicated_hosts_supported)
            .field("auto_recovery_supported", &self.auto_recovery_supported)
            .field("supported_boot_modes", &self.supported_boot_modes)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceTypeInfoFromInstanceRequirements {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceTypeInfoFromInstanceRequirements")
            .field("instance_type", &self.instance_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceTypeOffering {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceTypeOffering")
            .field("instance_type", &self.instance_type)
            .field("location_type", &self.location_type)
            .field("location", &self.location)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InstanceUsage {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InstanceUsage")
            .field("account_id", &self.account_id)
            .field("used_instance_count", &self.used_instance_count)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IntegrateServices {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IntegrateServices")
            .field("athena_integrations", &self.athena_integrations)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InterfacePermissionType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::EipAssociate => {
                f.debug_tuple("EipAssociate").finish();
            }
            Self::InstanceAttach => {
                f.debug_tuple("InstanceAttach").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InterfaceProtocolType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Gre => {
                f.debug_tuple("Gre").finish();
            }
            Self::Vlan => {
                f.debug_tuple("Vlan").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::InternetGateway {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InternetGateway")
            .field("attachments", &self.attachments)
            .field("internet_gateway_id", &self.internet_gateway_id)
            .field("owner_id", &self.owner_id)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::InternetGatewayAttachment {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("InternetGatewayAttachment")
            .field("state", &self.state)
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpAddressType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Dualstack => {
                f.debug_tuple("Dualstack").finish();
            }
            Self::Ipv4 => {
                f.debug_tuple("Ipv4").finish();
            }
            Self::Ipv6 => {
                f.debug_tuple("Ipv6").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpPermission {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IpPermission")
            .field("from_port", &self.from_port)
            .field("ip_protocol", &self.ip_protocol)
            .field("ip_ranges", &self.ip_ranges)
            .field("ipv6_ranges", &self.ipv6_ranges)
            .field("prefix_list_ids", &self.prefix_list_ids)
            .field("to_port", &self.to_port)
            .field("user_id_group_pairs", &self.user_id_group_pairs)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpRange {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IpRange")
            .field("cidr_ip", &self.cidr_ip)
            .field("description", &self.description)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Ipam {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Ipam")
            .field("owner_id", &self.owner_id)
            .field("ipam_id", &self.ipam_id)
            .field("ipam_arn", &self.ipam_arn)
            .field("ipam_region", &self.ipam_region)
            .field("public_default_scope_id", &self.public_default_scope_id)
            .field("private_default_scope_id", &self.private_default_scope_id)
            .field("scope_count", &self.scope_count)
            .field("description", &self.description)
            .field("operating_regions", &self.operating_regions)
            .field("state", &self.state)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamAddressHistoryRecord {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IpamAddressHistoryRecord")
            .field("resource_owner_id", &self.resource_owner_id)
            .field("resource_region", &self.resource_region)
            .field("resource_type", &self.resource_type)
            .field("resource_id", &self.resource_id)
            .field("resource_cidr", &self.resource_cidr)
            .field("resource_name", &self.resource_name)
            .field(
                "resource_compliance_status",
                &self.resource_compliance_status,
            )
            .field("resource_overlap_status", &self.resource_overlap_status)
            .field("vpc_id", &self.vpc_id)
            .field("sampled_start_time", &self.sampled_start_time)
            .field("sampled_end_time", &self.sampled_end_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamAddressHistoryResourceType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Eip => {
                f.debug_tuple("Eip").finish();
            }
            Self::Instance => {
                f.debug_tuple("Instance").finish();
            }
            Self::NetworkInterface => {
                f.debug_tuple("NetworkInterface").finish();
            }
            Self::Subnet => {
                f.debug_tuple("Subnet").finish();
            }
            Self::Vpc => {
                f.debug_tuple("Vpc").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamCidrAuthorizationContext {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IpamCidrAuthorizationContext")
            .field("message", &self.message)
            .field("signature", &self.signature)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamComplianceStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Compliant => {
                f.debug_tuple("Compliant").finish();
            }
            Self::Ignored => {
                f.debug_tuple("Ignored").finish();
            }
            Self::Noncompliant => {
                f.debug_tuple("Noncompliant").finish();
            }
            Self::Unmanaged => {
                f.debug_tuple("Unmanaged").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamManagementState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Ignored => {
                f.debug_tuple("Ignored").finish();
            }
            Self::Managed => {
                f.debug_tuple("Managed").finish();
            }
            Self::Unmanaged => {
                f.debug_tuple("Unmanaged").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamOperatingRegion {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IpamOperatingRegion")
            .field("region_name", &self.region_name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamOverlapStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Ignored => {
                f.debug_tuple("Ignored").finish();
            }
            Self::Nonoverlapping => {
                f.debug_tuple("Nonoverlapping").finish();
            }
            Self::Overlapping => {
                f.debug_tuple("Overlapping").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamPool {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IpamPool")
            .field("owner_id", &self.owner_id)
            .field("ipam_pool_id", &self.ipam_pool_id)
            .field("source_ipam_pool_id", &self.source_ipam_pool_id)
            .field("ipam_pool_arn", &self.ipam_pool_arn)
            .field("ipam_scope_arn", &self.ipam_scope_arn)
            .field("ipam_scope_type", &self.ipam_scope_type)
            .field("ipam_arn", &self.ipam_arn)
            .field("ipam_region", &self.ipam_region)
            .field("locale", &self.locale)
            .field("pool_depth", &self.pool_depth)
            .field("state", &self.state)
            .field("state_message", &self.state_message)
            .field("description", &self.description)
            .field("auto_import", &self.auto_import)
            .field("publicly_advertisable", &self.publicly_advertisable)
            .field("address_family", &self.address_family)
            .field(
                "allocation_min_netmask_length",
                &self.allocation_min_netmask_length,
            )
            .field(
                "allocation_max_netmask_length",
                &self.allocation_max_netmask_length,
            )
            .field(
                "allocation_default_netmask_length",
                &self.allocation_default_netmask_length,
            )
            .field("allocation_resource_tags", &self.allocation_resource_tags)
            .field("tags", &self.tags)
            .field("aws_service", &self.aws_service)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamPoolAllocation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IpamPoolAllocation")
            .field("cidr", &self.cidr)
            .field("ipam_pool_allocation_id", &self.ipam_pool_allocation_id)
            .field("description", &self.description)
            .field("resource_id", &self.resource_id)
            .field("resource_type", &self.resource_type)
            .field("resource_region", &self.resource_region)
            .field("resource_owner", &self.resource_owner)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamPoolAllocationResourceType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Custom => {
                f.debug_tuple("Custom").finish();
            }
            Self::Ec2PublicIpv4Pool => {
                f.debug_tuple("Ec2PublicIpv4Pool").finish();
            }
            Self::IpamPool => {
                f.debug_tuple("IpamPool").finish();
            }
            Self::Vpc => {
                f.debug_tuple("Vpc").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamPoolAwsService {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Ec2 => {
                f.debug_tuple("Ec2").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamPoolCidr {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IpamPoolCidr")
            .field("cidr", &self.cidr)
            .field("state", &self.state)
            .field("failure_reason", &self.failure_reason)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamPoolCidrFailureCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::CidrNotAvailable => {
                f.debug_tuple("CidrNotAvailable").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamPoolCidrFailureReason {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IpamPoolCidrFailureReason")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamPoolCidrState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Deprovisioned => {
                f.debug_tuple("Deprovisioned").finish();
            }
            Self::FailedDeprovision => {
                f.debug_tuple("FailedDeprovision").finish();
            }
            Self::FailedImport => {
                f.debug_tuple("FailedImport").finish();
            }
            Self::FailedProvision => {
                f.debug_tuple("FailedProvision").finish();
            }
            Self::PendingDeprovision => {
                f.debug_tuple("PendingDeprovision").finish();
            }
            Self::PendingImport => {
                f.debug_tuple("PendingImport").finish();
            }
            Self::PendingProvision => {
                f.debug_tuple("PendingProvision").finish();
            }
            Self::Provisioned => {
                f.debug_tuple("Provisioned").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamPoolState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::CreateComplete => {
                f.debug_tuple("CreateComplete").finish();
            }
            Self::CreateFailed => {
                f.debug_tuple("CreateFailed").finish();
            }
            Self::CreateInProgress => {
                f.debug_tuple("CreateInProgress").finish();
            }
            Self::DeleteComplete => {
                f.debug_tuple("DeleteComplete").finish();
            }
            Self::DeleteFailed => {
                f.debug_tuple("DeleteFailed").finish();
            }
            Self::DeleteInProgress => {
                f.debug_tuple("DeleteInProgress").finish();
            }
            Self::IsolateComplete => {
                f.debug_tuple("IsolateComplete").finish();
            }
            Self::IsolateInProgress => {
                f.debug_tuple("IsolateInProgress").finish();
            }
            Self::ModifyComplete => {
                f.debug_tuple("ModifyComplete").finish();
            }
            Self::ModifyFailed => {
                f.debug_tuple("ModifyFailed").finish();
            }
            Self::ModifyInProgress => {
                f.debug_tuple("ModifyInProgress").finish();
            }
            Self::RestoreInProgress => {
                f.debug_tuple("RestoreInProgress").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamResourceCidr {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IpamResourceCidr")
            .field("ipam_id", &self.ipam_id)
            .field("ipam_scope_id", &self.ipam_scope_id)
            .field("ipam_pool_id", &self.ipam_pool_id)
            .field("resource_region", &self.resource_region)
            .field("resource_owner_id", &self.resource_owner_id)
            .field("resource_id", &self.resource_id)
            .field("resource_name", &self.resource_name)
            .field("resource_cidr", &self.resource_cidr)
            .field("resource_type", &self.resource_type)
            .field("resource_tags", &self.resource_tags)
            .field("ip_usage", &self.ip_usage)
            .field("compliance_status", &self.compliance_status)
            .field("management_state", &self.management_state)
            .field("overlap_status", &self.overlap_status)
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamResourceTag {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IpamResourceTag")
            .field("key", &self.key)
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamResourceType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Eip => {
                f.debug_tuple("Eip").finish();
            }
            Self::Ipv6Pool => {
                f.debug_tuple("Ipv6Pool").finish();
            }
            Self::PublicIpv4Pool => {
                f.debug_tuple("PublicIpv4Pool").finish();
            }
            Self::Subnet => {
                f.debug_tuple("Subnet").finish();
            }
            Self::Vpc => {
                f.debug_tuple("Vpc").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamScope {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("IpamScope")
            .field("owner_id", &self.owner_id)
            .field("ipam_scope_id", &self.ipam_scope_id)
            .field("ipam_scope_arn", &self.ipam_scope_arn)
            .field("ipam_arn", &self.ipam_arn)
            .field("ipam_region", &self.ipam_region)
            .field("ipam_scope_type", &self.ipam_scope_type)
            .field("is_default", &self.is_default)
            .field("description", &self.description)
            .field("pool_count", &self.pool_count)
            .field("state", &self.state)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamScopeState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::CreateComplete => {
                f.debug_tuple("CreateComplete").finish();
            }
            Self::CreateFailed => {
                f.debug_tuple("CreateFailed").finish();
            }
            Self::CreateInProgress => {
                f.debug_tuple("CreateInProgress").finish();
            }
            Self::DeleteComplete => {
                f.debug_tuple("DeleteComplete").finish();
            }
            Self::DeleteFailed => {
                f.debug_tuple("DeleteFailed").finish();
            }
            Self::DeleteInProgress => {
                f.debug_tuple("DeleteInProgress").finish();
            }
            Self::IsolateComplete => {
                f.debug_tuple("IsolateComplete").finish();
            }
            Self::IsolateInProgress => {
                f.debug_tuple("IsolateInProgress").finish();
            }
            Self::ModifyComplete => {
                f.debug_tuple("ModifyComplete").finish();
            }
            Self::ModifyFailed => {
                f.debug_tuple("ModifyFailed").finish();
            }
            Self::ModifyInProgress => {
                f.debug_tuple("ModifyInProgress").finish();
            }
            Self::RestoreInProgress => {
                f.debug_tuple("RestoreInProgress").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamScopeType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Private => {
                f.debug_tuple("Private").finish();
            }
            Self::Public => {
                f.debug_tuple("Public").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::IpamState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::CreateComplete => {
                f.debug_tuple("CreateComplete").finish();
            }
            Self::CreateFailed => {
                f.debug_tuple("CreateFailed").finish();
            }
            Self::CreateInProgress => {
                f.debug_tuple("CreateInProgress").finish();
            }
            Self::DeleteComplete => {
                f.debug_tuple("DeleteComplete").finish();
            }
            Self::DeleteFailed => {
                f.debug_tuple("DeleteFailed").finish();
            }
            Self::DeleteInProgress => {
                f.debug_tuple("DeleteInProgress").finish();
            }
            Self::IsolateComplete => {
                f.debug_tuple("IsolateComplete").finish();
            }
            Self::IsolateInProgress => {
                f.debug_tuple("IsolateInProgress").finish();
            }
            Self::ModifyComplete => {
                f.debug_tuple("ModifyComplete").finish();
            }
            Self::ModifyFailed => {
                f.debug_tuple("ModifyFailed").finish();
            }
            Self::ModifyInProgress => {
                f.debug_tuple("ModifyInProgress").finish();
            }
            Self::RestoreInProgress => {
                f.debug_tuple("RestoreInProgress").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::Ipv4PrefixSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Ipv4PrefixSpecification")
            .field("ipv4_prefix", &self.ipv4_prefix)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Ipv4PrefixSpecificationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Ipv4PrefixSpecificationRequest")
            .field("ipv4_prefix", &self.ipv4_prefix)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Ipv4PrefixSpecificationResponse {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Ipv4PrefixSpecificationResponse")
            .field("ipv4_prefix", &self.ipv4_prefix)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Ipv6CidrAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Ipv6CidrAssociation")
            .field("ipv6_cidr", &self.ipv6_cidr)
            .field("associated_resource", &self.associated_resource)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Ipv6CidrBlock {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Ipv6CidrBlock")
            .field("ipv6_cidr_block", &self.ipv6_cidr_block)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Ipv6Pool {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Ipv6Pool")
            .field("pool_id", &self.pool_id)
            .field("description", &self.description)
            .field("pool_cidr_blocks", &self.pool_cidr_blocks)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Ipv6PrefixSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Ipv6PrefixSpecification")
            .field("ipv6_prefix", &self.ipv6_prefix)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Ipv6PrefixSpecificationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Ipv6PrefixSpecificationRequest")
            .field("ipv6_prefix", &self.ipv6_prefix)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Ipv6PrefixSpecificationResponse {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Ipv6PrefixSpecificationResponse")
            .field("ipv6_prefix", &self.ipv6_prefix)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Ipv6Range {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Ipv6Range")
            .field("cidr_ipv6", &self.cidr_ipv6)
            .field("description", &self.description)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Ipv6SupportValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disable => {
                f.debug_tuple("Disable").finish();
            }
            Self::Enable => {
                f.debug_tuple("Enable").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::KeyFormat {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Pem => {
                f.debug_tuple("Pem").finish();
            }
            Self::Ppk => {
                f.debug_tuple("Ppk").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::KeyPairInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("KeyPairInfo")
            .field("key_pair_id", &self.key_pair_id)
            .field("key_fingerprint", &self.key_fingerprint)
            .field("key_name", &self.key_name)
            .field("key_type", &self.key_type)
            .field("tags", &self.tags)
            .field("public_key", &self.public_key)
            .field("create_time", &self.create_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::KeyType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Ed25519 => {
                f.debug_tuple("Ed25519").finish();
            }
            Self::Rsa => {
                f.debug_tuple("Rsa").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::LastError {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LastError")
            .field("message", &self.message)
            .field("code", &self.code)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchPermission {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchPermission")
            .field("group", &self.group)
            .field("user_id", &self.user_id)
            .field("organization_arn", &self.organization_arn)
            .field("organizational_unit_arn", &self.organizational_unit_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchPermissionModifications {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchPermissionModifications")
            .field("add", &self.add)
            .field("remove", &self.remove)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchSpecification")
            .field("user_data", &self.user_data)
            .field("security_groups", &self.security_groups)
            .field("addressing_type", &self.addressing_type)
            .field("block_device_mappings", &self.block_device_mappings)
            .field("ebs_optimized", &self.ebs_optimized)
            .field("iam_instance_profile", &self.iam_instance_profile)
            .field("image_id", &self.image_id)
            .field("instance_type", &self.instance_type)
            .field("kernel_id", &self.kernel_id)
            .field("key_name", &self.key_name)
            .field("network_interfaces", &self.network_interfaces)
            .field("placement", &self.placement)
            .field("ramdisk_id", &self.ramdisk_id)
            .field("subnet_id", &self.subnet_id)
            .field("monitoring", &self.monitoring)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplate {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplate")
            .field("launch_template_id", &self.launch_template_id)
            .field("launch_template_name", &self.launch_template_name)
            .field("create_time", &self.create_time)
            .field("created_by", &self.created_by)
            .field("default_version_number", &self.default_version_number)
            .field("latest_version_number", &self.latest_version_number)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateAndOverridesResponse {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateAndOverridesResponse")
            .field(
                "launch_template_specification",
                &self.launch_template_specification,
            )
            .field("overrides", &self.overrides)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateAutoRecoveryState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Default => {
                f.debug_tuple("Default").finish();
            }
            Self::Disabled => {
                f.debug_tuple("Disabled").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateBlockDeviceMapping {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateBlockDeviceMapping")
            .field("device_name", &self.device_name)
            .field("virtual_name", &self.virtual_name)
            .field("ebs", &self.ebs)
            .field("no_device", &self.no_device)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateBlockDeviceMappingRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateBlockDeviceMappingRequest")
            .field("device_name", &self.device_name)
            .field("virtual_name", &self.virtual_name)
            .field("ebs", &self.ebs)
            .field("no_device", &self.no_device)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateCapacityReservationSpecificationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateCapacityReservationSpecificationRequest")
            .field(
                "capacity_reservation_preference",
                &self.capacity_reservation_preference,
            )
            .field(
                "capacity_reservation_target",
                &self.capacity_reservation_target,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateCapacityReservationSpecificationResponse {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateCapacityReservationSpecificationResponse")
            .field(
                "capacity_reservation_preference",
                &self.capacity_reservation_preference,
            )
            .field(
                "capacity_reservation_target",
                &self.capacity_reservation_target,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateConfig {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateConfig")
            .field(
                "launch_template_specification",
                &self.launch_template_specification,
            )
            .field("overrides", &self.overrides)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateCpuOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateCpuOptions")
            .field("core_count", &self.core_count)
            .field("threads_per_core", &self.threads_per_core)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateCpuOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateCpuOptionsRequest")
            .field("core_count", &self.core_count)
            .field("threads_per_core", &self.threads_per_core)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateEbsBlockDevice {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateEbsBlockDevice")
            .field("encrypted", &self.encrypted)
            .field("delete_on_termination", &self.delete_on_termination)
            .field("iops", &self.iops)
            .field("kms_key_id", &self.kms_key_id)
            .field("snapshot_id", &self.snapshot_id)
            .field("volume_size", &self.volume_size)
            .field("volume_type", &self.volume_type)
            .field("throughput", &self.throughput)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateEbsBlockDeviceRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateEbsBlockDeviceRequest")
            .field("encrypted", &self.encrypted)
            .field("delete_on_termination", &self.delete_on_termination)
            .field("iops", &self.iops)
            .field("kms_key_id", &self.kms_key_id)
            .field("snapshot_id", &self.snapshot_id)
            .field("volume_size", &self.volume_size)
            .field("volume_type", &self.volume_type)
            .field("throughput", &self.throughput)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateElasticInferenceAccelerator {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateElasticInferenceAccelerator")
            .field("r#type", &self.r#type)
            .field("count", &self.count)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateElasticInferenceAcceleratorResponse {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateElasticInferenceAcceleratorResponse")
            .field("r#type", &self.r#type)
            .field("count", &self.count)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateEnclaveOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateEnclaveOptions")
            .field("enabled", &self.enabled)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateEnclaveOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateEnclaveOptionsRequest")
            .field("enabled", &self.enabled)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateErrorCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::LaunchTemplateIdDoesNotExist => {
                f.debug_tuple("LaunchTemplateIdDoesNotExist").finish();
            }
            Self::LaunchTemplateIdMalformed => {
                f.debug_tuple("LaunchTemplateIdMalformed").finish();
            }
            Self::LaunchTemplateNameDoesNotExist => {
                f.debug_tuple("LaunchTemplateNameDoesNotExist").finish();
            }
            Self::LaunchTemplateNameMalformed => {
                f.debug_tuple("LaunchTemplateNameMalformed").finish();
            }
            Self::LaunchTemplateVersionDoesNotExist => {
                f.debug_tuple("LaunchTemplateVersionDoesNotExist").finish();
            }
            Self::UnexpectedError => {
                f.debug_tuple("UnexpectedError").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateHibernationOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateHibernationOptions")
            .field("configured", &self.configured)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateHibernationOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateHibernationOptionsRequest")
            .field("configured", &self.configured)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateHttpTokensState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Optional => {
                f.debug_tuple("Optional").finish();
            }
            Self::Required => {
                f.debug_tuple("Required").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateIamInstanceProfileSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateIamInstanceProfileSpecification")
            .field("arn", &self.arn)
            .field("name", &self.name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateIamInstanceProfileSpecificationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateIamInstanceProfileSpecificationRequest")
            .field("arn", &self.arn)
            .field("name", &self.name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateInstanceMaintenanceOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateInstanceMaintenanceOptions")
            .field("auto_recovery", &self.auto_recovery)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateInstanceMaintenanceOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateInstanceMaintenanceOptionsRequest")
            .field("auto_recovery", &self.auto_recovery)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateInstanceMarketOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateInstanceMarketOptions")
            .field("market_type", &self.market_type)
            .field("spot_options", &self.spot_options)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateInstanceMarketOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateInstanceMarketOptionsRequest")
            .field("market_type", &self.market_type)
            .field("spot_options", &self.spot_options)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateInstanceMetadataEndpointState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disabled => {
                f.debug_tuple("Disabled").finish();
            }
            Self::Enabled => {
                f.debug_tuple("Enabled").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateInstanceMetadataOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateInstanceMetadataOptions")
            .field("state", &self.state)
            .field("http_tokens", &self.http_tokens)
            .field(
                "http_put_response_hop_limit",
                &self.http_put_response_hop_limit,
            )
            .field("http_endpoint", &self.http_endpoint)
            .field("http_protocol_ipv6", &self.http_protocol_ipv6)
            .field("instance_metadata_tags", &self.instance_metadata_tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateInstanceMetadataOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateInstanceMetadataOptionsRequest")
            .field("http_tokens", &self.http_tokens)
            .field(
                "http_put_response_hop_limit",
                &self.http_put_response_hop_limit,
            )
            .field("http_endpoint", &self.http_endpoint)
            .field("http_protocol_ipv6", &self.http_protocol_ipv6)
            .field("instance_metadata_tags", &self.instance_metadata_tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateInstanceMetadataOptionsState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Applied => {
                f.debug_tuple("Applied").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateInstanceMetadataProtocolIpv6 {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disabled => {
                f.debug_tuple("Disabled").finish();
            }
            Self::Enabled => {
                f.debug_tuple("Enabled").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateInstanceMetadataTagsState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disabled => {
                f.debug_tuple("Disabled").finish();
            }
            Self::Enabled => {
                f.debug_tuple("Enabled").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateInstanceNetworkInterfaceSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateInstanceNetworkInterfaceSpecification")
            .field(
                "associate_carrier_ip_address",
                &self.associate_carrier_ip_address,
            )
            .field(
                "associate_public_ip_address",
                &self.associate_public_ip_address,
            )
            .field("delete_on_termination", &self.delete_on_termination)
            .field("description", &self.description)
            .field("device_index", &self.device_index)
            .field("groups", &self.groups)
            .field("interface_type", &self.interface_type)
            .field("ipv6_address_count", &self.ipv6_address_count)
            .field("ipv6_addresses", &self.ipv6_addresses)
            .field("network_interface_id", &self.network_interface_id)
            .field("private_ip_address", &self.private_ip_address)
            .field("private_ip_addresses", &self.private_ip_addresses)
            .field(
                "secondary_private_ip_address_count",
                &self.secondary_private_ip_address_count,
            )
            .field("subnet_id", &self.subnet_id)
            .field("network_card_index", &self.network_card_index)
            .field("ipv4_prefixes", &self.ipv4_prefixes)
            .field("ipv4_prefix_count", &self.ipv4_prefix_count)
            .field("ipv6_prefixes", &self.ipv6_prefixes)
            .field("ipv6_prefix_count", &self.ipv6_prefix_count)
            .finish()
    }
}
impl crate::Debug
    for aws_sdk_ec2::model::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest
{
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateInstanceNetworkInterfaceSpecificationRequest")
            .field(
                "associate_carrier_ip_address",
                &self.associate_carrier_ip_address,
            )
            .field(
                "associate_public_ip_address",
                &self.associate_public_ip_address,
            )
            .field("delete_on_termination", &self.delete_on_termination)
            .field("description", &self.description)
            .field("device_index", &self.device_index)
            .field("groups", &self.groups)
            .field("interface_type", &self.interface_type)
            .field("ipv6_address_count", &self.ipv6_address_count)
            .field("ipv6_addresses", &self.ipv6_addresses)
            .field("network_interface_id", &self.network_interface_id)
            .field("private_ip_address", &self.private_ip_address)
            .field("private_ip_addresses", &self.private_ip_addresses)
            .field(
                "secondary_private_ip_address_count",
                &self.secondary_private_ip_address_count,
            )
            .field("subnet_id", &self.subnet_id)
            .field("network_card_index", &self.network_card_index)
            .field("ipv4_prefixes", &self.ipv4_prefixes)
            .field("ipv4_prefix_count", &self.ipv4_prefix_count)
            .field("ipv6_prefixes", &self.ipv6_prefixes)
            .field("ipv6_prefix_count", &self.ipv6_prefix_count)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateLicenseConfiguration {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateLicenseConfiguration")
            .field("license_configuration_arn", &self.license_configuration_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateLicenseConfigurationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateLicenseConfigurationRequest")
            .field("license_configuration_arn", &self.license_configuration_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateOverrides {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateOverrides")
            .field("instance_type", &self.instance_type)
            .field("spot_price", &self.spot_price)
            .field("subnet_id", &self.subnet_id)
            .field("availability_zone", &self.availability_zone)
            .field("weighted_capacity", &self.weighted_capacity)
            .field("priority", &self.priority)
            .field("instance_requirements", &self.instance_requirements)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplatePlacement {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplatePlacement")
            .field("availability_zone", &self.availability_zone)
            .field("affinity", &self.affinity)
            .field("group_name", &self.group_name)
            .field("host_id", &self.host_id)
            .field("tenancy", &self.tenancy)
            .field("spread_domain", &self.spread_domain)
            .field("host_resource_group_arn", &self.host_resource_group_arn)
            .field("partition_number", &self.partition_number)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplatePlacementRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplatePlacementRequest")
            .field("availability_zone", &self.availability_zone)
            .field("affinity", &self.affinity)
            .field("group_name", &self.group_name)
            .field("host_id", &self.host_id)
            .field("tenancy", &self.tenancy)
            .field("spread_domain", &self.spread_domain)
            .field("host_resource_group_arn", &self.host_resource_group_arn)
            .field("partition_number", &self.partition_number)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplatePrivateDnsNameOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplatePrivateDnsNameOptions")
            .field("hostname_type", &self.hostname_type)
            .field(
                "enable_resource_name_dns_a_record",
                &self.enable_resource_name_dns_a_record,
            )
            .field(
                "enable_resource_name_dns_aaaa_record",
                &self.enable_resource_name_dns_aaaa_record,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplatePrivateDnsNameOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplatePrivateDnsNameOptionsRequest")
            .field("hostname_type", &self.hostname_type)
            .field(
                "enable_resource_name_dns_a_record",
                &self.enable_resource_name_dns_a_record,
            )
            .field(
                "enable_resource_name_dns_aaaa_record",
                &self.enable_resource_name_dns_aaaa_record,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateSpecification")
            .field("launch_template_id", &self.launch_template_id)
            .field("launch_template_name", &self.launch_template_name)
            .field("version", &self.version)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateSpotMarketOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateSpotMarketOptions")
            .field("max_price", &self.max_price)
            .field("spot_instance_type", &self.spot_instance_type)
            .field("block_duration_minutes", &self.block_duration_minutes)
            .field("valid_until", &self.valid_until)
            .field(
                "instance_interruption_behavior",
                &self.instance_interruption_behavior,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateSpotMarketOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateSpotMarketOptionsRequest")
            .field("max_price", &self.max_price)
            .field("spot_instance_type", &self.spot_instance_type)
            .field("block_duration_minutes", &self.block_duration_minutes)
            .field("valid_until", &self.valid_until)
            .field(
                "instance_interruption_behavior",
                &self.instance_interruption_behavior,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateTagSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateTagSpecification")
            .field("resource_type", &self.resource_type)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateTagSpecificationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateTagSpecificationRequest")
            .field("resource_type", &self.resource_type)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplateVersion {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplateVersion")
            .field("launch_template_id", &self.launch_template_id)
            .field("launch_template_name", &self.launch_template_name)
            .field("version_number", &self.version_number)
            .field("version_description", &self.version_description)
            .field("create_time", &self.create_time)
            .field("created_by", &self.created_by)
            .field("default_version", &self.default_version)
            .field("launch_template_data", &self.launch_template_data)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplatesMonitoring {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplatesMonitoring")
            .field("enabled", &self.enabled)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LaunchTemplatesMonitoringRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LaunchTemplatesMonitoringRequest")
            .field("enabled", &self.enabled)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LicenseConfiguration {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LicenseConfiguration")
            .field("license_configuration_arn", &self.license_configuration_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LicenseConfigurationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LicenseConfigurationRequest")
            .field("license_configuration_arn", &self.license_configuration_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ListingState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Cancelled => {
                f.debug_tuple("Cancelled").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Sold => {
                f.debug_tuple("Sold").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ListingStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Cancelled => {
                f.debug_tuple("Cancelled").finish();
            }
            Self::Closed => {
                f.debug_tuple("Closed").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::LoadBalancersConfig {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LoadBalancersConfig")
            .field(
                "classic_load_balancers_config",
                &self.classic_load_balancers_config,
            )
            .field("target_groups_config", &self.target_groups_config)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LoadPermission {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LoadPermission")
            .field("user_id", &self.user_id)
            .field("group", &self.group)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LoadPermissionModifications {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LoadPermissionModifications")
            .field("add", &self.add)
            .field("remove", &self.remove)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LoadPermissionRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LoadPermissionRequest")
            .field("group", &self.group)
            .field("user_id", &self.user_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LocalGateway {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LocalGateway")
            .field("local_gateway_id", &self.local_gateway_id)
            .field("outpost_arn", &self.outpost_arn)
            .field("owner_id", &self.owner_id)
            .field("state", &self.state)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LocalGatewayRoute {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LocalGatewayRoute")
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field(
                "local_gateway_virtual_interface_group_id",
                &self.local_gateway_virtual_interface_group_id,
            )
            .field("r#type", &self.r#type)
            .field("state", &self.state)
            .field(
                "local_gateway_route_table_id",
                &self.local_gateway_route_table_id,
            )
            .field(
                "local_gateway_route_table_arn",
                &self.local_gateway_route_table_arn,
            )
            .field("owner_id", &self.owner_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LocalGatewayRouteState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Blackhole => {
                f.debug_tuple("Blackhole").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::LocalGatewayRouteTable {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LocalGatewayRouteTable")
            .field(
                "local_gateway_route_table_id",
                &self.local_gateway_route_table_id,
            )
            .field(
                "local_gateway_route_table_arn",
                &self.local_gateway_route_table_arn,
            )
            .field("local_gateway_id", &self.local_gateway_id)
            .field("outpost_arn", &self.outpost_arn)
            .field("owner_id", &self.owner_id)
            .field("state", &self.state)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LocalGatewayRouteTableVirtualInterfaceGroupAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LocalGatewayRouteTableVirtualInterfaceGroupAssociation")
            .field(
                "local_gateway_route_table_virtual_interface_group_association_id",
                &self.local_gateway_route_table_virtual_interface_group_association_id,
            )
            .field(
                "local_gateway_virtual_interface_group_id",
                &self.local_gateway_virtual_interface_group_id,
            )
            .field("local_gateway_id", &self.local_gateway_id)
            .field(
                "local_gateway_route_table_id",
                &self.local_gateway_route_table_id,
            )
            .field(
                "local_gateway_route_table_arn",
                &self.local_gateway_route_table_arn,
            )
            .field("owner_id", &self.owner_id)
            .field("state", &self.state)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LocalGatewayRouteTableVpcAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LocalGatewayRouteTableVpcAssociation")
            .field(
                "local_gateway_route_table_vpc_association_id",
                &self.local_gateway_route_table_vpc_association_id,
            )
            .field(
                "local_gateway_route_table_id",
                &self.local_gateway_route_table_id,
            )
            .field(
                "local_gateway_route_table_arn",
                &self.local_gateway_route_table_arn,
            )
            .field("local_gateway_id", &self.local_gateway_id)
            .field("vpc_id", &self.vpc_id)
            .field("owner_id", &self.owner_id)
            .field("state", &self.state)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LocalGatewayRouteType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Propagated => {
                f.debug_tuple("Propagated").finish();
            }
            Self::Static => {
                f.debug_tuple("Static").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::LocalGatewayVirtualInterface {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LocalGatewayVirtualInterface")
            .field(
                "local_gateway_virtual_interface_id",
                &self.local_gateway_virtual_interface_id,
            )
            .field("local_gateway_id", &self.local_gateway_id)
            .field("vlan", &self.vlan)
            .field("local_address", &self.local_address)
            .field("peer_address", &self.peer_address)
            .field("local_bgp_asn", &self.local_bgp_asn)
            .field("peer_bgp_asn", &self.peer_bgp_asn)
            .field("owner_id", &self.owner_id)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LocalGatewayVirtualInterfaceGroup {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("LocalGatewayVirtualInterfaceGroup")
            .field(
                "local_gateway_virtual_interface_group_id",
                &self.local_gateway_virtual_interface_group_id,
            )
            .field(
                "local_gateway_virtual_interface_ids",
                &self.local_gateway_virtual_interface_ids,
            )
            .field("local_gateway_id", &self.local_gateway_id)
            .field("owner_id", &self.owner_id)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::LocalStorage {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Excluded => {
                f.debug_tuple("Excluded").finish();
            }
            Self::Included => {
                f.debug_tuple("Included").finish();
            }
            Self::Required => {
                f.debug_tuple("Required").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::LocalStorageType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Hdd => {
                f.debug_tuple("Hdd").finish();
            }
            Self::Ssd => {
                f.debug_tuple("Ssd").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::LocationType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::AvailabilityZone => {
                f.debug_tuple("AvailabilityZone").finish();
            }
            Self::AvailabilityZoneId => {
                f.debug_tuple("AvailabilityZoneId").finish();
            }
            Self::Region => {
                f.debug_tuple("Region").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::LogDestinationType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::CloudWatchLogs => {
                f.debug_tuple("CloudWatchLogs").finish();
            }
            Self::S3 => {
                f.debug_tuple("S3").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ManagedPrefixList {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ManagedPrefixList")
            .field("prefix_list_id", &self.prefix_list_id)
            .field("address_family", &self.address_family)
            .field("state", &self.state)
            .field("state_message", &self.state_message)
            .field("prefix_list_arn", &self.prefix_list_arn)
            .field("prefix_list_name", &self.prefix_list_name)
            .field("max_entries", &self.max_entries)
            .field("version", &self.version)
            .field("tags", &self.tags)
            .field("owner_id", &self.owner_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::MarketType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Spot => {
                f.debug_tuple("Spot").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::MembershipType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Igmp => {
                f.debug_tuple("Igmp").finish();
            }
            Self::Static => {
                f.debug_tuple("Static").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::MemoryGiBPerVCpu {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("MemoryGiBPerVCpu")
            .field("min", &self.min)
            .field("max", &self.max)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::MemoryGiBPerVCpuRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("MemoryGiBPerVCpuRequest")
            .field("min", &self.min)
            .field("max", &self.max)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::MemoryInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("MemoryInfo")
            .field("size_in_mi_b", &self.size_in_mi_b)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::MemoryMiB {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("MemoryMiB")
            .field("min", &self.min)
            .field("max", &self.max)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::MemoryMiBRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("MemoryMiBRequest")
            .field("min", &self.min)
            .field("max", &self.max)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ModifyAvailabilityZoneOptInStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::NotOptedIn => {
                f.debug_tuple("NotOptedIn").finish();
            }
            Self::OptedIn => {
                f.debug_tuple("OptedIn").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ModifyTransitGatewayOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyTransitGatewayOptions")
            .field(
                "add_transit_gateway_cidr_blocks",
                &self.add_transit_gateway_cidr_blocks,
            )
            .field(
                "remove_transit_gateway_cidr_blocks",
                &self.remove_transit_gateway_cidr_blocks,
            )
            .field("vpn_ecmp_support", &self.vpn_ecmp_support)
            .field("dns_support", &self.dns_support)
            .field(
                "auto_accept_shared_attachments",
                &self.auto_accept_shared_attachments,
            )
            .field(
                "default_route_table_association",
                &self.default_route_table_association,
            )
            .field(
                "association_default_route_table_id",
                &self.association_default_route_table_id,
            )
            .field(
                "default_route_table_propagation",
                &self.default_route_table_propagation,
            )
            .field(
                "propagation_default_route_table_id",
                &self.propagation_default_route_table_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ModifyTransitGatewayVpcAttachmentRequestOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyTransitGatewayVpcAttachmentRequestOptions")
            .field("dns_support", &self.dns_support)
            .field("ipv6_support", &self.ipv6_support)
            .field("appliance_mode_support", &self.appliance_mode_support)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ModifyVpnTunnelOptionsSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpnTunnelOptionsSpecification")
            .field("tunnel_inside_cidr", &self.tunnel_inside_cidr)
            .field("tunnel_inside_ipv6_cidr", &self.tunnel_inside_ipv6_cidr)
            .field("pre_shared_key", &self.pre_shared_key)
            .field("phase1_lifetime_seconds", &self.phase1_lifetime_seconds)
            .field("phase2_lifetime_seconds", &self.phase2_lifetime_seconds)
            .field("rekey_margin_time_seconds", &self.rekey_margin_time_seconds)
            .field("rekey_fuzz_percentage", &self.rekey_fuzz_percentage)
            .field("replay_window_size", &self.replay_window_size)
            .field("dpd_timeout_seconds", &self.dpd_timeout_seconds)
            .field("dpd_timeout_action", &self.dpd_timeout_action)
            .field(
                "phase1_encryption_algorithms",
                &self.phase1_encryption_algorithms,
            )
            .field(
                "phase2_encryption_algorithms",
                &self.phase2_encryption_algorithms,
            )
            .field(
                "phase1_integrity_algorithms",
                &self.phase1_integrity_algorithms,
            )
            .field(
                "phase2_integrity_algorithms",
                &self.phase2_integrity_algorithms,
            )
            .field("phase1_dh_group_numbers", &self.phase1_dh_group_numbers)
            .field("phase2_dh_group_numbers", &self.phase2_dh_group_numbers)
            .field("ike_versions", &self.ike_versions)
            .field("startup_action", &self.startup_action)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Monitoring {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Monitoring")
            .field("state", &self.state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::MonitoringState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disabled => {
                f.debug_tuple("Disabled").finish();
            }
            Self::Disabling => {
                f.debug_tuple("Disabling").finish();
            }
            Self::Enabled => {
                f.debug_tuple("Enabled").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::MoveStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::MovingToVpc => {
                f.debug_tuple("MovingToVpc").finish();
            }
            Self::RestoringToClassic => {
                f.debug_tuple("RestoringToClassic").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::MovingAddressStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("MovingAddressStatus")
            .field("move_status", &self.move_status)
            .field("public_ip", &self.public_ip)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::MulticastSupportValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disable => {
                f.debug_tuple("Disable").finish();
            }
            Self::Enable => {
                f.debug_tuple("Enable").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::NatGateway {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NatGateway")
            .field("create_time", &self.create_time)
            .field("delete_time", &self.delete_time)
            .field("failure_code", &self.failure_code)
            .field("failure_message", &self.failure_message)
            .field("nat_gateway_addresses", &self.nat_gateway_addresses)
            .field("nat_gateway_id", &self.nat_gateway_id)
            .field("provisioned_bandwidth", &self.provisioned_bandwidth)
            .field("state", &self.state)
            .field("subnet_id", &self.subnet_id)
            .field("vpc_id", &self.vpc_id)
            .field("tags", &self.tags)
            .field("connectivity_type", &self.connectivity_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NatGatewayAddress {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NatGatewayAddress")
            .field("allocation_id", &self.allocation_id)
            .field("network_interface_id", &self.network_interface_id)
            .field("private_ip", &self.private_ip)
            .field("public_ip", &self.public_ip)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NatGatewayState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkAcl {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkAcl")
            .field("associations", &self.associations)
            .field("entries", &self.entries)
            .field("is_default", &self.is_default)
            .field("network_acl_id", &self.network_acl_id)
            .field("tags", &self.tags)
            .field("vpc_id", &self.vpc_id)
            .field("owner_id", &self.owner_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkAclAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkAclAssociation")
            .field(
                "network_acl_association_id",
                &self.network_acl_association_id,
            )
            .field("network_acl_id", &self.network_acl_id)
            .field("subnet_id", &self.subnet_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkAclEntry {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkAclEntry")
            .field("cidr_block", &self.cidr_block)
            .field("egress", &self.egress)
            .field("icmp_type_code", &self.icmp_type_code)
            .field("ipv6_cidr_block", &self.ipv6_cidr_block)
            .field("port_range", &self.port_range)
            .field("protocol", &self.protocol)
            .field("rule_action", &self.rule_action)
            .field("rule_number", &self.rule_number)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkCardInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkCardInfo")
            .field("network_card_index", &self.network_card_index)
            .field("network_performance", &self.network_performance)
            .field(
                "maximum_network_interfaces",
                &self.maximum_network_interfaces,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkInfo")
            .field("network_performance", &self.network_performance)
            .field(
                "maximum_network_interfaces",
                &self.maximum_network_interfaces,
            )
            .field("maximum_network_cards", &self.maximum_network_cards)
            .field(
                "default_network_card_index",
                &self.default_network_card_index,
            )
            .field("network_cards", &self.network_cards)
            .field(
                "ipv4_addresses_per_interface",
                &self.ipv4_addresses_per_interface,
            )
            .field(
                "ipv6_addresses_per_interface",
                &self.ipv6_addresses_per_interface,
            )
            .field("ipv6_supported", &self.ipv6_supported)
            .field("ena_support", &self.ena_support)
            .field("efa_supported", &self.efa_supported)
            .field("efa_info", &self.efa_info)
            .field(
                "encryption_in_transit_supported",
                &self.encryption_in_transit_supported,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInsightsAccessScope {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkInsightsAccessScope")
            .field(
                "network_insights_access_scope_id",
                &self.network_insights_access_scope_id,
            )
            .field(
                "network_insights_access_scope_arn",
                &self.network_insights_access_scope_arn,
            )
            .field("created_date", &self.created_date)
            .field("updated_date", &self.updated_date)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInsightsAccessScopeAnalysis {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkInsightsAccessScopeAnalysis")
            .field(
                "network_insights_access_scope_analysis_id",
                &self.network_insights_access_scope_analysis_id,
            )
            .field(
                "network_insights_access_scope_analysis_arn",
                &self.network_insights_access_scope_analysis_arn,
            )
            .field(
                "network_insights_access_scope_id",
                &self.network_insights_access_scope_id,
            )
            .field("status", &self.status)
            .field("status_message", &self.status_message)
            .field("warning_message", &self.warning_message)
            .field("start_date", &self.start_date)
            .field("end_date", &self.end_date)
            .field("findings_found", &self.findings_found)
            .field("analyzed_eni_count", &self.analyzed_eni_count)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInsightsAccessScopeContent {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkInsightsAccessScopeContent")
            .field(
                "network_insights_access_scope_id",
                &self.network_insights_access_scope_id,
            )
            .field("match_paths", &self.match_paths)
            .field("exclude_paths", &self.exclude_paths)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInsightsAnalysis {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkInsightsAnalysis")
            .field(
                "network_insights_analysis_id",
                &self.network_insights_analysis_id,
            )
            .field(
                "network_insights_analysis_arn",
                &self.network_insights_analysis_arn,
            )
            .field("network_insights_path_id", &self.network_insights_path_id)
            .field("filter_in_arns", &self.filter_in_arns)
            .field("start_date", &self.start_date)
            .field("status", &self.status)
            .field("status_message", &self.status_message)
            .field("warning_message", &self.warning_message)
            .field("network_path_found", &self.network_path_found)
            .field("forward_path_components", &self.forward_path_components)
            .field("return_path_components", &self.return_path_components)
            .field("explanations", &self.explanations)
            .field("alternate_path_hints", &self.alternate_path_hints)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInsightsPath {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkInsightsPath")
            .field("network_insights_path_id", &self.network_insights_path_id)
            .field("network_insights_path_arn", &self.network_insights_path_arn)
            .field("created_date", &self.created_date)
            .field("source", &self.source)
            .field("destination", &self.destination)
            .field("source_ip", &self.source_ip)
            .field("destination_ip", &self.destination_ip)
            .field("protocol", &self.protocol)
            .field("destination_port", &self.destination_port)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInterface {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkInterface")
            .field("association", &self.association)
            .field("attachment", &self.attachment)
            .field("availability_zone", &self.availability_zone)
            .field("description", &self.description)
            .field("groups", &self.groups)
            .field("interface_type", &self.interface_type)
            .field("ipv6_addresses", &self.ipv6_addresses)
            .field("mac_address", &self.mac_address)
            .field("network_interface_id", &self.network_interface_id)
            .field("outpost_arn", &self.outpost_arn)
            .field("owner_id", &self.owner_id)
            .field("private_dns_name", &self.private_dns_name)
            .field("private_ip_address", &self.private_ip_address)
            .field("private_ip_addresses", &self.private_ip_addresses)
            .field("ipv4_prefixes", &self.ipv4_prefixes)
            .field("ipv6_prefixes", &self.ipv6_prefixes)
            .field("requester_id", &self.requester_id)
            .field("requester_managed", &self.requester_managed)
            .field("source_dest_check", &self.source_dest_check)
            .field("status", &self.status)
            .field("subnet_id", &self.subnet_id)
            .field("tag_set", &self.tag_set)
            .field("vpc_id", &self.vpc_id)
            .field("deny_all_igw_traffic", &self.deny_all_igw_traffic)
            .field("ipv6_native", &self.ipv6_native)
            .field("ipv6_address", &self.ipv6_address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInterfaceAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkInterfaceAssociation")
            .field("allocation_id", &self.allocation_id)
            .field("association_id", &self.association_id)
            .field("ip_owner_id", &self.ip_owner_id)
            .field("public_dns_name", &self.public_dns_name)
            .field("public_ip", &self.public_ip)
            .field("customer_owned_ip", &self.customer_owned_ip)
            .field("carrier_ip", &self.carrier_ip)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInterfaceAttachment {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkInterfaceAttachment")
            .field("attach_time", &self.attach_time)
            .field("attachment_id", &self.attachment_id)
            .field("delete_on_termination", &self.delete_on_termination)
            .field("device_index", &self.device_index)
            .field("network_card_index", &self.network_card_index)
            .field("instance_id", &self.instance_id)
            .field("instance_owner_id", &self.instance_owner_id)
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInterfaceAttachmentChanges {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkInterfaceAttachmentChanges")
            .field("attachment_id", &self.attachment_id)
            .field("delete_on_termination", &self.delete_on_termination)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInterfaceAttribute {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Attachment => {
                f.debug_tuple("Attachment").finish();
            }
            Self::Description => {
                f.debug_tuple("Description").finish();
            }
            Self::GroupSet => {
                f.debug_tuple("GroupSet").finish();
            }
            Self::SourceDestCheck => {
                f.debug_tuple("SourceDestCheck").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInterfaceCount {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkInterfaceCount")
            .field("min", &self.min)
            .field("max", &self.max)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInterfaceCountRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkInterfaceCountRequest")
            .field("min", &self.min)
            .field("max", &self.max)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInterfaceCreationType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Branch => {
                f.debug_tuple("Branch").finish();
            }
            Self::Efa => {
                f.debug_tuple("Efa").finish();
            }
            Self::Trunk => {
                f.debug_tuple("Trunk").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInterfaceIpv6Address {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkInterfaceIpv6Address")
            .field("ipv6_address", &self.ipv6_address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInterfacePermission {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkInterfacePermission")
            .field(
                "network_interface_permission_id",
                &self.network_interface_permission_id,
            )
            .field("network_interface_id", &self.network_interface_id)
            .field("aws_account_id", &self.aws_account_id)
            .field("aws_service", &self.aws_service)
            .field("permission", &self.permission)
            .field("permission_state", &self.permission_state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInterfacePermissionState {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkInterfacePermissionState")
            .field("state", &self.state)
            .field("status_message", &self.status_message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInterfacePermissionStateCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Granted => {
                f.debug_tuple("Granted").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Revoked => {
                f.debug_tuple("Revoked").finish();
            }
            Self::Revoking => {
                f.debug_tuple("Revoking").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInterfacePrivateIpAddress {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NetworkInterfacePrivateIpAddress")
            .field("association", &self.association)
            .field("primary", &self.primary)
            .field("private_dns_name", &self.private_dns_name)
            .field("private_ip_address", &self.private_ip_address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInterfaceStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Associated => {
                f.debug_tuple("Associated").finish();
            }
            Self::Attaching => {
                f.debug_tuple("Attaching").finish();
            }
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Detaching => {
                f.debug_tuple("Detaching").finish();
            }
            Self::InUse => {
                f.debug_tuple("InUse").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::NetworkInterfaceType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::ApiGatewayManaged => {
                f.debug_tuple("ApiGatewayManaged").finish();
            }
            Self::AwsCodestarConnectionsManaged => {
                f.debug_tuple("AwsCodestarConnectionsManaged").finish();
            }
            Self::Branch => {
                f.debug_tuple("Branch").finish();
            }
            Self::Efa => {
                f.debug_tuple("Efa").finish();
            }
            Self::GatewayLoadBalancer => {
                f.debug_tuple("GatewayLoadBalancer").finish();
            }
            Self::GatewayLoadBalancerEndpoint => {
                f.debug_tuple("GatewayLoadBalancerEndpoint").finish();
            }
            Self::GlobalAcceleratorManaged => {
                f.debug_tuple("GlobalAcceleratorManaged").finish();
            }
            Self::Interface => {
                f.debug_tuple("Interface").finish();
            }
            Self::IotRulesManaged => {
                f.debug_tuple("IotRulesManaged").finish();
            }
            Self::Lambda => {
                f.debug_tuple("Lambda").finish();
            }
            Self::LoadBalancer => {
                f.debug_tuple("LoadBalancer").finish();
            }
            Self::NatGateway => {
                f.debug_tuple("NatGateway").finish();
            }
            Self::NetworkLoadBalancer => {
                f.debug_tuple("NetworkLoadBalancer").finish();
            }
            Self::Quicksight => {
                f.debug_tuple("Quicksight").finish();
            }
            Self::TransitGateway => {
                f.debug_tuple("TransitGateway").finish();
            }
            Self::Trunk => {
                f.debug_tuple("Trunk").finish();
            }
            Self::VpcEndpoint => {
                f.debug_tuple("VpcEndpoint").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::NewDhcpConfiguration {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("NewDhcpConfiguration")
            .field("key", &self.key)
            .field("values", &self.values)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::OfferingClassType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Convertible => {
                f.debug_tuple("Convertible").finish();
            }
            Self::Standard => {
                f.debug_tuple("Standard").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::OfferingTypeValues {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::AllUpfront => {
                f.debug_tuple("AllUpfront").finish();
            }
            Self::HeavyUtilization => {
                f.debug_tuple("HeavyUtilization").finish();
            }
            Self::LightUtilization => {
                f.debug_tuple("LightUtilization").finish();
            }
            Self::MediumUtilization => {
                f.debug_tuple("MediumUtilization").finish();
            }
            Self::NoUpfront => {
                f.debug_tuple("NoUpfront").finish();
            }
            Self::PartialUpfront => {
                f.debug_tuple("PartialUpfront").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::OnDemandAllocationStrategy {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::LowestPrice => {
                f.debug_tuple("LowestPrice").finish();
            }
            Self::Prioritized => {
                f.debug_tuple("Prioritized").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::OnDemandOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("OnDemandOptions")
            .field("allocation_strategy", &self.allocation_strategy)
            .field(
                "capacity_reservation_options",
                &self.capacity_reservation_options,
            )
            .field("single_instance_type", &self.single_instance_type)
            .field("single_availability_zone", &self.single_availability_zone)
            .field("min_target_capacity", &self.min_target_capacity)
            .field("max_total_price", &self.max_total_price)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::OnDemandOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("OnDemandOptionsRequest")
            .field("allocation_strategy", &self.allocation_strategy)
            .field(
                "capacity_reservation_options",
                &self.capacity_reservation_options,
            )
            .field("single_instance_type", &self.single_instance_type)
            .field("single_availability_zone", &self.single_availability_zone)
            .field("min_target_capacity", &self.min_target_capacity)
            .field("max_total_price", &self.max_total_price)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::OperationType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Add => {
                f.debug_tuple("Add").finish();
            }
            Self::Remove => {
                f.debug_tuple("Remove").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::PacketHeaderStatement {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PacketHeaderStatement")
            .field("source_addresses", &self.source_addresses)
            .field("destination_addresses", &self.destination_addresses)
            .field("source_ports", &self.source_ports)
            .field("destination_ports", &self.destination_ports)
            .field("source_prefix_lists", &self.source_prefix_lists)
            .field("destination_prefix_lists", &self.destination_prefix_lists)
            .field("protocols", &self.protocols)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PacketHeaderStatementRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PacketHeaderStatementRequest")
            .field("source_addresses", &self.source_addresses)
            .field("destination_addresses", &self.destination_addresses)
            .field("source_ports", &self.source_ports)
            .field("destination_ports", &self.destination_ports)
            .field("source_prefix_lists", &self.source_prefix_lists)
            .field("destination_prefix_lists", &self.destination_prefix_lists)
            .field("protocols", &self.protocols)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PartitionLoadFrequency {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Daily => {
                f.debug_tuple("Daily").finish();
            }
            Self::Monthly => {
                f.debug_tuple("Monthly").finish();
            }
            Self::None => {
                f.debug_tuple("None").finish();
            }
            Self::Weekly => {
                f.debug_tuple("Weekly").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::PathComponent {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PathComponent")
            .field("sequence_number", &self.sequence_number)
            .field("acl_rule", &self.acl_rule)
            .field("attached_to", &self.attached_to)
            .field("component", &self.component)
            .field("destination_vpc", &self.destination_vpc)
            .field("outbound_header", &self.outbound_header)
            .field("inbound_header", &self.inbound_header)
            .field("route_table_route", &self.route_table_route)
            .field("security_group_rule", &self.security_group_rule)
            .field("source_vpc", &self.source_vpc)
            .field("subnet", &self.subnet)
            .field("vpc", &self.vpc)
            .field("additional_details", &self.additional_details)
            .field("transit_gateway", &self.transit_gateway)
            .field(
                "transit_gateway_route_table_route",
                &self.transit_gateway_route_table_route,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PathStatement {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PathStatement")
            .field("packet_header_statement", &self.packet_header_statement)
            .field("resource_statement", &self.resource_statement)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PathStatementRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PathStatementRequest")
            .field("packet_header_statement", &self.packet_header_statement)
            .field("resource_statement", &self.resource_statement)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PayerResponsibility {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::ServiceOwner => {
                f.debug_tuple("ServiceOwner").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::PaymentOption {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::AllUpfront => {
                f.debug_tuple("AllUpfront").finish();
            }
            Self::NoUpfront => {
                f.debug_tuple("NoUpfront").finish();
            }
            Self::PartialUpfront => {
                f.debug_tuple("PartialUpfront").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::PciId {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PciId")
            .field("device_id", &self.device_id)
            .field("vendor_id", &self.vendor_id)
            .field("subsystem_id", &self.subsystem_id)
            .field("subsystem_vendor_id", &self.subsystem_vendor_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PeeringAttachmentStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PeeringAttachmentStatus")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PeeringConnectionOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PeeringConnectionOptions")
            .field(
                "allow_dns_resolution_from_remote_vpc",
                &self.allow_dns_resolution_from_remote_vpc,
            )
            .field(
                "allow_egress_from_local_classic_link_to_remote_vpc",
                &self.allow_egress_from_local_classic_link_to_remote_vpc,
            )
            .field(
                "allow_egress_from_local_vpc_to_remote_classic_link",
                &self.allow_egress_from_local_vpc_to_remote_classic_link,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PeeringConnectionOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PeeringConnectionOptionsRequest")
            .field(
                "allow_dns_resolution_from_remote_vpc",
                &self.allow_dns_resolution_from_remote_vpc,
            )
            .field(
                "allow_egress_from_local_classic_link_to_remote_vpc",
                &self.allow_egress_from_local_classic_link_to_remote_vpc,
            )
            .field(
                "allow_egress_from_local_vpc_to_remote_classic_link",
                &self.allow_egress_from_local_vpc_to_remote_classic_link,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PeeringTgwInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PeeringTgwInfo")
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("owner_id", &self.owner_id)
            .field("region", &self.region)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PermissionGroup {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::All => {
                f.debug_tuple("All").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::Phase1DhGroupNumbersListValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Phase1DhGroupNumbersListValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Phase1DhGroupNumbersRequestListValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Phase1DhGroupNumbersRequestListValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Phase1EncryptionAlgorithmsListValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Phase1EncryptionAlgorithmsListValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Phase1EncryptionAlgorithmsRequestListValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Phase1EncryptionAlgorithmsRequestListValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Phase1IntegrityAlgorithmsListValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Phase1IntegrityAlgorithmsListValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Phase1IntegrityAlgorithmsRequestListValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Phase1IntegrityAlgorithmsRequestListValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Phase2DhGroupNumbersListValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Phase2DhGroupNumbersListValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Phase2DhGroupNumbersRequestListValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Phase2DhGroupNumbersRequestListValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Phase2EncryptionAlgorithmsListValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Phase2EncryptionAlgorithmsListValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Phase2EncryptionAlgorithmsRequestListValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Phase2EncryptionAlgorithmsRequestListValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Phase2IntegrityAlgorithmsListValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Phase2IntegrityAlgorithmsListValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Phase2IntegrityAlgorithmsRequestListValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Phase2IntegrityAlgorithmsRequestListValue")
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Placement {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Placement")
            .field("availability_zone", &self.availability_zone)
            .field("affinity", &self.affinity)
            .field("group_name", &self.group_name)
            .field("partition_number", &self.partition_number)
            .field("host_id", &self.host_id)
            .field("tenancy", &self.tenancy)
            .field("spread_domain", &self.spread_domain)
            .field("host_resource_group_arn", &self.host_resource_group_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PlacementGroup {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PlacementGroup")
            .field("group_name", &self.group_name)
            .field("state", &self.state)
            .field("strategy", &self.strategy)
            .field("partition_count", &self.partition_count)
            .field("group_id", &self.group_id)
            .field("tags", &self.tags)
            .field("group_arn", &self.group_arn)
            .field("spread_level", &self.spread_level)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PlacementGroupInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PlacementGroupInfo")
            .field("supported_strategies", &self.supported_strategies)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PlacementGroupState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::PlacementGroupStrategy {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Cluster => {
                f.debug_tuple("Cluster").finish();
            }
            Self::Partition => {
                f.debug_tuple("Partition").finish();
            }
            Self::Spread => {
                f.debug_tuple("Spread").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::PlacementResponse {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PlacementResponse")
            .field("group_name", &self.group_name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PlacementStrategy {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Cluster => {
                f.debug_tuple("Cluster").finish();
            }
            Self::Partition => {
                f.debug_tuple("Partition").finish();
            }
            Self::Spread => {
                f.debug_tuple("Spread").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::PlatformValues {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Windows => {
                f.debug_tuple("Windows").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::PoolCidrBlock {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PoolCidrBlock")
            .field("cidr", &self.cidr)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PortRange {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PortRange")
            .field("from", &self.from)
            .field("to", &self.to)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PrefixList {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PrefixList")
            .field("cidrs", &self.cidrs)
            .field("prefix_list_id", &self.prefix_list_id)
            .field("prefix_list_name", &self.prefix_list_name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PrefixListAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PrefixListAssociation")
            .field("resource_id", &self.resource_id)
            .field("resource_owner", &self.resource_owner)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PrefixListEntry {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PrefixListEntry")
            .field("cidr", &self.cidr)
            .field("description", &self.description)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PrefixListId {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PrefixListId")
            .field("description", &self.description)
            .field("prefix_list_id", &self.prefix_list_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PrefixListState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::CreateComplete => {
                f.debug_tuple("CreateComplete").finish();
            }
            Self::CreateFailed => {
                f.debug_tuple("CreateFailed").finish();
            }
            Self::CreateInProgress => {
                f.debug_tuple("CreateInProgress").finish();
            }
            Self::DeleteComplete => {
                f.debug_tuple("DeleteComplete").finish();
            }
            Self::DeleteFailed => {
                f.debug_tuple("DeleteFailed").finish();
            }
            Self::DeleteInProgress => {
                f.debug_tuple("DeleteInProgress").finish();
            }
            Self::ModifyComplete => {
                f.debug_tuple("ModifyComplete").finish();
            }
            Self::ModifyFailed => {
                f.debug_tuple("ModifyFailed").finish();
            }
            Self::ModifyInProgress => {
                f.debug_tuple("ModifyInProgress").finish();
            }
            Self::RestoreComplete => {
                f.debug_tuple("RestoreComplete").finish();
            }
            Self::RestoreFailed => {
                f.debug_tuple("RestoreFailed").finish();
            }
            Self::RestoreInProgress => {
                f.debug_tuple("RestoreInProgress").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::PriceSchedule {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PriceSchedule")
            .field("active", &self.active)
            .field("currency_code", &self.currency_code)
            .field("price", &self.price)
            .field("term", &self.term)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PriceScheduleSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PriceScheduleSpecification")
            .field("currency_code", &self.currency_code)
            .field("price", &self.price)
            .field("term", &self.term)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PricingDetail {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PricingDetail")
            .field("count", &self.count)
            .field("price", &self.price)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PrincipalIdFormat {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PrincipalIdFormat")
            .field("arn", &self.arn)
            .field("statuses", &self.statuses)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PrincipalType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Account => {
                f.debug_tuple("Account").finish();
            }
            Self::All => {
                f.debug_tuple("All").finish();
            }
            Self::OrganizationUnit => {
                f.debug_tuple("OrganizationUnit").finish();
            }
            Self::Role => {
                f.debug_tuple("Role").finish();
            }
            Self::Service => {
                f.debug_tuple("Service").finish();
            }
            Self::User => {
                f.debug_tuple("User").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::PrivateDnsDetails {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PrivateDnsDetails")
            .field("private_dns_name", &self.private_dns_name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PrivateDnsNameConfiguration {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PrivateDnsNameConfiguration")
            .field("state", &self.state)
            .field("r#type", &self.r#type)
            .field("value", &self.value)
            .field("name", &self.name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PrivateDnsNameOptionsOnLaunch {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PrivateDnsNameOptionsOnLaunch")
            .field("hostname_type", &self.hostname_type)
            .field(
                "enable_resource_name_dns_a_record",
                &self.enable_resource_name_dns_a_record,
            )
            .field(
                "enable_resource_name_dns_aaaa_record",
                &self.enable_resource_name_dns_aaaa_record,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PrivateDnsNameOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PrivateDnsNameOptionsRequest")
            .field("hostname_type", &self.hostname_type)
            .field(
                "enable_resource_name_dns_a_record",
                &self.enable_resource_name_dns_a_record,
            )
            .field(
                "enable_resource_name_dns_aaaa_record",
                &self.enable_resource_name_dns_aaaa_record,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PrivateDnsNameOptionsResponse {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PrivateDnsNameOptionsResponse")
            .field("hostname_type", &self.hostname_type)
            .field(
                "enable_resource_name_dns_a_record",
                &self.enable_resource_name_dns_a_record,
            )
            .field(
                "enable_resource_name_dns_aaaa_record",
                &self.enable_resource_name_dns_aaaa_record,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PrivateIpAddressSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PrivateIpAddressSpecification")
            .field("primary", &self.primary)
            .field("private_ip_address", &self.private_ip_address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ProcessorInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ProcessorInfo")
            .field("supported_architectures", &self.supported_architectures)
            .field(
                "sustained_clock_speed_in_ghz",
                &self.sustained_clock_speed_in_ghz,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ProductCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ProductCode")
            .field("product_code_id", &self.product_code_id)
            .field("product_code_type", &self.product_code_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ProductCodeValues {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Devpay => {
                f.debug_tuple("Devpay").finish();
            }
            Self::Marketplace => {
                f.debug_tuple("Marketplace").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::PropagatingVgw {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PropagatingVgw")
            .field("gateway_id", &self.gateway_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Protocol {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Tcp => {
                f.debug_tuple("Tcp").finish();
            }
            Self::Udp => {
                f.debug_tuple("Udp").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ProtocolValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Gre => {
                f.debug_tuple("Gre").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ProvisionedBandwidth {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ProvisionedBandwidth")
            .field("provision_time", &self.provision_time)
            .field("provisioned", &self.provisioned)
            .field("request_time", &self.request_time)
            .field("requested", &self.requested)
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PtrUpdateStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PtrUpdateStatus")
            .field("value", &self.value)
            .field("status", &self.status)
            .field("reason", &self.reason)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PublicIpv4Pool {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PublicIpv4Pool")
            .field("pool_id", &self.pool_id)
            .field("description", &self.description)
            .field("pool_address_ranges", &self.pool_address_ranges)
            .field("total_address_count", &self.total_address_count)
            .field(
                "total_available_address_count",
                &self.total_available_address_count,
            )
            .field("network_border_group", &self.network_border_group)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PublicIpv4PoolRange {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PublicIpv4PoolRange")
            .field("first_address", &self.first_address)
            .field("last_address", &self.last_address)
            .field("address_count", &self.address_count)
            .field("available_address_count", &self.available_address_count)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Purchase {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Purchase")
            .field("currency_code", &self.currency_code)
            .field("duration", &self.duration)
            .field("host_id_set", &self.host_id_set)
            .field("host_reservation_id", &self.host_reservation_id)
            .field("hourly_price", &self.hourly_price)
            .field("instance_family", &self.instance_family)
            .field("payment_option", &self.payment_option)
            .field("upfront_price", &self.upfront_price)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::PurchaseRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PurchaseRequest")
            .field("instance_count", &self.instance_count)
            .field("purchase_token", &self.purchase_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::RecurringCharge {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RecurringCharge")
            .field("amount", &self.amount)
            .field("frequency", &self.frequency)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::RecurringChargeFrequency {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Hourly => {
                f.debug_tuple("Hourly").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReferencedSecurityGroup {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReferencedSecurityGroup")
            .field("group_id", &self.group_id)
            .field("peering_status", &self.peering_status)
            .field("user_id", &self.user_id)
            .field("vpc_id", &self.vpc_id)
            .field("vpc_peering_connection_id", &self.vpc_peering_connection_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Region {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Region")
            .field("endpoint", &self.endpoint)
            .field("region_name", &self.region_name)
            .field("opt_in_status", &self.opt_in_status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::RegisterInstanceTagAttributeRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RegisterInstanceTagAttributeRequest")
            .field(
                "include_all_tags_of_instance",
                &self.include_all_tags_of_instance,
            )
            .field("instance_tag_keys", &self.instance_tag_keys)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::RemoveIpamOperatingRegion {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RemoveIpamOperatingRegion")
            .field("region_name", &self.region_name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::RemovePrefixListEntry {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RemovePrefixListEntry")
            .field("cidr", &self.cidr)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReplaceRootVolumeTask {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReplaceRootVolumeTask")
            .field(
                "replace_root_volume_task_id",
                &self.replace_root_volume_task_id,
            )
            .field("instance_id", &self.instance_id)
            .field("task_state", &self.task_state)
            .field("start_time", &self.start_time)
            .field("complete_time", &self.complete_time)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReplaceRootVolumeTaskState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::FailedDetached => {
                f.debug_tuple("FailedDetached").finish();
            }
            Self::Failing => {
                f.debug_tuple("Failing").finish();
            }
            Self::InProgress => {
                f.debug_tuple("InProgress").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Succeeded => {
                f.debug_tuple("Succeeded").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReplacementStrategy {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Launch => {
                f.debug_tuple("Launch").finish();
            }
            Self::LaunchBeforeTerminate => {
                f.debug_tuple("LaunchBeforeTerminate").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReportInstanceReasonCodes {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::InstanceStuckInState => {
                f.debug_tuple("InstanceStuckInState").finish();
            }
            Self::NotAcceptingCredentials => {
                f.debug_tuple("NotAcceptingCredentials").finish();
            }
            Self::Other => {
                f.debug_tuple("Other").finish();
            }
            Self::PasswordNotAvailable => {
                f.debug_tuple("PasswordNotAvailable").finish();
            }
            Self::PerformanceEbsVolume => {
                f.debug_tuple("PerformanceEbsVolume").finish();
            }
            Self::PerformanceInstanceStore => {
                f.debug_tuple("PerformanceInstanceStore").finish();
            }
            Self::PerformanceNetwork => {
                f.debug_tuple("PerformanceNetwork").finish();
            }
            Self::PerformanceOther => {
                f.debug_tuple("PerformanceOther").finish();
            }
            Self::Unresponsive => {
                f.debug_tuple("Unresponsive").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReportStatusType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Impaired => {
                f.debug_tuple("Impaired").finish();
            }
            Self::Ok => {
                f.debug_tuple("Ok").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::RequestIpamResourceTag {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RequestIpamResourceTag")
            .field("key", &self.key)
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::RequestLaunchTemplateData {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RequestLaunchTemplateData")
            .field("kernel_id", &self.kernel_id)
            .field("ebs_optimized", &self.ebs_optimized)
            .field("iam_instance_profile", &self.iam_instance_profile)
            .field("block_device_mappings", &self.block_device_mappings)
            .field("network_interfaces", &self.network_interfaces)
            .field("image_id", &self.image_id)
            .field("instance_type", &self.instance_type)
            .field("key_name", &self.key_name)
            .field("monitoring", &self.monitoring)
            .field("placement", &self.placement)
            .field("ram_disk_id", &self.ram_disk_id)
            .field("disable_api_termination", &self.disable_api_termination)
            .field(
                "instance_initiated_shutdown_behavior",
                &self.instance_initiated_shutdown_behavior,
            )
            .field("user_data", &self.user_data)
            .field("tag_specifications", &self.tag_specifications)
            .field(
                "elastic_gpu_specifications",
                &self.elastic_gpu_specifications,
            )
            .field(
                "elastic_inference_accelerators",
                &self.elastic_inference_accelerators,
            )
            .field("security_group_ids", &self.security_group_ids)
            .field("security_groups", &self.security_groups)
            .field("instance_market_options", &self.instance_market_options)
            .field("credit_specification", &self.credit_specification)
            .field("cpu_options", &self.cpu_options)
            .field(
                "capacity_reservation_specification",
                &self.capacity_reservation_specification,
            )
            .field("license_specifications", &self.license_specifications)
            .field("hibernation_options", &self.hibernation_options)
            .field("metadata_options", &self.metadata_options)
            .field("enclave_options", &self.enclave_options)
            .field("instance_requirements", &self.instance_requirements)
            .field("private_dns_name_options", &self.private_dns_name_options)
            .field("maintenance_options", &self.maintenance_options)
            .field("disable_api_stop", &self.disable_api_stop)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::RequestSpotLaunchSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RequestSpotLaunchSpecification")
            .field("security_group_ids", &self.security_group_ids)
            .field("security_groups", &self.security_groups)
            .field("addressing_type", &self.addressing_type)
            .field("block_device_mappings", &self.block_device_mappings)
            .field("ebs_optimized", &self.ebs_optimized)
            .field("iam_instance_profile", &self.iam_instance_profile)
            .field("image_id", &self.image_id)
            .field("instance_type", &self.instance_type)
            .field("kernel_id", &self.kernel_id)
            .field("key_name", &self.key_name)
            .field("monitoring", &self.monitoring)
            .field("network_interfaces", &self.network_interfaces)
            .field("placement", &self.placement)
            .field("ramdisk_id", &self.ramdisk_id)
            .field("subnet_id", &self.subnet_id)
            .field("user_data", &self.user_data)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Reservation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Reservation")
            .field("groups", &self.groups)
            .field("instances", &self.instances)
            .field("owner_id", &self.owner_id)
            .field("requester_id", &self.requester_id)
            .field("reservation_id", &self.reservation_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReservationFleetInstanceSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReservationFleetInstanceSpecification")
            .field("instance_type", &self.instance_type)
            .field("instance_platform", &self.instance_platform)
            .field("weight", &self.weight)
            .field("availability_zone", &self.availability_zone)
            .field("availability_zone_id", &self.availability_zone_id)
            .field("ebs_optimized", &self.ebs_optimized)
            .field("priority", &self.priority)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReservationState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::PaymentFailed => {
                f.debug_tuple("PaymentFailed").finish();
            }
            Self::PaymentPending => {
                f.debug_tuple("PaymentPending").finish();
            }
            Self::Retired => {
                f.debug_tuple("Retired").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReservationValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReservationValue")
            .field("hourly_price", &self.hourly_price)
            .field("remaining_total_value", &self.remaining_total_value)
            .field("remaining_upfront_value", &self.remaining_upfront_value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReservedInstanceLimitPrice {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReservedInstanceLimitPrice")
            .field("amount", &self.amount)
            .field("currency_code", &self.currency_code)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReservedInstanceReservationValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReservedInstanceReservationValue")
            .field("reservation_value", &self.reservation_value)
            .field("reserved_instance_id", &self.reserved_instance_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReservedInstanceState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::PaymentFailed => {
                f.debug_tuple("PaymentFailed").finish();
            }
            Self::PaymentPending => {
                f.debug_tuple("PaymentPending").finish();
            }
            Self::Queued => {
                f.debug_tuple("Queued").finish();
            }
            Self::QueuedDeleted => {
                f.debug_tuple("QueuedDeleted").finish();
            }
            Self::Retired => {
                f.debug_tuple("Retired").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReservedInstances {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReservedInstances")
            .field("availability_zone", &self.availability_zone)
            .field("duration", &self.duration)
            .field("end", &self.end)
            .field("fixed_price", &self.fixed_price)
            .field("instance_count", &self.instance_count)
            .field("instance_type", &self.instance_type)
            .field("product_description", &self.product_description)
            .field("reserved_instances_id", &self.reserved_instances_id)
            .field("start", &self.start)
            .field("state", &self.state)
            .field("usage_price", &self.usage_price)
            .field("currency_code", &self.currency_code)
            .field("instance_tenancy", &self.instance_tenancy)
            .field("offering_class", &self.offering_class)
            .field("offering_type", &self.offering_type)
            .field("recurring_charges", &self.recurring_charges)
            .field("scope", &self.scope)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReservedInstancesConfiguration {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReservedInstancesConfiguration")
            .field("availability_zone", &self.availability_zone)
            .field("instance_count", &self.instance_count)
            .field("instance_type", &self.instance_type)
            .field("platform", &self.platform)
            .field("scope", &self.scope)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReservedInstancesId {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReservedInstancesId")
            .field("reserved_instances_id", &self.reserved_instances_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReservedInstancesListing {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReservedInstancesListing")
            .field("client_token", &self.client_token)
            .field("create_date", &self.create_date)
            .field("instance_counts", &self.instance_counts)
            .field("price_schedules", &self.price_schedules)
            .field("reserved_instances_id", &self.reserved_instances_id)
            .field(
                "reserved_instances_listing_id",
                &self.reserved_instances_listing_id,
            )
            .field("status", &self.status)
            .field("status_message", &self.status_message)
            .field("tags", &self.tags)
            .field("update_date", &self.update_date)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReservedInstancesModification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReservedInstancesModification")
            .field("client_token", &self.client_token)
            .field("create_date", &self.create_date)
            .field("effective_date", &self.effective_date)
            .field("modification_results", &self.modification_results)
            .field("reserved_instances_ids", &self.reserved_instances_ids)
            .field(
                "reserved_instances_modification_id",
                &self.reserved_instances_modification_id,
            )
            .field("status", &self.status)
            .field("status_message", &self.status_message)
            .field("update_date", &self.update_date)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReservedInstancesModificationResult {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReservedInstancesModificationResult")
            .field("reserved_instances_id", &self.reserved_instances_id)
            .field("target_configuration", &self.target_configuration)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ReservedInstancesOffering {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReservedInstancesOffering")
            .field("availability_zone", &self.availability_zone)
            .field("duration", &self.duration)
            .field("fixed_price", &self.fixed_price)
            .field("instance_type", &self.instance_type)
            .field("product_description", &self.product_description)
            .field(
                "reserved_instances_offering_id",
                &self.reserved_instances_offering_id,
            )
            .field("usage_price", &self.usage_price)
            .field("currency_code", &self.currency_code)
            .field("instance_tenancy", &self.instance_tenancy)
            .field("marketplace", &self.marketplace)
            .field("offering_class", &self.offering_class)
            .field("offering_type", &self.offering_type)
            .field("pricing_details", &self.pricing_details)
            .field("recurring_charges", &self.recurring_charges)
            .field("scope", &self.scope)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ResetFpgaImageAttributeName {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::LoadPermission => {
                f.debug_tuple("LoadPermission").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ResetImageAttributeName {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::LaunchPermission => {
                f.debug_tuple("LaunchPermission").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ResourceStatement {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResourceStatement")
            .field("resources", &self.resources)
            .field("resource_types", &self.resource_types)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ResourceStatementRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResourceStatementRequest")
            .field("resources", &self.resources)
            .field("resource_types", &self.resource_types)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ResourceType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::CapacityReservation => {
                f.debug_tuple("CapacityReservation").finish();
            }
            Self::CarrierGateway => {
                f.debug_tuple("CarrierGateway").finish();
            }
            Self::ClientVpnEndpoint => {
                f.debug_tuple("ClientVpnEndpoint").finish();
            }
            Self::CustomerGateway => {
                f.debug_tuple("CustomerGateway").finish();
            }
            Self::DedicatedHost => {
                f.debug_tuple("DedicatedHost").finish();
            }
            Self::DhcpOptions => {
                f.debug_tuple("DhcpOptions").finish();
            }
            Self::EgressOnlyInternetGateway => {
                f.debug_tuple("EgressOnlyInternetGateway").finish();
            }
            Self::ElasticGpu => {
                f.debug_tuple("ElasticGpu").finish();
            }
            Self::ElasticIp => {
                f.debug_tuple("ElasticIp").finish();
            }
            Self::ExportImageTask => {
                f.debug_tuple("ExportImageTask").finish();
            }
            Self::ExportInstanceTask => {
                f.debug_tuple("ExportInstanceTask").finish();
            }
            Self::Fleet => {
                f.debug_tuple("Fleet").finish();
            }
            Self::FpgaImage => {
                f.debug_tuple("FpgaImage").finish();
            }
            Self::HostReservation => {
                f.debug_tuple("HostReservation").finish();
            }
            Self::Image => {
                f.debug_tuple("Image").finish();
            }
            Self::ImportImageTask => {
                f.debug_tuple("ImportImageTask").finish();
            }
            Self::ImportSnapshotTask => {
                f.debug_tuple("ImportSnapshotTask").finish();
            }
            Self::Instance => {
                f.debug_tuple("Instance").finish();
            }
            Self::InstanceEventWindow => {
                f.debug_tuple("InstanceEventWindow").finish();
            }
            Self::InternetGateway => {
                f.debug_tuple("InternetGateway").finish();
            }
            Self::Ipam => {
                f.debug_tuple("Ipam").finish();
            }
            Self::IpamPool => {
                f.debug_tuple("IpamPool").finish();
            }
            Self::IpamScope => {
                f.debug_tuple("IpamScope").finish();
            }
            Self::Ipv4poolEc2 => {
                f.debug_tuple("Ipv4poolEc2").finish();
            }
            Self::Ipv6poolEc2 => {
                f.debug_tuple("Ipv6poolEc2").finish();
            }
            Self::KeyPair => {
                f.debug_tuple("KeyPair").finish();
            }
            Self::LaunchTemplate => {
                f.debug_tuple("LaunchTemplate").finish();
            }
            Self::LocalGateway => {
                f.debug_tuple("LocalGateway").finish();
            }
            Self::LocalGatewayRouteTable => {
                f.debug_tuple("LocalGatewayRouteTable").finish();
            }
            Self::LocalGatewayRouteTableVirtualInterfaceGroupAssociation => {
                f.debug_tuple("LocalGatewayRouteTableVirtualInterfaceGroupAssociation")
                    .finish();
            }
            Self::LocalGatewayRouteTableVpcAssociation => {
                f.debug_tuple("LocalGatewayRouteTableVpcAssociation")
                    .finish();
            }
            Self::LocalGatewayVirtualInterface => {
                f.debug_tuple("LocalGatewayVirtualInterface").finish();
            }
            Self::LocalGatewayVirtualInterfaceGroup => {
                f.debug_tuple("LocalGatewayVirtualInterfaceGroup").finish();
            }
            Self::Natgateway => {
                f.debug_tuple("Natgateway").finish();
            }
            Self::NetworkAcl => {
                f.debug_tuple("NetworkAcl").finish();
            }
            Self::NetworkInsightsAccessScope => {
                f.debug_tuple("NetworkInsightsAccessScope").finish();
            }
            Self::NetworkInsightsAccessScopeAnalysis => {
                f.debug_tuple("NetworkInsightsAccessScopeAnalysis").finish();
            }
            Self::NetworkInsightsAnalysis => {
                f.debug_tuple("NetworkInsightsAnalysis").finish();
            }
            Self::NetworkInsightsPath => {
                f.debug_tuple("NetworkInsightsPath").finish();
            }
            Self::NetworkInterface => {
                f.debug_tuple("NetworkInterface").finish();
            }
            Self::PlacementGroup => {
                f.debug_tuple("PlacementGroup").finish();
            }
            Self::PrefixList => {
                f.debug_tuple("PrefixList").finish();
            }
            Self::ReplaceRootVolumeTask => {
                f.debug_tuple("ReplaceRootVolumeTask").finish();
            }
            Self::ReservedInstances => {
                f.debug_tuple("ReservedInstances").finish();
            }
            Self::RouteTable => {
                f.debug_tuple("RouteTable").finish();
            }
            Self::SecurityGroup => {
                f.debug_tuple("SecurityGroup").finish();
            }
            Self::SecurityGroupRule => {
                f.debug_tuple("SecurityGroupRule").finish();
            }
            Self::Snapshot => {
                f.debug_tuple("Snapshot").finish();
            }
            Self::SpotFleetRequest => {
                f.debug_tuple("SpotFleetRequest").finish();
            }
            Self::SpotInstancesRequest => {
                f.debug_tuple("SpotInstancesRequest").finish();
            }
            Self::Subnet => {
                f.debug_tuple("Subnet").finish();
            }
            Self::SubnetCidrReservation => {
                f.debug_tuple("SubnetCidrReservation").finish();
            }
            Self::TrafficMirrorFilter => {
                f.debug_tuple("TrafficMirrorFilter").finish();
            }
            Self::TrafficMirrorSession => {
                f.debug_tuple("TrafficMirrorSession").finish();
            }
            Self::TrafficMirrorTarget => {
                f.debug_tuple("TrafficMirrorTarget").finish();
            }
            Self::TransitGateway => {
                f.debug_tuple("TransitGateway").finish();
            }
            Self::TransitGatewayAttachment => {
                f.debug_tuple("TransitGatewayAttachment").finish();
            }
            Self::TransitGatewayConnectPeer => {
                f.debug_tuple("TransitGatewayConnectPeer").finish();
            }
            Self::TransitGatewayMulticastDomain => {
                f.debug_tuple("TransitGatewayMulticastDomain").finish();
            }
            Self::TransitGatewayRouteTable => {
                f.debug_tuple("TransitGatewayRouteTable").finish();
            }
            Self::Volume => {
                f.debug_tuple("Volume").finish();
            }
            Self::Vpc => {
                f.debug_tuple("Vpc").finish();
            }
            Self::VpcEndpoint => {
                f.debug_tuple("VpcEndpoint").finish();
            }
            Self::VpcEndpointService => {
                f.debug_tuple("VpcEndpointService").finish();
            }
            Self::VpcFlowLog => {
                f.debug_tuple("VpcFlowLog").finish();
            }
            Self::VpcPeeringConnection => {
                f.debug_tuple("VpcPeeringConnection").finish();
            }
            Self::VpnConnection => {
                f.debug_tuple("VpnConnection").finish();
            }
            Self::VpnGateway => {
                f.debug_tuple("VpnGateway").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ResponseError {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResponseError")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ResponseLaunchTemplateData {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResponseLaunchTemplateData")
            .field("kernel_id", &self.kernel_id)
            .field("ebs_optimized", &self.ebs_optimized)
            .field("iam_instance_profile", &self.iam_instance_profile)
            .field("block_device_mappings", &self.block_device_mappings)
            .field("network_interfaces", &self.network_interfaces)
            .field("image_id", &self.image_id)
            .field("instance_type", &self.instance_type)
            .field("key_name", &self.key_name)
            .field("monitoring", &self.monitoring)
            .field("placement", &self.placement)
            .field("ram_disk_id", &self.ram_disk_id)
            .field("disable_api_termination", &self.disable_api_termination)
            .field(
                "instance_initiated_shutdown_behavior",
                &self.instance_initiated_shutdown_behavior,
            )
            .field("user_data", &self.user_data)
            .field("tag_specifications", &self.tag_specifications)
            .field(
                "elastic_gpu_specifications",
                &self.elastic_gpu_specifications,
            )
            .field(
                "elastic_inference_accelerators",
                &self.elastic_inference_accelerators,
            )
            .field("security_group_ids", &self.security_group_ids)
            .field("security_groups", &self.security_groups)
            .field("instance_market_options", &self.instance_market_options)
            .field("credit_specification", &self.credit_specification)
            .field("cpu_options", &self.cpu_options)
            .field(
                "capacity_reservation_specification",
                &self.capacity_reservation_specification,
            )
            .field("license_specifications", &self.license_specifications)
            .field("hibernation_options", &self.hibernation_options)
            .field("metadata_options", &self.metadata_options)
            .field("enclave_options", &self.enclave_options)
            .field("instance_requirements", &self.instance_requirements)
            .field("private_dns_name_options", &self.private_dns_name_options)
            .field("maintenance_options", &self.maintenance_options)
            .field("disable_api_stop", &self.disable_api_stop)
            .finish()
    }
}
// Skipping aws_sdk_ec2::model::RiProductDescription due to hidden fields
impl crate::Debug for aws_sdk_ec2::model::RootDeviceType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Ebs => {
                f.debug_tuple("Ebs").finish();
            }
            Self::InstanceStore => {
                f.debug_tuple("InstanceStore").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::Route {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Route")
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field(
                "destination_ipv6_cidr_block",
                &self.destination_ipv6_cidr_block,
            )
            .field(
                "destination_prefix_list_id",
                &self.destination_prefix_list_id,
            )
            .field(
                "egress_only_internet_gateway_id",
                &self.egress_only_internet_gateway_id,
            )
            .field("gateway_id", &self.gateway_id)
            .field("instance_id", &self.instance_id)
            .field("instance_owner_id", &self.instance_owner_id)
            .field("nat_gateway_id", &self.nat_gateway_id)
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("local_gateway_id", &self.local_gateway_id)
            .field("carrier_gateway_id", &self.carrier_gateway_id)
            .field("network_interface_id", &self.network_interface_id)
            .field("origin", &self.origin)
            .field("state", &self.state)
            .field("vpc_peering_connection_id", &self.vpc_peering_connection_id)
            .field("core_network_arn", &self.core_network_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::RouteOrigin {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::CreateRoute => {
                f.debug_tuple("CreateRoute").finish();
            }
            Self::CreateRouteTable => {
                f.debug_tuple("CreateRouteTable").finish();
            }
            Self::EnableVgwRoutePropagation => {
                f.debug_tuple("EnableVgwRoutePropagation").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::RouteState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Blackhole => {
                f.debug_tuple("Blackhole").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::RouteTable {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RouteTable")
            .field("associations", &self.associations)
            .field("propagating_vgws", &self.propagating_vgws)
            .field("route_table_id", &self.route_table_id)
            .field("routes", &self.routes)
            .field("tags", &self.tags)
            .field("vpc_id", &self.vpc_id)
            .field("owner_id", &self.owner_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::RouteTableAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RouteTableAssociation")
            .field("main", &self.main)
            .field(
                "route_table_association_id",
                &self.route_table_association_id,
            )
            .field("route_table_id", &self.route_table_id)
            .field("subnet_id", &self.subnet_id)
            .field("gateway_id", &self.gateway_id)
            .field("association_state", &self.association_state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::RouteTableAssociationState {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RouteTableAssociationState")
            .field("state", &self.state)
            .field("status_message", &self.status_message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::RouteTableAssociationStateCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Associated => {
                f.debug_tuple("Associated").finish();
            }
            Self::Associating => {
                f.debug_tuple("Associating").finish();
            }
            Self::Disassociated => {
                f.debug_tuple("Disassociated").finish();
            }
            Self::Disassociating => {
                f.debug_tuple("Disassociating").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::RuleAction {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Allow => {
                f.debug_tuple("Allow").finish();
            }
            Self::Deny => {
                f.debug_tuple("Deny").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::RunInstancesMonitoringEnabled {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RunInstancesMonitoringEnabled")
            .field("enabled", &self.enabled)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::S3ObjectTag {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("S3ObjectTag")
            .field("key", &self.key)
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::S3Storage {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("S3Storage")
            .field("aws_access_key_id", &self.aws_access_key_id)
            .field("bucket", &self.bucket)
            .field("prefix", &self.prefix)
            .field("upload_policy", &self.upload_policy)
            .field("upload_policy_signature", &self.upload_policy_signature)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ScheduledInstance {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ScheduledInstance")
            .field("availability_zone", &self.availability_zone)
            .field("create_date", &self.create_date)
            .field("hourly_price", &self.hourly_price)
            .field("instance_count", &self.instance_count)
            .field("instance_type", &self.instance_type)
            .field("network_platform", &self.network_platform)
            .field("next_slot_start_time", &self.next_slot_start_time)
            .field("platform", &self.platform)
            .field("previous_slot_end_time", &self.previous_slot_end_time)
            .field("recurrence", &self.recurrence)
            .field("scheduled_instance_id", &self.scheduled_instance_id)
            .field("slot_duration_in_hours", &self.slot_duration_in_hours)
            .field("term_end_date", &self.term_end_date)
            .field("term_start_date", &self.term_start_date)
            .field(
                "total_scheduled_instance_hours",
                &self.total_scheduled_instance_hours,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ScheduledInstanceAvailability {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ScheduledInstanceAvailability")
            .field("availability_zone", &self.availability_zone)
            .field("available_instance_count", &self.available_instance_count)
            .field("first_slot_start_time", &self.first_slot_start_time)
            .field("hourly_price", &self.hourly_price)
            .field("instance_type", &self.instance_type)
            .field("max_term_duration_in_days", &self.max_term_duration_in_days)
            .field("min_term_duration_in_days", &self.min_term_duration_in_days)
            .field("network_platform", &self.network_platform)
            .field("platform", &self.platform)
            .field("purchase_token", &self.purchase_token)
            .field("recurrence", &self.recurrence)
            .field("slot_duration_in_hours", &self.slot_duration_in_hours)
            .field(
                "total_scheduled_instance_hours",
                &self.total_scheduled_instance_hours,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ScheduledInstanceRecurrence {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ScheduledInstanceRecurrence")
            .field("frequency", &self.frequency)
            .field("interval", &self.interval)
            .field("occurrence_day_set", &self.occurrence_day_set)
            .field(
                "occurrence_relative_to_end",
                &self.occurrence_relative_to_end,
            )
            .field("occurrence_unit", &self.occurrence_unit)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ScheduledInstanceRecurrenceRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ScheduledInstanceRecurrenceRequest")
            .field("frequency", &self.frequency)
            .field("interval", &self.interval)
            .field("occurrence_days", &self.occurrence_days)
            .field(
                "occurrence_relative_to_end",
                &self.occurrence_relative_to_end,
            )
            .field("occurrence_unit", &self.occurrence_unit)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ScheduledInstancesBlockDeviceMapping {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ScheduledInstancesBlockDeviceMapping")
            .field("device_name", &self.device_name)
            .field("ebs", &self.ebs)
            .field("no_device", &self.no_device)
            .field("virtual_name", &self.virtual_name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ScheduledInstancesEbs {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ScheduledInstancesEbs")
            .field("delete_on_termination", &self.delete_on_termination)
            .field("encrypted", &self.encrypted)
            .field("iops", &self.iops)
            .field("snapshot_id", &self.snapshot_id)
            .field("volume_size", &self.volume_size)
            .field("volume_type", &self.volume_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ScheduledInstancesIamInstanceProfile {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ScheduledInstancesIamInstanceProfile")
            .field("arn", &self.arn)
            .field("name", &self.name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ScheduledInstancesIpv6Address {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ScheduledInstancesIpv6Address")
            .field("ipv6_address", &self.ipv6_address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ScheduledInstancesLaunchSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ScheduledInstancesLaunchSpecification")
            .field("block_device_mappings", &self.block_device_mappings)
            .field("ebs_optimized", &self.ebs_optimized)
            .field("iam_instance_profile", &self.iam_instance_profile)
            .field("image_id", &self.image_id)
            .field("instance_type", &self.instance_type)
            .field("kernel_id", &self.kernel_id)
            .field("key_name", &self.key_name)
            .field("monitoring", &self.monitoring)
            .field("network_interfaces", &self.network_interfaces)
            .field("placement", &self.placement)
            .field("ramdisk_id", &self.ramdisk_id)
            .field("security_group_ids", &self.security_group_ids)
            .field("subnet_id", &self.subnet_id)
            .field("user_data", &self.user_data)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ScheduledInstancesMonitoring {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ScheduledInstancesMonitoring")
            .field("enabled", &self.enabled)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ScheduledInstancesNetworkInterface {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ScheduledInstancesNetworkInterface")
            .field(
                "associate_public_ip_address",
                &self.associate_public_ip_address,
            )
            .field("delete_on_termination", &self.delete_on_termination)
            .field("description", &self.description)
            .field("device_index", &self.device_index)
            .field("groups", &self.groups)
            .field("ipv6_address_count", &self.ipv6_address_count)
            .field("ipv6_addresses", &self.ipv6_addresses)
            .field("network_interface_id", &self.network_interface_id)
            .field("private_ip_address", &self.private_ip_address)
            .field(
                "private_ip_address_configs",
                &self.private_ip_address_configs,
            )
            .field(
                "secondary_private_ip_address_count",
                &self.secondary_private_ip_address_count,
            )
            .field("subnet_id", &self.subnet_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ScheduledInstancesPlacement {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ScheduledInstancesPlacement")
            .field("availability_zone", &self.availability_zone)
            .field("group_name", &self.group_name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ScheduledInstancesPrivateIpAddressConfig {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ScheduledInstancesPrivateIpAddressConfig")
            .field("primary", &self.primary)
            .field("private_ip_address", &self.private_ip_address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Scope {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::AvailabilityZone => {
                f.debug_tuple("AvailabilityZone").finish();
            }
            Self::Regional => {
                f.debug_tuple("Regional").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::SecurityGroup {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SecurityGroup")
            .field("description", &self.description)
            .field("group_name", &self.group_name)
            .field("ip_permissions", &self.ip_permissions)
            .field("owner_id", &self.owner_id)
            .field("group_id", &self.group_id)
            .field("ip_permissions_egress", &self.ip_permissions_egress)
            .field("tags", &self.tags)
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SecurityGroupIdentifier {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SecurityGroupIdentifier")
            .field("group_id", &self.group_id)
            .field("group_name", &self.group_name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SecurityGroupReference {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SecurityGroupReference")
            .field("group_id", &self.group_id)
            .field("referencing_vpc_id", &self.referencing_vpc_id)
            .field("vpc_peering_connection_id", &self.vpc_peering_connection_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SecurityGroupRule {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SecurityGroupRule")
            .field("security_group_rule_id", &self.security_group_rule_id)
            .field("group_id", &self.group_id)
            .field("group_owner_id", &self.group_owner_id)
            .field("is_egress", &self.is_egress)
            .field("ip_protocol", &self.ip_protocol)
            .field("from_port", &self.from_port)
            .field("to_port", &self.to_port)
            .field("cidr_ipv4", &self.cidr_ipv4)
            .field("cidr_ipv6", &self.cidr_ipv6)
            .field("prefix_list_id", &self.prefix_list_id)
            .field("referenced_group_info", &self.referenced_group_info)
            .field("description", &self.description)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SecurityGroupRuleDescription {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SecurityGroupRuleDescription")
            .field("security_group_rule_id", &self.security_group_rule_id)
            .field("description", &self.description)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SecurityGroupRuleRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SecurityGroupRuleRequest")
            .field("ip_protocol", &self.ip_protocol)
            .field("from_port", &self.from_port)
            .field("to_port", &self.to_port)
            .field("cidr_ipv4", &self.cidr_ipv4)
            .field("cidr_ipv6", &self.cidr_ipv6)
            .field("prefix_list_id", &self.prefix_list_id)
            .field("referenced_group_id", &self.referenced_group_id)
            .field("description", &self.description)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SecurityGroupRuleUpdate {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SecurityGroupRuleUpdate")
            .field("security_group_rule_id", &self.security_group_rule_id)
            .field("security_group_rule", &self.security_group_rule)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SelfServicePortal {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disabled => {
                f.debug_tuple("Disabled").finish();
            }
            Self::Enabled => {
                f.debug_tuple("Enabled").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ServiceConfiguration {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ServiceConfiguration")
            .field("service_type", &self.service_type)
            .field("service_id", &self.service_id)
            .field("service_name", &self.service_name)
            .field("service_state", &self.service_state)
            .field("availability_zones", &self.availability_zones)
            .field("acceptance_required", &self.acceptance_required)
            .field("manages_vpc_endpoints", &self.manages_vpc_endpoints)
            .field(
                "network_load_balancer_arns",
                &self.network_load_balancer_arns,
            )
            .field(
                "gateway_load_balancer_arns",
                &self.gateway_load_balancer_arns,
            )
            .field(
                "supported_ip_address_types",
                &self.supported_ip_address_types,
            )
            .field("base_endpoint_dns_names", &self.base_endpoint_dns_names)
            .field("private_dns_name", &self.private_dns_name)
            .field(
                "private_dns_name_configuration",
                &self.private_dns_name_configuration,
            )
            .field("payer_responsibility", &self.payer_responsibility)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ServiceConnectivityType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Ipv4 => {
                f.debug_tuple("Ipv4").finish();
            }
            Self::Ipv6 => {
                f.debug_tuple("Ipv6").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ServiceDetail {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ServiceDetail")
            .field("service_name", &self.service_name)
            .field("service_id", &self.service_id)
            .field("service_type", &self.service_type)
            .field("availability_zones", &self.availability_zones)
            .field("owner", &self.owner)
            .field("base_endpoint_dns_names", &self.base_endpoint_dns_names)
            .field("private_dns_name", &self.private_dns_name)
            .field("private_dns_names", &self.private_dns_names)
            .field(
                "vpc_endpoint_policy_supported",
                &self.vpc_endpoint_policy_supported,
            )
            .field("acceptance_required", &self.acceptance_required)
            .field("manages_vpc_endpoints", &self.manages_vpc_endpoints)
            .field("payer_responsibility", &self.payer_responsibility)
            .field("tags", &self.tags)
            .field(
                "private_dns_name_verification_state",
                &self.private_dns_name_verification_state,
            )
            .field(
                "supported_ip_address_types",
                &self.supported_ip_address_types,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ServiceState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ServiceType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Gateway => {
                f.debug_tuple("Gateway").finish();
            }
            Self::GatewayLoadBalancer => {
                f.debug_tuple("GatewayLoadBalancer").finish();
            }
            Self::Interface => {
                f.debug_tuple("Interface").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::ServiceTypeDetail {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ServiceTypeDetail")
            .field("service_type", &self.service_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ShutdownBehavior {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Stop => {
                f.debug_tuple("Stop").finish();
            }
            Self::Terminate => {
                f.debug_tuple("Terminate").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::SlotDateTimeRangeRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SlotDateTimeRangeRequest")
            .field("earliest_time", &self.earliest_time)
            .field("latest_time", &self.latest_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SlotStartTimeRangeRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SlotStartTimeRangeRequest")
            .field("earliest_time", &self.earliest_time)
            .field("latest_time", &self.latest_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Snapshot {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Snapshot")
            .field("data_encryption_key_id", &self.data_encryption_key_id)
            .field("description", &self.description)
            .field("encrypted", &self.encrypted)
            .field("kms_key_id", &self.kms_key_id)
            .field("owner_id", &self.owner_id)
            .field("progress", &self.progress)
            .field("snapshot_id", &self.snapshot_id)
            .field("start_time", &self.start_time)
            .field("state", &self.state)
            .field("state_message", &self.state_message)
            .field("volume_id", &self.volume_id)
            .field("volume_size", &self.volume_size)
            .field("owner_alias", &self.owner_alias)
            .field("outpost_arn", &self.outpost_arn)
            .field("tags", &self.tags)
            .field("storage_tier", &self.storage_tier)
            .field("restore_expiry_time", &self.restore_expiry_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SnapshotAttributeName {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::CreateVolumePermission => {
                f.debug_tuple("CreateVolumePermission").finish();
            }
            Self::ProductCodes => {
                f.debug_tuple("ProductCodes").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::SnapshotDetail {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SnapshotDetail")
            .field("description", &self.description)
            .field("device_name", &self.device_name)
            .field("disk_image_size", &self.disk_image_size)
            .field("format", &self.format)
            .field("progress", &self.progress)
            .field("snapshot_id", &self.snapshot_id)
            .field("status", &self.status)
            .field("status_message", &self.status_message)
            .field("url", &self.url)
            .field("user_bucket", &self.user_bucket)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SnapshotDiskContainer {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SnapshotDiskContainer")
            .field("description", &self.description)
            .field("format", &self.format)
            .field("url", &self.url)
            .field("user_bucket", &self.user_bucket)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SnapshotInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SnapshotInfo")
            .field("description", &self.description)
            .field("tags", &self.tags)
            .field("encrypted", &self.encrypted)
            .field("volume_id", &self.volume_id)
            .field("state", &self.state)
            .field("volume_size", &self.volume_size)
            .field("start_time", &self.start_time)
            .field("progress", &self.progress)
            .field("owner_id", &self.owner_id)
            .field("snapshot_id", &self.snapshot_id)
            .field("outpost_arn", &self.outpost_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SnapshotRecycleBinInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SnapshotRecycleBinInfo")
            .field("snapshot_id", &self.snapshot_id)
            .field("recycle_bin_enter_time", &self.recycle_bin_enter_time)
            .field("recycle_bin_exit_time", &self.recycle_bin_exit_time)
            .field("description", &self.description)
            .field("volume_id", &self.volume_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SnapshotState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Completed => {
                f.debug_tuple("Completed").finish();
            }
            Self::Error => {
                f.debug_tuple("Error").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Recoverable => {
                f.debug_tuple("Recoverable").finish();
            }
            Self::Recovering => {
                f.debug_tuple("Recovering").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::SnapshotTaskDetail {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SnapshotTaskDetail")
            .field("description", &self.description)
            .field("disk_image_size", &self.disk_image_size)
            .field("encrypted", &self.encrypted)
            .field("format", &self.format)
            .field("kms_key_id", &self.kms_key_id)
            .field("progress", &self.progress)
            .field("snapshot_id", &self.snapshot_id)
            .field("status", &self.status)
            .field("status_message", &self.status_message)
            .field("url", &self.url)
            .field("user_bucket", &self.user_bucket)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SnapshotTierStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SnapshotTierStatus")
            .field("snapshot_id", &self.snapshot_id)
            .field("volume_id", &self.volume_id)
            .field("status", &self.status)
            .field("owner_id", &self.owner_id)
            .field("tags", &self.tags)
            .field("storage_tier", &self.storage_tier)
            .field("last_tiering_start_time", &self.last_tiering_start_time)
            .field("last_tiering_progress", &self.last_tiering_progress)
            .field(
                "last_tiering_operation_status",
                &self.last_tiering_operation_status,
            )
            .field(
                "last_tiering_operation_status_detail",
                &self.last_tiering_operation_status_detail,
            )
            .field("archival_complete_time", &self.archival_complete_time)
            .field("restore_expiry_time", &self.restore_expiry_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotAllocationStrategy {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::CapacityOptimized => {
                f.debug_tuple("CapacityOptimized").finish();
            }
            Self::CapacityOptimizedPrioritized => {
                f.debug_tuple("CapacityOptimizedPrioritized").finish();
            }
            Self::Diversified => {
                f.debug_tuple("Diversified").finish();
            }
            Self::LowestPrice => {
                f.debug_tuple("LowestPrice").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotCapacityRebalance {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotCapacityRebalance")
            .field("replacement_strategy", &self.replacement_strategy)
            .field("termination_delay", &self.termination_delay)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotDatafeedSubscription {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotDatafeedSubscription")
            .field("bucket", &self.bucket)
            .field("fault", &self.fault)
            .field("owner_id", &self.owner_id)
            .field("prefix", &self.prefix)
            .field("state", &self.state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotFleetLaunchSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotFleetLaunchSpecification")
            .field("security_groups", &self.security_groups)
            .field("addressing_type", &self.addressing_type)
            .field("block_device_mappings", &self.block_device_mappings)
            .field("ebs_optimized", &self.ebs_optimized)
            .field("iam_instance_profile", &self.iam_instance_profile)
            .field("image_id", &self.image_id)
            .field("instance_type", &self.instance_type)
            .field("kernel_id", &self.kernel_id)
            .field("key_name", &self.key_name)
            .field("monitoring", &self.monitoring)
            .field("network_interfaces", &self.network_interfaces)
            .field("placement", &self.placement)
            .field("ramdisk_id", &self.ramdisk_id)
            .field("spot_price", &self.spot_price)
            .field("subnet_id", &self.subnet_id)
            .field("user_data", &self.user_data)
            .field("weighted_capacity", &self.weighted_capacity)
            .field("tag_specifications", &self.tag_specifications)
            .field("instance_requirements", &self.instance_requirements)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotFleetMonitoring {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotFleetMonitoring")
            .field("enabled", &self.enabled)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotFleetRequestConfig {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotFleetRequestConfig")
            .field("activity_status", &self.activity_status)
            .field("create_time", &self.create_time)
            .field("spot_fleet_request_config", &self.spot_fleet_request_config)
            .field("spot_fleet_request_id", &self.spot_fleet_request_id)
            .field("spot_fleet_request_state", &self.spot_fleet_request_state)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotFleetRequestConfigData {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotFleetRequestConfigData")
            .field("allocation_strategy", &self.allocation_strategy)
            .field(
                "on_demand_allocation_strategy",
                &self.on_demand_allocation_strategy,
            )
            .field(
                "spot_maintenance_strategies",
                &self.spot_maintenance_strategies,
            )
            .field("client_token", &self.client_token)
            .field(
                "excess_capacity_termination_policy",
                &self.excess_capacity_termination_policy,
            )
            .field("fulfilled_capacity", &self.fulfilled_capacity)
            .field(
                "on_demand_fulfilled_capacity",
                &self.on_demand_fulfilled_capacity,
            )
            .field("iam_fleet_role", &self.iam_fleet_role)
            .field("launch_specifications", &self.launch_specifications)
            .field("launch_template_configs", &self.launch_template_configs)
            .field("spot_price", &self.spot_price)
            .field("target_capacity", &self.target_capacity)
            .field("on_demand_target_capacity", &self.on_demand_target_capacity)
            .field("on_demand_max_total_price", &self.on_demand_max_total_price)
            .field("spot_max_total_price", &self.spot_max_total_price)
            .field(
                "terminate_instances_with_expiration",
                &self.terminate_instances_with_expiration,
            )
            .field("r#type", &self.r#type)
            .field("valid_from", &self.valid_from)
            .field("valid_until", &self.valid_until)
            .field(
                "replace_unhealthy_instances",
                &self.replace_unhealthy_instances,
            )
            .field(
                "instance_interruption_behavior",
                &self.instance_interruption_behavior,
            )
            .field("load_balancers_config", &self.load_balancers_config)
            .field(
                "instance_pools_to_use_count",
                &self.instance_pools_to_use_count,
            )
            .field("context", &self.context)
            .field("target_capacity_unit_type", &self.target_capacity_unit_type)
            .field("tag_specifications", &self.tag_specifications)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotFleetTagSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotFleetTagSpecification")
            .field("resource_type", &self.resource_type)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotInstanceInterruptionBehavior {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Hibernate => {
                f.debug_tuple("Hibernate").finish();
            }
            Self::Stop => {
                f.debug_tuple("Stop").finish();
            }
            Self::Terminate => {
                f.debug_tuple("Terminate").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotInstanceRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotInstanceRequest")
            .field("actual_block_hourly_price", &self.actual_block_hourly_price)
            .field("availability_zone_group", &self.availability_zone_group)
            .field("block_duration_minutes", &self.block_duration_minutes)
            .field("create_time", &self.create_time)
            .field("fault", &self.fault)
            .field("instance_id", &self.instance_id)
            .field("launch_group", &self.launch_group)
            .field("launch_specification", &self.launch_specification)
            .field(
                "launched_availability_zone",
                &self.launched_availability_zone,
            )
            .field("product_description", &self.product_description)
            .field("spot_instance_request_id", &self.spot_instance_request_id)
            .field("spot_price", &self.spot_price)
            .field("state", &self.state)
            .field("status", &self.status)
            .field("tags", &self.tags)
            .field("r#type", &self.r#type)
            .field("valid_from", &self.valid_from)
            .field("valid_until", &self.valid_until)
            .field(
                "instance_interruption_behavior",
                &self.instance_interruption_behavior,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotInstanceState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Cancelled => {
                f.debug_tuple("Cancelled").finish();
            }
            Self::Closed => {
                f.debug_tuple("Closed").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Open => {
                f.debug_tuple("Open").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotInstanceStateFault {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotInstanceStateFault")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotInstanceStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotInstanceStatus")
            .field("code", &self.code)
            .field("message", &self.message)
            .field("update_time", &self.update_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotInstanceType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::OneTime => {
                f.debug_tuple("OneTime").finish();
            }
            Self::Persistent => {
                f.debug_tuple("Persistent").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotMaintenanceStrategies {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotMaintenanceStrategies")
            .field("capacity_rebalance", &self.capacity_rebalance)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotMarketOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotMarketOptions")
            .field("max_price", &self.max_price)
            .field("spot_instance_type", &self.spot_instance_type)
            .field("block_duration_minutes", &self.block_duration_minutes)
            .field("valid_until", &self.valid_until)
            .field(
                "instance_interruption_behavior",
                &self.instance_interruption_behavior,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotOptions")
            .field("allocation_strategy", &self.allocation_strategy)
            .field("maintenance_strategies", &self.maintenance_strategies)
            .field(
                "instance_interruption_behavior",
                &self.instance_interruption_behavior,
            )
            .field(
                "instance_pools_to_use_count",
                &self.instance_pools_to_use_count,
            )
            .field("single_instance_type", &self.single_instance_type)
            .field("single_availability_zone", &self.single_availability_zone)
            .field("min_target_capacity", &self.min_target_capacity)
            .field("max_total_price", &self.max_total_price)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotOptionsRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotOptionsRequest")
            .field("allocation_strategy", &self.allocation_strategy)
            .field("maintenance_strategies", &self.maintenance_strategies)
            .field(
                "instance_interruption_behavior",
                &self.instance_interruption_behavior,
            )
            .field(
                "instance_pools_to_use_count",
                &self.instance_pools_to_use_count,
            )
            .field("single_instance_type", &self.single_instance_type)
            .field("single_availability_zone", &self.single_availability_zone)
            .field("min_target_capacity", &self.min_target_capacity)
            .field("max_total_price", &self.max_total_price)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotPlacement {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotPlacement")
            .field("availability_zone", &self.availability_zone)
            .field("group_name", &self.group_name)
            .field("tenancy", &self.tenancy)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotPlacementScore {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotPlacementScore")
            .field("region", &self.region)
            .field("availability_zone_id", &self.availability_zone_id)
            .field("score", &self.score)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpotPrice {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SpotPrice")
            .field("availability_zone", &self.availability_zone)
            .field("instance_type", &self.instance_type)
            .field("product_description", &self.product_description)
            .field("spot_price", &self.spot_price)
            .field("timestamp", &self.timestamp)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SpreadLevel {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Host => {
                f.debug_tuple("Host").finish();
            }
            Self::Rack => {
                f.debug_tuple("Rack").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::StaleIpPermission {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("StaleIpPermission")
            .field("from_port", &self.from_port)
            .field("ip_protocol", &self.ip_protocol)
            .field("ip_ranges", &self.ip_ranges)
            .field("prefix_list_ids", &self.prefix_list_ids)
            .field("to_port", &self.to_port)
            .field("user_id_group_pairs", &self.user_id_group_pairs)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::StaleSecurityGroup {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("StaleSecurityGroup")
            .field("description", &self.description)
            .field("group_id", &self.group_id)
            .field("group_name", &self.group_name)
            .field("stale_ip_permissions", &self.stale_ip_permissions)
            .field(
                "stale_ip_permissions_egress",
                &self.stale_ip_permissions_egress,
            )
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::State {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Expired => {
                f.debug_tuple("Expired").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::PendingAcceptance => {
                f.debug_tuple("PendingAcceptance").finish();
            }
            Self::Rejected => {
                f.debug_tuple("Rejected").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::StateReason {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("StateReason")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::StaticSourcesSupportValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disable => {
                f.debug_tuple("Disable").finish();
            }
            Self::Enable => {
                f.debug_tuple("Enable").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::Status {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::InClassic => {
                f.debug_tuple("InClassic").finish();
            }
            Self::InVpc => {
                f.debug_tuple("InVpc").finish();
            }
            Self::MoveInProgress => {
                f.debug_tuple("MoveInProgress").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::StatusName {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Reachability => {
                f.debug_tuple("Reachability").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::StatusType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Initializing => {
                f.debug_tuple("Initializing").finish();
            }
            Self::InsufficientData => {
                f.debug_tuple("InsufficientData").finish();
            }
            Self::Passed => {
                f.debug_tuple("Passed").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::Storage {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Storage").field("s3", &self.s3).finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::StorageLocation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("StorageLocation")
            .field("bucket", &self.bucket)
            .field("key", &self.key)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::StorageTier {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Archive => {
                f.debug_tuple("Archive").finish();
            }
            Self::Standard => {
                f.debug_tuple("Standard").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::StoreImageTaskResult {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("StoreImageTaskResult")
            .field("ami_id", &self.ami_id)
            .field("task_start_time", &self.task_start_time)
            .field("bucket", &self.bucket)
            .field("s3object_key", &self.s3object_key)
            .field("progress_percentage", &self.progress_percentage)
            .field("store_task_state", &self.store_task_state)
            .field("store_task_failure_reason", &self.store_task_failure_reason)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::Subnet {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Subnet")
            .field("availability_zone", &self.availability_zone)
            .field("availability_zone_id", &self.availability_zone_id)
            .field(
                "available_ip_address_count",
                &self.available_ip_address_count,
            )
            .field("cidr_block", &self.cidr_block)
            .field("default_for_az", &self.default_for_az)
            .field(
                "enable_lni_at_device_index",
                &self.enable_lni_at_device_index,
            )
            .field("map_public_ip_on_launch", &self.map_public_ip_on_launch)
            .field(
                "map_customer_owned_ip_on_launch",
                &self.map_customer_owned_ip_on_launch,
            )
            .field("customer_owned_ipv4_pool", &self.customer_owned_ipv4_pool)
            .field("state", &self.state)
            .field("subnet_id", &self.subnet_id)
            .field("vpc_id", &self.vpc_id)
            .field("owner_id", &self.owner_id)
            .field(
                "assign_ipv6_address_on_creation",
                &self.assign_ipv6_address_on_creation,
            )
            .field(
                "ipv6_cidr_block_association_set",
                &self.ipv6_cidr_block_association_set,
            )
            .field("tags", &self.tags)
            .field("subnet_arn", &self.subnet_arn)
            .field("outpost_arn", &self.outpost_arn)
            .field("enable_dns64", &self.enable_dns64)
            .field("ipv6_native", &self.ipv6_native)
            .field(
                "private_dns_name_options_on_launch",
                &self.private_dns_name_options_on_launch,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SubnetAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SubnetAssociation")
            .field("subnet_id", &self.subnet_id)
            .field("state", &self.state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SubnetCidrBlockState {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SubnetCidrBlockState")
            .field("state", &self.state)
            .field("status_message", &self.status_message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SubnetCidrBlockStateCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Associated => {
                f.debug_tuple("Associated").finish();
            }
            Self::Associating => {
                f.debug_tuple("Associating").finish();
            }
            Self::Disassociated => {
                f.debug_tuple("Disassociated").finish();
            }
            Self::Disassociating => {
                f.debug_tuple("Disassociating").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Failing => {
                f.debug_tuple("Failing").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::SubnetCidrReservation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SubnetCidrReservation")
            .field(
                "subnet_cidr_reservation_id",
                &self.subnet_cidr_reservation_id,
            )
            .field("subnet_id", &self.subnet_id)
            .field("cidr", &self.cidr)
            .field("reservation_type", &self.reservation_type)
            .field("owner_id", &self.owner_id)
            .field("description", &self.description)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SubnetCidrReservationType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Explicit => {
                f.debug_tuple("Explicit").finish();
            }
            Self::Prefix => {
                f.debug_tuple("Prefix").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::SubnetIpv6CidrBlockAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SubnetIpv6CidrBlockAssociation")
            .field("association_id", &self.association_id)
            .field("ipv6_cidr_block", &self.ipv6_cidr_block)
            .field("ipv6_cidr_block_state", &self.ipv6_cidr_block_state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SubnetState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::SuccessfulInstanceCreditSpecificationItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SuccessfulInstanceCreditSpecificationItem")
            .field("instance_id", &self.instance_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SuccessfulQueuedPurchaseDeletion {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SuccessfulQueuedPurchaseDeletion")
            .field("reserved_instances_id", &self.reserved_instances_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::SummaryStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Impaired => {
                f.debug_tuple("Impaired").finish();
            }
            Self::Initializing => {
                f.debug_tuple("Initializing").finish();
            }
            Self::InsufficientData => {
                f.debug_tuple("InsufficientData").finish();
            }
            Self::NotApplicable => {
                f.debug_tuple("NotApplicable").finish();
            }
            Self::Ok => {
                f.debug_tuple("Ok").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::Tag {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Tag")
            .field("key", &self.key)
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TagDescription {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TagDescription")
            .field("key", &self.key)
            .field("resource_id", &self.resource_id)
            .field("resource_type", &self.resource_type)
            .field("value", &self.value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TagSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TagSpecification")
            .field("resource_type", &self.resource_type)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TargetCapacitySpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TargetCapacitySpecification")
            .field("total_target_capacity", &self.total_target_capacity)
            .field("on_demand_target_capacity", &self.on_demand_target_capacity)
            .field("spot_target_capacity", &self.spot_target_capacity)
            .field(
                "default_target_capacity_type",
                &self.default_target_capacity_type,
            )
            .field("target_capacity_unit_type", &self.target_capacity_unit_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TargetCapacitySpecificationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TargetCapacitySpecificationRequest")
            .field("total_target_capacity", &self.total_target_capacity)
            .field("on_demand_target_capacity", &self.on_demand_target_capacity)
            .field("spot_target_capacity", &self.spot_target_capacity)
            .field(
                "default_target_capacity_type",
                &self.default_target_capacity_type,
            )
            .field("target_capacity_unit_type", &self.target_capacity_unit_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TargetCapacityUnitType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::MemoryMib => {
                f.debug_tuple("MemoryMib").finish();
            }
            Self::Units => {
                f.debug_tuple("Units").finish();
            }
            Self::Vcpu => {
                f.debug_tuple("Vcpu").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TargetConfiguration {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TargetConfiguration")
            .field("instance_count", &self.instance_count)
            .field("offering_id", &self.offering_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TargetConfigurationRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TargetConfigurationRequest")
            .field("instance_count", &self.instance_count)
            .field("offering_id", &self.offering_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TargetGroup {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TargetGroup")
            .field("arn", &self.arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TargetGroupsConfig {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TargetGroupsConfig")
            .field("target_groups", &self.target_groups)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TargetNetwork {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TargetNetwork")
            .field("association_id", &self.association_id)
            .field("vpc_id", &self.vpc_id)
            .field("target_network_id", &self.target_network_id)
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("status", &self.status)
            .field("security_groups", &self.security_groups)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TargetReservationValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TargetReservationValue")
            .field("reservation_value", &self.reservation_value)
            .field("target_configuration", &self.target_configuration)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TargetStorageTier {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Archive => {
                f.debug_tuple("Archive").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TelemetryStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Down => {
                f.debug_tuple("Down").finish();
            }
            Self::Up => {
                f.debug_tuple("Up").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::Tenancy {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Dedicated => {
                f.debug_tuple("Dedicated").finish();
            }
            Self::Default => {
                f.debug_tuple("Default").finish();
            }
            Self::Host => {
                f.debug_tuple("Host").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TerminateConnectionStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TerminateConnectionStatus")
            .field("connection_id", &self.connection_id)
            .field("previous_status", &self.previous_status)
            .field("current_status", &self.current_status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ThroughResourcesStatement {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ThroughResourcesStatement")
            .field("resource_statement", &self.resource_statement)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ThroughResourcesStatementRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ThroughResourcesStatementRequest")
            .field("resource_statement", &self.resource_statement)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TieringOperationStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::ArchivalCompleted => {
                f.debug_tuple("ArchivalCompleted").finish();
            }
            Self::ArchivalFailed => {
                f.debug_tuple("ArchivalFailed").finish();
            }
            Self::ArchivalInProgress => {
                f.debug_tuple("ArchivalInProgress").finish();
            }
            Self::PermanentRestoreCompleted => {
                f.debug_tuple("PermanentRestoreCompleted").finish();
            }
            Self::PermanentRestoreFailed => {
                f.debug_tuple("PermanentRestoreFailed").finish();
            }
            Self::PermanentRestoreInProgress => {
                f.debug_tuple("PermanentRestoreInProgress").finish();
            }
            Self::TemporaryRestoreCompleted => {
                f.debug_tuple("TemporaryRestoreCompleted").finish();
            }
            Self::TemporaryRestoreFailed => {
                f.debug_tuple("TemporaryRestoreFailed").finish();
            }
            Self::TemporaryRestoreInProgress => {
                f.debug_tuple("TemporaryRestoreInProgress").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TotalLocalStorageGb {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TotalLocalStorageGb")
            .field("min", &self.min)
            .field("max", &self.max)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TotalLocalStorageGbRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TotalLocalStorageGbRequest")
            .field("min", &self.min)
            .field("max", &self.max)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TpmSupportValues {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::V20 => {
                f.debug_tuple("V20").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TrafficDirection {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Egress => {
                f.debug_tuple("Egress").finish();
            }
            Self::Ingress => {
                f.debug_tuple("Ingress").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TrafficMirrorFilter {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TrafficMirrorFilter")
            .field("traffic_mirror_filter_id", &self.traffic_mirror_filter_id)
            .field("ingress_filter_rules", &self.ingress_filter_rules)
            .field("egress_filter_rules", &self.egress_filter_rules)
            .field("network_services", &self.network_services)
            .field("description", &self.description)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TrafficMirrorFilterRule {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TrafficMirrorFilterRule")
            .field(
                "traffic_mirror_filter_rule_id",
                &self.traffic_mirror_filter_rule_id,
            )
            .field("traffic_mirror_filter_id", &self.traffic_mirror_filter_id)
            .field("traffic_direction", &self.traffic_direction)
            .field("rule_number", &self.rule_number)
            .field("rule_action", &self.rule_action)
            .field("protocol", &self.protocol)
            .field("destination_port_range", &self.destination_port_range)
            .field("source_port_range", &self.source_port_range)
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field("source_cidr_block", &self.source_cidr_block)
            .field("description", &self.description)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TrafficMirrorFilterRuleField {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Description => {
                f.debug_tuple("Description").finish();
            }
            Self::DestinationPortRange => {
                f.debug_tuple("DestinationPortRange").finish();
            }
            Self::Protocol => {
                f.debug_tuple("Protocol").finish();
            }
            Self::SourcePortRange => {
                f.debug_tuple("SourcePortRange").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TrafficMirrorNetworkService {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::AmazonDns => {
                f.debug_tuple("AmazonDns").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TrafficMirrorPortRange {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TrafficMirrorPortRange")
            .field("from_port", &self.from_port)
            .field("to_port", &self.to_port)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TrafficMirrorPortRangeRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TrafficMirrorPortRangeRequest")
            .field("from_port", &self.from_port)
            .field("to_port", &self.to_port)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TrafficMirrorRuleAction {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Accept => {
                f.debug_tuple("Accept").finish();
            }
            Self::Reject => {
                f.debug_tuple("Reject").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TrafficMirrorSession {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TrafficMirrorSession")
            .field("traffic_mirror_session_id", &self.traffic_mirror_session_id)
            .field("traffic_mirror_target_id", &self.traffic_mirror_target_id)
            .field("traffic_mirror_filter_id", &self.traffic_mirror_filter_id)
            .field("network_interface_id", &self.network_interface_id)
            .field("owner_id", &self.owner_id)
            .field("packet_length", &self.packet_length)
            .field("session_number", &self.session_number)
            .field("virtual_network_id", &self.virtual_network_id)
            .field("description", &self.description)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TrafficMirrorSessionField {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Description => {
                f.debug_tuple("Description").finish();
            }
            Self::PacketLength => {
                f.debug_tuple("PacketLength").finish();
            }
            Self::VirtualNetworkId => {
                f.debug_tuple("VirtualNetworkId").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TrafficMirrorTarget {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TrafficMirrorTarget")
            .field("traffic_mirror_target_id", &self.traffic_mirror_target_id)
            .field("network_interface_id", &self.network_interface_id)
            .field("network_load_balancer_arn", &self.network_load_balancer_arn)
            .field("r#type", &self.r#type)
            .field("description", &self.description)
            .field("owner_id", &self.owner_id)
            .field("tags", &self.tags)
            .field(
                "gateway_load_balancer_endpoint_id",
                &self.gateway_load_balancer_endpoint_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TrafficMirrorTargetType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::GatewayLoadBalancerEndpoint => {
                f.debug_tuple("GatewayLoadBalancerEndpoint").finish();
            }
            Self::NetworkInterface => {
                f.debug_tuple("NetworkInterface").finish();
            }
            Self::NetworkLoadBalancer => {
                f.debug_tuple("NetworkLoadBalancer").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TrafficType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Accept => {
                f.debug_tuple("Accept").finish();
            }
            Self::All => {
                f.debug_tuple("All").finish();
            }
            Self::Reject => {
                f.debug_tuple("Reject").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGateway {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGateway")
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("transit_gateway_arn", &self.transit_gateway_arn)
            .field("state", &self.state)
            .field("owner_id", &self.owner_id)
            .field("description", &self.description)
            .field("creation_time", &self.creation_time)
            .field("options", &self.options)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayAssociation")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("resource_id", &self.resource_id)
            .field("resource_type", &self.resource_type)
            .field("state", &self.state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayAssociationState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Associated => {
                f.debug_tuple("Associated").finish();
            }
            Self::Associating => {
                f.debug_tuple("Associating").finish();
            }
            Self::Disassociated => {
                f.debug_tuple("Disassociated").finish();
            }
            Self::Disassociating => {
                f.debug_tuple("Disassociating").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayAttachment {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayAttachment")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("transit_gateway_owner_id", &self.transit_gateway_owner_id)
            .field("resource_owner_id", &self.resource_owner_id)
            .field("resource_type", &self.resource_type)
            .field("resource_id", &self.resource_id)
            .field("state", &self.state)
            .field("association", &self.association)
            .field("creation_time", &self.creation_time)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayAttachmentAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayAttachmentAssociation")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field("state", &self.state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayAttachmentBgpConfiguration {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayAttachmentBgpConfiguration")
            .field("transit_gateway_asn", &self.transit_gateway_asn)
            .field("peer_asn", &self.peer_asn)
            .field("transit_gateway_address", &self.transit_gateway_address)
            .field("peer_address", &self.peer_address)
            .field("bgp_status", &self.bgp_status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayAttachmentPropagation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayAttachmentPropagation")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field("state", &self.state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayAttachmentResourceType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Connect => {
                f.debug_tuple("Connect").finish();
            }
            Self::DirectConnectGateway => {
                f.debug_tuple("DirectConnectGateway").finish();
            }
            Self::Peering => {
                f.debug_tuple("Peering").finish();
            }
            Self::TgwPeering => {
                f.debug_tuple("TgwPeering").finish();
            }
            Self::Vpc => {
                f.debug_tuple("Vpc").finish();
            }
            Self::Vpn => {
                f.debug_tuple("Vpn").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayAttachmentState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Failing => {
                f.debug_tuple("Failing").finish();
            }
            Self::Initiating => {
                f.debug_tuple("Initiating").finish();
            }
            Self::InitiatingRequest => {
                f.debug_tuple("InitiatingRequest").finish();
            }
            Self::Modifying => {
                f.debug_tuple("Modifying").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::PendingAcceptance => {
                f.debug_tuple("PendingAcceptance").finish();
            }
            Self::Rejected => {
                f.debug_tuple("Rejected").finish();
            }
            Self::Rejecting => {
                f.debug_tuple("Rejecting").finish();
            }
            Self::RollingBack => {
                f.debug_tuple("RollingBack").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayConnect {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayConnect")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field(
                "transport_transit_gateway_attachment_id",
                &self.transport_transit_gateway_attachment_id,
            )
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("state", &self.state)
            .field("creation_time", &self.creation_time)
            .field("options", &self.options)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayConnectOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayConnectOptions")
            .field("protocol", &self.protocol)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayConnectPeer {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayConnectPeer")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field(
                "transit_gateway_connect_peer_id",
                &self.transit_gateway_connect_peer_id,
            )
            .field("state", &self.state)
            .field("creation_time", &self.creation_time)
            .field(
                "connect_peer_configuration",
                &self.connect_peer_configuration,
            )
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayConnectPeerConfiguration {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayConnectPeerConfiguration")
            .field("transit_gateway_address", &self.transit_gateway_address)
            .field("peer_address", &self.peer_address)
            .field("inside_cidr_blocks", &self.inside_cidr_blocks)
            .field("protocol", &self.protocol)
            .field("bgp_configurations", &self.bgp_configurations)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayConnectPeerState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayConnectRequestBgpOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayConnectRequestBgpOptions")
            .field("peer_asn", &self.peer_asn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayMulitcastDomainAssociationState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Associated => {
                f.debug_tuple("Associated").finish();
            }
            Self::Associating => {
                f.debug_tuple("Associating").finish();
            }
            Self::Disassociated => {
                f.debug_tuple("Disassociated").finish();
            }
            Self::Disassociating => {
                f.debug_tuple("Disassociating").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::PendingAcceptance => {
                f.debug_tuple("PendingAcceptance").finish();
            }
            Self::Rejected => {
                f.debug_tuple("Rejected").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayMulticastDeregisteredGroupMembers {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayMulticastDeregisteredGroupMembers")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field(
                "deregistered_network_interface_ids",
                &self.deregistered_network_interface_ids,
            )
            .field("group_ip_address", &self.group_ip_address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayMulticastDeregisteredGroupSources {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayMulticastDeregisteredGroupSources")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field(
                "deregistered_network_interface_ids",
                &self.deregistered_network_interface_ids,
            )
            .field("group_ip_address", &self.group_ip_address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayMulticastDomain {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayMulticastDomain")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field(
                "transit_gateway_multicast_domain_arn",
                &self.transit_gateway_multicast_domain_arn,
            )
            .field("owner_id", &self.owner_id)
            .field("options", &self.options)
            .field("state", &self.state)
            .field("creation_time", &self.creation_time)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayMulticastDomainAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayMulticastDomainAssociation")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("resource_id", &self.resource_id)
            .field("resource_type", &self.resource_type)
            .field("resource_owner_id", &self.resource_owner_id)
            .field("subnet", &self.subnet)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayMulticastDomainAssociations {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayMulticastDomainAssociations")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("resource_id", &self.resource_id)
            .field("resource_type", &self.resource_type)
            .field("resource_owner_id", &self.resource_owner_id)
            .field("subnets", &self.subnets)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayMulticastDomainOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayMulticastDomainOptions")
            .field("igmpv2_support", &self.igmpv2_support)
            .field("static_sources_support", &self.static_sources_support)
            .field(
                "auto_accept_shared_associations",
                &self.auto_accept_shared_associations,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayMulticastDomainState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayMulticastGroup {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayMulticastGroup")
            .field("group_ip_address", &self.group_ip_address)
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("subnet_id", &self.subnet_id)
            .field("resource_id", &self.resource_id)
            .field("resource_type", &self.resource_type)
            .field("resource_owner_id", &self.resource_owner_id)
            .field("network_interface_id", &self.network_interface_id)
            .field("group_member", &self.group_member)
            .field("group_source", &self.group_source)
            .field("member_type", &self.member_type)
            .field("source_type", &self.source_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayMulticastRegisteredGroupMembers {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayMulticastRegisteredGroupMembers")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field(
                "registered_network_interface_ids",
                &self.registered_network_interface_ids,
            )
            .field("group_ip_address", &self.group_ip_address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayMulticastRegisteredGroupSources {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayMulticastRegisteredGroupSources")
            .field(
                "transit_gateway_multicast_domain_id",
                &self.transit_gateway_multicast_domain_id,
            )
            .field(
                "registered_network_interface_ids",
                &self.registered_network_interface_ids,
            )
            .field("group_ip_address", &self.group_ip_address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayOptions")
            .field("amazon_side_asn", &self.amazon_side_asn)
            .field(
                "transit_gateway_cidr_blocks",
                &self.transit_gateway_cidr_blocks,
            )
            .field(
                "auto_accept_shared_attachments",
                &self.auto_accept_shared_attachments,
            )
            .field(
                "default_route_table_association",
                &self.default_route_table_association,
            )
            .field(
                "association_default_route_table_id",
                &self.association_default_route_table_id,
            )
            .field(
                "default_route_table_propagation",
                &self.default_route_table_propagation,
            )
            .field(
                "propagation_default_route_table_id",
                &self.propagation_default_route_table_id,
            )
            .field("vpn_ecmp_support", &self.vpn_ecmp_support)
            .field("dns_support", &self.dns_support)
            .field("multicast_support", &self.multicast_support)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayPeeringAttachment {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayPeeringAttachment")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("requester_tgw_info", &self.requester_tgw_info)
            .field("accepter_tgw_info", &self.accepter_tgw_info)
            .field("status", &self.status)
            .field("state", &self.state)
            .field("creation_time", &self.creation_time)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayPrefixListAttachment {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayPrefixListAttachment")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("resource_type", &self.resource_type)
            .field("resource_id", &self.resource_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayPrefixListReference {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayPrefixListReference")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field("prefix_list_id", &self.prefix_list_id)
            .field("prefix_list_owner_id", &self.prefix_list_owner_id)
            .field("state", &self.state)
            .field("blackhole", &self.blackhole)
            .field(
                "transit_gateway_attachment",
                &self.transit_gateway_attachment,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayPrefixListReferenceState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Modifying => {
                f.debug_tuple("Modifying").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayPropagation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayPropagation")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("resource_id", &self.resource_id)
            .field("resource_type", &self.resource_type)
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field("state", &self.state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayPropagationState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disabled => {
                f.debug_tuple("Disabled").finish();
            }
            Self::Disabling => {
                f.debug_tuple("Disabling").finish();
            }
            Self::Enabled => {
                f.debug_tuple("Enabled").finish();
            }
            Self::Enabling => {
                f.debug_tuple("Enabling").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayRequestOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayRequestOptions")
            .field("amazon_side_asn", &self.amazon_side_asn)
            .field(
                "auto_accept_shared_attachments",
                &self.auto_accept_shared_attachments,
            )
            .field(
                "default_route_table_association",
                &self.default_route_table_association,
            )
            .field(
                "default_route_table_propagation",
                &self.default_route_table_propagation,
            )
            .field("vpn_ecmp_support", &self.vpn_ecmp_support)
            .field("dns_support", &self.dns_support)
            .field("multicast_support", &self.multicast_support)
            .field(
                "transit_gateway_cidr_blocks",
                &self.transit_gateway_cidr_blocks,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayRoute {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayRoute")
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field("prefix_list_id", &self.prefix_list_id)
            .field(
                "transit_gateway_attachments",
                &self.transit_gateway_attachments,
            )
            .field("r#type", &self.r#type)
            .field("state", &self.state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayRouteAttachment {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayRouteAttachment")
            .field("resource_id", &self.resource_id)
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("resource_type", &self.resource_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayRouteState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Blackhole => {
                f.debug_tuple("Blackhole").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayRouteTable {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayRouteTable")
            .field(
                "transit_gateway_route_table_id",
                &self.transit_gateway_route_table_id,
            )
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("state", &self.state)
            .field(
                "default_association_route_table",
                &self.default_association_route_table,
            )
            .field(
                "default_propagation_route_table",
                &self.default_propagation_route_table,
            )
            .field("creation_time", &self.creation_time)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayRouteTableAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayRouteTableAssociation")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("resource_id", &self.resource_id)
            .field("resource_type", &self.resource_type)
            .field("state", &self.state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayRouteTablePropagation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayRouteTablePropagation")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("resource_id", &self.resource_id)
            .field("resource_type", &self.resource_type)
            .field("state", &self.state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayRouteTableRoute {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayRouteTableRoute")
            .field("destination_cidr", &self.destination_cidr)
            .field("state", &self.state)
            .field("route_origin", &self.route_origin)
            .field("prefix_list_id", &self.prefix_list_id)
            .field("attachment_id", &self.attachment_id)
            .field("resource_id", &self.resource_id)
            .field("resource_type", &self.resource_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayRouteTableState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayRouteType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Propagated => {
                f.debug_tuple("Propagated").finish();
            }
            Self::Static => {
                f.debug_tuple("Static").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Modifying => {
                f.debug_tuple("Modifying").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayVpcAttachment {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayVpcAttachment")
            .field(
                "transit_gateway_attachment_id",
                &self.transit_gateway_attachment_id,
            )
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("vpc_id", &self.vpc_id)
            .field("vpc_owner_id", &self.vpc_owner_id)
            .field("state", &self.state)
            .field("subnet_ids", &self.subnet_ids)
            .field("creation_time", &self.creation_time)
            .field("options", &self.options)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransitGatewayVpcAttachmentOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TransitGatewayVpcAttachmentOptions")
            .field("dns_support", &self.dns_support)
            .field("ipv6_support", &self.ipv6_support)
            .field("appliance_mode_support", &self.appliance_mode_support)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TransportProtocol {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Tcp => {
                f.debug_tuple("Tcp").finish();
            }
            Self::Udp => {
                f.debug_tuple("Udp").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TrunkInterfaceAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TrunkInterfaceAssociation")
            .field("association_id", &self.association_id)
            .field("branch_interface_id", &self.branch_interface_id)
            .field("trunk_interface_id", &self.trunk_interface_id)
            .field("interface_protocol", &self.interface_protocol)
            .field("vlan_id", &self.vlan_id)
            .field("gre_key", &self.gre_key)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::TunnelInsideIpVersion {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Ipv4 => {
                f.debug_tuple("Ipv4").finish();
            }
            Self::Ipv6 => {
                f.debug_tuple("Ipv6").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::TunnelOption {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TunnelOption")
            .field("outside_ip_address", &self.outside_ip_address)
            .field("tunnel_inside_cidr", &self.tunnel_inside_cidr)
            .field("tunnel_inside_ipv6_cidr", &self.tunnel_inside_ipv6_cidr)
            .field("pre_shared_key", &self.pre_shared_key)
            .field("phase1_lifetime_seconds", &self.phase1_lifetime_seconds)
            .field("phase2_lifetime_seconds", &self.phase2_lifetime_seconds)
            .field("rekey_margin_time_seconds", &self.rekey_margin_time_seconds)
            .field("rekey_fuzz_percentage", &self.rekey_fuzz_percentage)
            .field("replay_window_size", &self.replay_window_size)
            .field("dpd_timeout_seconds", &self.dpd_timeout_seconds)
            .field("dpd_timeout_action", &self.dpd_timeout_action)
            .field(
                "phase1_encryption_algorithms",
                &self.phase1_encryption_algorithms,
            )
            .field(
                "phase2_encryption_algorithms",
                &self.phase2_encryption_algorithms,
            )
            .field(
                "phase1_integrity_algorithms",
                &self.phase1_integrity_algorithms,
            )
            .field(
                "phase2_integrity_algorithms",
                &self.phase2_integrity_algorithms,
            )
            .field("phase1_dh_group_numbers", &self.phase1_dh_group_numbers)
            .field("phase2_dh_group_numbers", &self.phase2_dh_group_numbers)
            .field("ike_versions", &self.ike_versions)
            .field("startup_action", &self.startup_action)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::UnlimitedSupportedInstanceFamily {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::T2 => {
                f.debug_tuple("T2").finish();
            }
            Self::T3 => {
                f.debug_tuple("T3").finish();
            }
            Self::T3a => {
                f.debug_tuple("T3a").finish();
            }
            Self::T4g => {
                f.debug_tuple("T4g").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::UnsuccessfulInstanceCreditSpecificationErrorCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::IncorrectInstanceState => {
                f.debug_tuple("IncorrectInstanceState").finish();
            }
            Self::InstanceCreditSpecificationNotSupported => {
                f.debug_tuple("InstanceCreditSpecificationNotSupported")
                    .finish();
            }
            Self::InvalidInstanceId => {
                f.debug_tuple("InvalidInstanceId").finish();
            }
            Self::InstanceNotFound => {
                f.debug_tuple("InstanceNotFound").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::UnsuccessfulInstanceCreditSpecificationItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UnsuccessfulInstanceCreditSpecificationItem")
            .field("instance_id", &self.instance_id)
            .field("error", &self.error)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::UnsuccessfulInstanceCreditSpecificationItemError {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UnsuccessfulInstanceCreditSpecificationItemError")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::UnsuccessfulItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UnsuccessfulItem")
            .field("error", &self.error)
            .field("resource_id", &self.resource_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::UnsuccessfulItemError {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UnsuccessfulItemError")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::UsageClassType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::OnDemand => {
                f.debug_tuple("OnDemand").finish();
            }
            Self::Spot => {
                f.debug_tuple("Spot").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::UserBucket {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UserBucket")
            .field("s3_bucket", &self.s3_bucket)
            .field("s3_key", &self.s3_key)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::UserBucketDetails {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UserBucketDetails")
            .field("s3_bucket", &self.s3_bucket)
            .field("s3_key", &self.s3_key)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::UserData {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UserData")
            .field("data", &self.data)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::UserIdGroupPair {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UserIdGroupPair")
            .field("description", &self.description)
            .field("group_id", &self.group_id)
            .field("group_name", &self.group_name)
            .field("peering_status", &self.peering_status)
            .field("user_id", &self.user_id)
            .field("vpc_id", &self.vpc_id)
            .field("vpc_peering_connection_id", &self.vpc_peering_connection_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VCpuCountRange {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VCpuCountRange")
            .field("min", &self.min)
            .field("max", &self.max)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VCpuCountRangeRequest {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VCpuCountRangeRequest")
            .field("min", &self.min)
            .field("max", &self.max)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VCpuInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VCpuInfo")
            .field("default_v_cpus", &self.default_v_cpus)
            .field("default_cores", &self.default_cores)
            .field("default_threads_per_core", &self.default_threads_per_core)
            .field("valid_cores", &self.valid_cores)
            .field("valid_threads_per_core", &self.valid_threads_per_core)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ValidationError {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ValidationError")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::ValidationWarning {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ValidationWarning")
            .field("errors", &self.errors)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VgwTelemetry {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VgwTelemetry")
            .field("accepted_route_count", &self.accepted_route_count)
            .field("last_status_change", &self.last_status_change)
            .field("outside_ip_address", &self.outside_ip_address)
            .field("status", &self.status)
            .field("status_message", &self.status_message)
            .field("certificate_arn", &self.certificate_arn)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VirtualizationType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Hvm => {
                f.debug_tuple("Hvm").finish();
            }
            Self::Paravirtual => {
                f.debug_tuple("Paravirtual").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::Volume {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Volume")
            .field("attachments", &self.attachments)
            .field("availability_zone", &self.availability_zone)
            .field("create_time", &self.create_time)
            .field("encrypted", &self.encrypted)
            .field("kms_key_id", &self.kms_key_id)
            .field("outpost_arn", &self.outpost_arn)
            .field("size", &self.size)
            .field("snapshot_id", &self.snapshot_id)
            .field("state", &self.state)
            .field("volume_id", &self.volume_id)
            .field("iops", &self.iops)
            .field("tags", &self.tags)
            .field("volume_type", &self.volume_type)
            .field("fast_restored", &self.fast_restored)
            .field("multi_attach_enabled", &self.multi_attach_enabled)
            .field("throughput", &self.throughput)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VolumeAttachment {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VolumeAttachment")
            .field("attach_time", &self.attach_time)
            .field("device", &self.device)
            .field("instance_id", &self.instance_id)
            .field("state", &self.state)
            .field("volume_id", &self.volume_id)
            .field("delete_on_termination", &self.delete_on_termination)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VolumeAttachmentState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Attached => {
                f.debug_tuple("Attached").finish();
            }
            Self::Attaching => {
                f.debug_tuple("Attaching").finish();
            }
            Self::Busy => {
                f.debug_tuple("Busy").finish();
            }
            Self::Detached => {
                f.debug_tuple("Detached").finish();
            }
            Self::Detaching => {
                f.debug_tuple("Detaching").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::VolumeAttributeName {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::AutoEnableIo => {
                f.debug_tuple("AutoEnableIo").finish();
            }
            Self::ProductCodes => {
                f.debug_tuple("ProductCodes").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::VolumeDetail {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VolumeDetail")
            .field("size", &self.size)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VolumeModification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VolumeModification")
            .field("volume_id", &self.volume_id)
            .field("modification_state", &self.modification_state)
            .field("status_message", &self.status_message)
            .field("target_size", &self.target_size)
            .field("target_iops", &self.target_iops)
            .field("target_volume_type", &self.target_volume_type)
            .field("target_throughput", &self.target_throughput)
            .field(
                "target_multi_attach_enabled",
                &self.target_multi_attach_enabled,
            )
            .field("original_size", &self.original_size)
            .field("original_iops", &self.original_iops)
            .field("original_volume_type", &self.original_volume_type)
            .field("original_throughput", &self.original_throughput)
            .field(
                "original_multi_attach_enabled",
                &self.original_multi_attach_enabled,
            )
            .field("progress", &self.progress)
            .field("start_time", &self.start_time)
            .field("end_time", &self.end_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VolumeModificationState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Completed => {
                f.debug_tuple("Completed").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Modifying => {
                f.debug_tuple("Modifying").finish();
            }
            Self::Optimizing => {
                f.debug_tuple("Optimizing").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::VolumeState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Creating => {
                f.debug_tuple("Creating").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Error => {
                f.debug_tuple("Error").finish();
            }
            Self::InUse => {
                f.debug_tuple("InUse").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::VolumeStatusAction {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VolumeStatusAction")
            .field("code", &self.code)
            .field("description", &self.description)
            .field("event_id", &self.event_id)
            .field("event_type", &self.event_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VolumeStatusAttachmentStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VolumeStatusAttachmentStatus")
            .field("io_performance", &self.io_performance)
            .field("instance_id", &self.instance_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VolumeStatusDetails {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VolumeStatusDetails")
            .field("name", &self.name)
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VolumeStatusEvent {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VolumeStatusEvent")
            .field("description", &self.description)
            .field("event_id", &self.event_id)
            .field("event_type", &self.event_type)
            .field("not_after", &self.not_after)
            .field("not_before", &self.not_before)
            .field("instance_id", &self.instance_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VolumeStatusInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VolumeStatusInfo")
            .field("details", &self.details)
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VolumeStatusInfoStatus {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Impaired => {
                f.debug_tuple("Impaired").finish();
            }
            Self::InsufficientData => {
                f.debug_tuple("InsufficientData").finish();
            }
            Self::Ok => {
                f.debug_tuple("Ok").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::VolumeStatusItem {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VolumeStatusItem")
            .field("actions", &self.actions)
            .field("availability_zone", &self.availability_zone)
            .field("outpost_arn", &self.outpost_arn)
            .field("events", &self.events)
            .field("volume_id", &self.volume_id)
            .field("volume_status", &self.volume_status)
            .field("attachment_statuses", &self.attachment_statuses)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VolumeStatusName {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::IoEnabled => {
                f.debug_tuple("IoEnabled").finish();
            }
            Self::IoPerformance => {
                f.debug_tuple("IoPerformance").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::VolumeType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Gp2 => {
                f.debug_tuple("Gp2").finish();
            }
            Self::Gp3 => {
                f.debug_tuple("Gp3").finish();
            }
            Self::Io1 => {
                f.debug_tuple("Io1").finish();
            }
            Self::Io2 => {
                f.debug_tuple("Io2").finish();
            }
            Self::Sc1 => {
                f.debug_tuple("Sc1").finish();
            }
            Self::St1 => {
                f.debug_tuple("St1").finish();
            }
            Self::Standard => {
                f.debug_tuple("Standard").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::Vpc {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Vpc")
            .field("cidr_block", &self.cidr_block)
            .field("dhcp_options_id", &self.dhcp_options_id)
            .field("state", &self.state)
            .field("vpc_id", &self.vpc_id)
            .field("owner_id", &self.owner_id)
            .field("instance_tenancy", &self.instance_tenancy)
            .field(
                "ipv6_cidr_block_association_set",
                &self.ipv6_cidr_block_association_set,
            )
            .field(
                "cidr_block_association_set",
                &self.cidr_block_association_set,
            )
            .field("is_default", &self.is_default)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcAttachment {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpcAttachment")
            .field("state", &self.state)
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcAttributeName {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::EnableDnsHostnames => {
                f.debug_tuple("EnableDnsHostnames").finish();
            }
            Self::EnableDnsSupport => {
                f.debug_tuple("EnableDnsSupport").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcCidrBlockAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpcCidrBlockAssociation")
            .field("association_id", &self.association_id)
            .field("cidr_block", &self.cidr_block)
            .field("cidr_block_state", &self.cidr_block_state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcCidrBlockState {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpcCidrBlockState")
            .field("state", &self.state)
            .field("status_message", &self.status_message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcCidrBlockStateCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Associated => {
                f.debug_tuple("Associated").finish();
            }
            Self::Associating => {
                f.debug_tuple("Associating").finish();
            }
            Self::Disassociated => {
                f.debug_tuple("Disassociated").finish();
            }
            Self::Disassociating => {
                f.debug_tuple("Disassociating").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::Failing => {
                f.debug_tuple("Failing").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcClassicLink {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpcClassicLink")
            .field("classic_link_enabled", &self.classic_link_enabled)
            .field("tags", &self.tags)
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcEndpoint {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpcEndpoint")
            .field("vpc_endpoint_id", &self.vpc_endpoint_id)
            .field("vpc_endpoint_type", &self.vpc_endpoint_type)
            .field("vpc_id", &self.vpc_id)
            .field("service_name", &self.service_name)
            .field("state", &self.state)
            .field("policy_document", &self.policy_document)
            .field("route_table_ids", &self.route_table_ids)
            .field("subnet_ids", &self.subnet_ids)
            .field("groups", &self.groups)
            .field("ip_address_type", &self.ip_address_type)
            .field("dns_options", &self.dns_options)
            .field("private_dns_enabled", &self.private_dns_enabled)
            .field("requester_managed", &self.requester_managed)
            .field("network_interface_ids", &self.network_interface_ids)
            .field("dns_entries", &self.dns_entries)
            .field("creation_timestamp", &self.creation_timestamp)
            .field("tags", &self.tags)
            .field("owner_id", &self.owner_id)
            .field("last_error", &self.last_error)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcEndpointConnection {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpcEndpointConnection")
            .field("service_id", &self.service_id)
            .field("vpc_endpoint_id", &self.vpc_endpoint_id)
            .field("vpc_endpoint_owner", &self.vpc_endpoint_owner)
            .field("vpc_endpoint_state", &self.vpc_endpoint_state)
            .field("creation_timestamp", &self.creation_timestamp)
            .field("dns_entries", &self.dns_entries)
            .field(
                "network_load_balancer_arns",
                &self.network_load_balancer_arns,
            )
            .field(
                "gateway_load_balancer_arns",
                &self.gateway_load_balancer_arns,
            )
            .field("ip_address_type", &self.ip_address_type)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcEndpointType {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Gateway => {
                f.debug_tuple("Gateway").finish();
            }
            Self::GatewayLoadBalancer => {
                f.debug_tuple("GatewayLoadBalancer").finish();
            }
            Self::Interface => {
                f.debug_tuple("Interface").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcIpv6CidrBlockAssociation {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpcIpv6CidrBlockAssociation")
            .field("association_id", &self.association_id)
            .field("ipv6_cidr_block", &self.ipv6_cidr_block)
            .field("ipv6_cidr_block_state", &self.ipv6_cidr_block_state)
            .field("network_border_group", &self.network_border_group)
            .field("ipv6_pool", &self.ipv6_pool)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcPeeringConnection {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpcPeeringConnection")
            .field("accepter_vpc_info", &self.accepter_vpc_info)
            .field("expiration_time", &self.expiration_time)
            .field("requester_vpc_info", &self.requester_vpc_info)
            .field("status", &self.status)
            .field("tags", &self.tags)
            .field("vpc_peering_connection_id", &self.vpc_peering_connection_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcPeeringConnectionOptionsDescription {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpcPeeringConnectionOptionsDescription")
            .field(
                "allow_dns_resolution_from_remote_vpc",
                &self.allow_dns_resolution_from_remote_vpc,
            )
            .field(
                "allow_egress_from_local_classic_link_to_remote_vpc",
                &self.allow_egress_from_local_classic_link_to_remote_vpc,
            )
            .field(
                "allow_egress_from_local_vpc_to_remote_classic_link",
                &self.allow_egress_from_local_vpc_to_remote_classic_link,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcPeeringConnectionStateReason {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpcPeeringConnectionStateReason")
            .field("code", &self.code)
            .field("message", &self.message)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcPeeringConnectionStateReasonCode {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Active => {
                f.debug_tuple("Active").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Expired => {
                f.debug_tuple("Expired").finish();
            }
            Self::Failed => {
                f.debug_tuple("Failed").finish();
            }
            Self::InitiatingRequest => {
                f.debug_tuple("InitiatingRequest").finish();
            }
            Self::PendingAcceptance => {
                f.debug_tuple("PendingAcceptance").finish();
            }
            Self::Provisioning => {
                f.debug_tuple("Provisioning").finish();
            }
            Self::Rejected => {
                f.debug_tuple("Rejected").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcPeeringConnectionVpcInfo {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpcPeeringConnectionVpcInfo")
            .field("cidr_block", &self.cidr_block)
            .field("ipv6_cidr_block_set", &self.ipv6_cidr_block_set)
            .field("cidr_block_set", &self.cidr_block_set)
            .field("owner_id", &self.owner_id)
            .field("peering_options", &self.peering_options)
            .field("vpc_id", &self.vpc_id)
            .field("region", &self.region)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpcTenancy {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Default => {
                f.debug_tuple("Default").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpnConnection {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpnConnection")
            .field(
                "customer_gateway_configuration",
                &self.customer_gateway_configuration,
            )
            .field("customer_gateway_id", &self.customer_gateway_id)
            .field("category", &self.category)
            .field("state", &self.state)
            .field("r#type", &self.r#type)
            .field("vpn_connection_id", &self.vpn_connection_id)
            .field("vpn_gateway_id", &self.vpn_gateway_id)
            .field("transit_gateway_id", &self.transit_gateway_id)
            .field("core_network_arn", &self.core_network_arn)
            .field(
                "core_network_attachment_arn",
                &self.core_network_attachment_arn,
            )
            .field("gateway_association_state", &self.gateway_association_state)
            .field("options", &self.options)
            .field("routes", &self.routes)
            .field("tags", &self.tags)
            .field("vgw_telemetry", &self.vgw_telemetry)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpnConnectionDeviceType {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpnConnectionDeviceType")
            .field(
                "vpn_connection_device_type_id",
                &self.vpn_connection_device_type_id,
            )
            .field("vendor", &self.vendor)
            .field("platform", &self.platform)
            .field("software", &self.software)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpnConnectionOptions {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpnConnectionOptions")
            .field("enable_acceleration", &self.enable_acceleration)
            .field("static_routes_only", &self.static_routes_only)
            .field("local_ipv4_network_cidr", &self.local_ipv4_network_cidr)
            .field("remote_ipv4_network_cidr", &self.remote_ipv4_network_cidr)
            .field("local_ipv6_network_cidr", &self.local_ipv6_network_cidr)
            .field("remote_ipv6_network_cidr", &self.remote_ipv6_network_cidr)
            .field("outside_ip_address_type", &self.outside_ip_address_type)
            .field(
                "transport_transit_gateway_attachment_id",
                &self.transport_transit_gateway_attachment_id,
            )
            .field("tunnel_inside_ip_version", &self.tunnel_inside_ip_version)
            .field("tunnel_options", &self.tunnel_options)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpnConnectionOptionsSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpnConnectionOptionsSpecification")
            .field("enable_acceleration", &self.enable_acceleration)
            .field("static_routes_only", &self.static_routes_only)
            .field("tunnel_inside_ip_version", &self.tunnel_inside_ip_version)
            .field("tunnel_options", &self.tunnel_options)
            .field("local_ipv4_network_cidr", &self.local_ipv4_network_cidr)
            .field("remote_ipv4_network_cidr", &self.remote_ipv4_network_cidr)
            .field("local_ipv6_network_cidr", &self.local_ipv6_network_cidr)
            .field("remote_ipv6_network_cidr", &self.remote_ipv6_network_cidr)
            .field("outside_ip_address_type", &self.outside_ip_address_type)
            .field(
                "transport_transit_gateway_attachment_id",
                &self.transport_transit_gateway_attachment_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpnEcmpSupportValue {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Disable => {
                f.debug_tuple("Disable").finish();
            }
            Self::Enable => {
                f.debug_tuple("Enable").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpnGateway {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpnGateway")
            .field("availability_zone", &self.availability_zone)
            .field("state", &self.state)
            .field("r#type", &self.r#type)
            .field("vpc_attachments", &self.vpc_attachments)
            .field("vpn_gateway_id", &self.vpn_gateway_id)
            .field("amazon_side_asn", &self.amazon_side_asn)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpnProtocol {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Openvpn => {
                f.debug_tuple("Openvpn").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpnState {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Available => {
                f.debug_tuple("Available").finish();
            }
            Self::Deleted => {
                f.debug_tuple("Deleted").finish();
            }
            Self::Deleting => {
                f.debug_tuple("Deleting").finish();
            }
            Self::Pending => {
                f.debug_tuple("Pending").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpnStaticRoute {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpnStaticRoute")
            .field("destination_cidr_block", &self.destination_cidr_block)
            .field("source", &self.source)
            .field("state", &self.state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpnStaticRouteSource {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Static => {
                f.debug_tuple("Static").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
impl crate::Debug for aws_sdk_ec2::model::VpnTunnelOptionsSpecification {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("VpnTunnelOptionsSpecification")
            .field("tunnel_inside_cidr", &self.tunnel_inside_cidr)
            .field("tunnel_inside_ipv6_cidr", &self.tunnel_inside_ipv6_cidr)
            .field("pre_shared_key", &self.pre_shared_key)
            .field("phase1_lifetime_seconds", &self.phase1_lifetime_seconds)
            .field("phase2_lifetime_seconds", &self.phase2_lifetime_seconds)
            .field("rekey_margin_time_seconds", &self.rekey_margin_time_seconds)
            .field("rekey_fuzz_percentage", &self.rekey_fuzz_percentage)
            .field("replay_window_size", &self.replay_window_size)
            .field("dpd_timeout_seconds", &self.dpd_timeout_seconds)
            .field("dpd_timeout_action", &self.dpd_timeout_action)
            .field(
                "phase1_encryption_algorithms",
                &self.phase1_encryption_algorithms,
            )
            .field(
                "phase2_encryption_algorithms",
                &self.phase2_encryption_algorithms,
            )
            .field(
                "phase1_integrity_algorithms",
                &self.phase1_integrity_algorithms,
            )
            .field(
                "phase2_integrity_algorithms",
                &self.phase2_integrity_algorithms,
            )
            .field("phase1_dh_group_numbers", &self.phase1_dh_group_numbers)
            .field("phase2_dh_group_numbers", &self.phase2_dh_group_numbers)
            .field("ike_versions", &self.ike_versions)
            .field("startup_action", &self.startup_action)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::model::WeekDay {
    fn fmt(&self, f: &mut crate::Formatter) {
        match self {
            Self::Friday => {
                f.debug_tuple("Friday").finish();
            }
            Self::Monday => {
                f.debug_tuple("Monday").finish();
            }
            Self::Saturday => {
                f.debug_tuple("Saturday").finish();
            }
            Self::Sunday => {
                f.debug_tuple("Sunday").finish();
            }
            Self::Thursday => {
                f.debug_tuple("Thursday").finish();
            }
            Self::Tuesday => {
                f.debug_tuple("Tuesday").finish();
            }
            Self::Wednesday => {
                f.debug_tuple("Wednesday").finish();
            }
            Self::Unknown(__0) => {
                f.debug_tuple("Unknown").field(__0).finish();
            }
            _ => "???".fmt(f),
        }
    }
}
// Skipping aws_sdk_ec2::model::accelerator_count::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::accelerator_count_request::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::accelerator_total_memory_mi_b::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::accelerator_total_memory_mi_b_request::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::access_scope_analysis_finding::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::access_scope_path::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::access_scope_path_request::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::account_attribute::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::account_attribute_value::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::active_instance::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::add_ipam_operating_region::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::add_prefix_list_entry::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::additional_detail::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::address::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::address_attribute::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::allowed_principal::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::alternate_path_hint::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::analysis_acl_rule::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::analysis_component::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::analysis_load_balancer_listener::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::analysis_load_balancer_target::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::analysis_packet_header::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::analysis_route_table_route::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::analysis_security_group_rule::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::assigned_private_ip_address::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::associated_role::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::associated_target_network::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::association_status::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::athena_integration::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::attribute_boolean_value::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::attribute_value::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::authorization_rule::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::availability_zone::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::availability_zone_message::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::available_capacity::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::baseline_ebs_bandwidth_mbps::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::baseline_ebs_bandwidth_mbps_request::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::blob_attribute_value::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::block_device_mapping::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::bundle_task::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::bundle_task_error::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::byoip_cidr::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::cancel_capacity_reservation_fleet_error::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::cancel_spot_fleet_requests_error::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::cancel_spot_fleet_requests_error_item::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::cancel_spot_fleet_requests_success_item::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::cancelled_spot_instance_request::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::capacity_reservation::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::capacity_reservation_fleet::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::capacity_reservation_fleet_cancellation_state::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::capacity_reservation_group::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::capacity_reservation_options::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::capacity_reservation_options_request::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::capacity_reservation_specification::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::capacity_reservation_specification_response::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::capacity_reservation_target::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::capacity_reservation_target_response::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::carrier_gateway::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::certificate_authentication::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::certificate_authentication_request::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::cidr_authorization_context::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::cidr_block::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::classic_link_dns_support::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::classic_link_instance::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::classic_load_balancer::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::classic_load_balancers_config::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::client_certificate_revocation_list_status::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::client_connect_options::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::client_connect_response_options::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::client_data::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::client_login_banner_options::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::client_login_banner_response_options::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::client_vpn_authentication::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::model::client_vpn_authentication_request::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::client_vpn_authorization_rule_status::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::client_vpn_connection::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::client_vpn_connection_status::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::client_vpn_endpoint::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::client_vpn_endpoint_attribute_status::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::client_vpn_endpoint_status::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::client_vpn_route::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::client_vpn_route_status::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::coip_address_usage::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::coip_pool::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::connection_log_options::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::connection_log_response_options::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::connection_notification::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::conversion_task::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::cpu_options::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::cpu_options_request::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::create_fleet_error::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::create_fleet_instance::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::create_transit_gateway_connect_request_options::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::create_transit_gateway_multicast_domain_request_options::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::create_transit_gateway_vpc_attachment_request_options::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::create_volume_permission::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::model::create_volume_permission_modifications::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::credit_specification::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::credit_specification_request::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::customer_gateway::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::delete_fleet_error::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::delete_fleet_error_item::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::delete_fleet_success_item::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::delete_launch_template_versions_response_error_item::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::delete_launch_template_versions_response_success_item::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::delete_queued_reserved_instances_error::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::deregister_instance_tag_attribute_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::describe_fast_launch_images_success_item::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::describe_fast_snapshot_restore_success_item::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::describe_fleet_error::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::describe_fleets_instances::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::destination_options_request::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::destination_options_response::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::dhcp_configuration::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::dhcp_options::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::directory_service_authentication::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::directory_service_authentication_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::disable_fast_snapshot_restore_error_item::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::disable_fast_snapshot_restore_state_error::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::disable_fast_snapshot_restore_state_error_item::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::disable_fast_snapshot_restore_success_item::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::disk_image::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::disk_image_description::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::disk_image_detail::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::disk_image_volume_description::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::disk_info::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::dns_entry::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::dns_options::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::dns_options_specification::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::model::dns_servers_options_modify_structure::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::ebs_block_device::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::ebs_info::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::ebs_instance_block_device::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::ebs_instance_block_device_specification::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::ebs_optimized_info::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::efa_info::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::egress_only_internet_gateway::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::elastic_gpu_association::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::elastic_gpu_health::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::elastic_gpu_specification::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::model::elastic_gpu_specification_response::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::elastic_gpus::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::elastic_inference_accelerator::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::elastic_inference_accelerator_association::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::enable_fast_snapshot_restore_error_item::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::enable_fast_snapshot_restore_state_error::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::enable_fast_snapshot_restore_state_error_item::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::enable_fast_snapshot_restore_success_item::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::enclave_options::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::enclave_options_request::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::event_information::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::explanation::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::export_image_task::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::export_task::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::export_task_s3_location::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::export_task_s3_location_request::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::export_to_s3_task::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::export_to_s3_task_specification::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::failed_capacity_reservation_fleet_cancellation_result::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::failed_queued_purchase_deletion::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::fast_launch_launch_template_specification_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::fast_launch_launch_template_specification_response::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::fast_launch_snapshot_configuration_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::fast_launch_snapshot_configuration_response::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::federated_authentication::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::federated_authentication_request::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::filter::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::fleet_capacity_reservation::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::fleet_data::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::fleet_launch_template_config::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::fleet_launch_template_config_request::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::fleet_launch_template_overrides::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::fleet_launch_template_overrides_request::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::fleet_launch_template_specification::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::fleet_launch_template_specification_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::fleet_spot_capacity_rebalance::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::fleet_spot_capacity_rebalance_request::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::fleet_spot_maintenance_strategies::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::fleet_spot_maintenance_strategies_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::flow_log::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::fpga_device_info::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::fpga_device_memory_info::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::fpga_image::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::fpga_image_attribute::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::fpga_image_state::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::fpga_info::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::gpu_device_info::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::gpu_device_memory_info::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::gpu_info::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::group_identifier::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::hibernation_options::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::hibernation_options_request::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::history_record::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::history_record_entry::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::host::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::host_instance::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::host_offering::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::host_properties::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::host_reservation::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::iam_instance_profile::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::iam_instance_profile_association::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::iam_instance_profile_specification::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::icmp_type_code::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::id_format::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::ike_versions_list_value::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::ike_versions_request_list_value::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::image::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::image_disk_container::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::image_recycle_bin_info::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::import_image_license_configuration_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::import_image_license_configuration_response::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::import_image_task::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::import_instance_launch_specification::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::import_instance_task_details::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::import_instance_volume_detail_item::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::import_snapshot_task::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::import_volume_task_details::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::inference_accelerator_info::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::inference_device_info::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::instance::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::instance_block_device_mapping::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::instance_block_device_mapping_specification::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::instance_capacity::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::instance_count::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::instance_credit_specification::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::instance_credit_specification_request::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::instance_event_window::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::model::instance_event_window_association_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::instance_event_window_association_target::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::instance_event_window_disassociation_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::instance_event_window_state_change::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::instance_event_window_time_range::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::instance_event_window_time_range_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::instance_export_details::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::model::instance_family_credit_specification::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::instance_ipv4_prefix::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::instance_ipv6_address::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::instance_ipv6_address_request::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::instance_ipv6_prefix::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::instance_maintenance_options::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::instance_maintenance_options_request::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::instance_market_options_request::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::instance_metadata_options_request::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::instance_metadata_options_response::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::instance_monitoring::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::instance_network_interface::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::instance_network_interface_association::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::instance_network_interface_attachment::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::instance_network_interface_specification::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::instance_private_ip_address::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::instance_requirements::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::instance_requirements_request::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::instance_requirements_with_metadata_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::instance_specification::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::instance_state::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::instance_state_change::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::instance_status::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::instance_status_details::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::instance_status_event::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::instance_status_summary::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::instance_storage_info::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::instance_tag_notification_attribute::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::instance_type_info::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::instance_type_info_from_instance_requirements::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::instance_type_offering::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::instance_usage::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::integrate_services::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::internet_gateway::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::internet_gateway_attachment::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::ip_permission::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::ip_range::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::ipam::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::ipam_address_history_record::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::ipam_cidr_authorization_context::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::ipam_operating_region::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::ipam_pool::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::ipam_pool_allocation::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::ipam_pool_cidr::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::ipam_pool_cidr_failure_reason::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::ipam_resource_cidr::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::ipam_resource_tag::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::ipam_scope::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::ipv4_prefix_specification::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::ipv4_prefix_specification_request::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::ipv4_prefix_specification_response::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::ipv6_cidr_association::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::ipv6_cidr_block::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::ipv6_pool::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::ipv6_prefix_specification::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::ipv6_prefix_specification_request::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::ipv6_prefix_specification_response::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::ipv6_range::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::key_pair_info::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::last_error::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::launch_permission::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::launch_permission_modifications::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::launch_specification::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::launch_template::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::model::launch_template_and_overrides_response::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_block_device_mapping::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_block_device_mapping_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_capacity_reservation_specification_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_capacity_reservation_specification_response::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_config::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::launch_template_cpu_options::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_cpu_options_request::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_ebs_block_device::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::launch_template_ebs_block_device_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_elastic_inference_accelerator::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_elastic_inference_accelerator_response::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_enclave_options::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::launch_template_enclave_options_request::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_hibernation_options::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_hibernation_options_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_iam_instance_profile_specification::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_iam_instance_profile_specification_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_instance_maintenance_options::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_instance_maintenance_options_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_instance_market_options::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_instance_market_options_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_instance_metadata_options::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_instance_metadata_options_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_instance_network_interface_specification::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_instance_network_interface_specification_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_license_configuration::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_license_configuration_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_overrides::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::launch_template_placement::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::launch_template_placement_request::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_private_dns_name_options::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_private_dns_name_options_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_specification::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::launch_template_spot_market_options::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_spot_market_options_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_tag_specification::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_tag_specification_request::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::launch_template_version::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::launch_templates_monitoring::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::launch_templates_monitoring_request::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::license_configuration::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::license_configuration_request::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::load_balancers_config::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::load_permission::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::load_permission_modifications::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::load_permission_request::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::local_gateway::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::local_gateway_route::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::local_gateway_route_table::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::model::local_gateway_route_table_virtual_interface_group_association::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::local_gateway_route_table_vpc_association::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::local_gateway_virtual_interface::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::local_gateway_virtual_interface_group::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::managed_prefix_list::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::memory_gi_b_per_v_cpu::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::memory_gi_b_per_v_cpu_request::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::memory_info::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::memory_mi_b::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::memory_mi_b_request::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::modify_transit_gateway_options::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::modify_transit_gateway_vpc_attachment_request_options::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::modify_vpn_tunnel_options_specification::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::monitoring::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::moving_address_status::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::nat_gateway::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::nat_gateway_address::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::network_acl::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::network_acl_association::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::network_acl_entry::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::network_card_info::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::network_info::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::network_insights_access_scope::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::network_insights_access_scope_analysis::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::network_insights_access_scope_content::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::network_insights_analysis::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::network_insights_path::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::network_interface::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::network_interface_association::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::network_interface_attachment::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::network_interface_attachment_changes::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::network_interface_count::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::network_interface_count_request::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::network_interface_ipv6_address::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::network_interface_permission::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::network_interface_permission_state::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::network_interface_private_ip_address::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::new_dhcp_configuration::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::on_demand_options::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::on_demand_options_request::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::packet_header_statement::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::packet_header_statement_request::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::path_component::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::path_statement::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::path_statement_request::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::pci_id::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::peering_attachment_status::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::peering_connection_options::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::peering_connection_options_request::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::peering_tgw_info::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::phase1_dh_group_numbers_list_value::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::phase1_dh_group_numbers_request_list_value::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::phase1_encryption_algorithms_list_value::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::phase1_encryption_algorithms_request_list_value::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::phase1_integrity_algorithms_list_value::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::phase1_integrity_algorithms_request_list_value::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::phase2_dh_group_numbers_list_value::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::phase2_dh_group_numbers_request_list_value::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::phase2_encryption_algorithms_list_value::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::phase2_encryption_algorithms_request_list_value::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::phase2_integrity_algorithms_list_value::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::phase2_integrity_algorithms_request_list_value::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::placement::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::placement_group::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::placement_group_info::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::placement_response::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::pool_cidr_block::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::port_range::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::prefix_list::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::prefix_list_association::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::prefix_list_entry::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::prefix_list_id::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::price_schedule::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::price_schedule_specification::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::pricing_detail::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::principal_id_format::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::private_dns_details::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::private_dns_name_configuration::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::private_dns_name_options_on_launch::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::private_dns_name_options_request::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::private_dns_name_options_response::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::private_ip_address_specification::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::processor_info::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::product_code::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::propagating_vgw::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::provisioned_bandwidth::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::ptr_update_status::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::public_ipv4_pool::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::public_ipv4_pool_range::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::purchase::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::purchase_request::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::recurring_charge::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::referenced_security_group::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::region::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::register_instance_tag_attribute_request::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::remove_ipam_operating_region::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::remove_prefix_list_entry::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::replace_root_volume_task::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::request_ipam_resource_tag::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::request_launch_template_data::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::request_spot_launch_specification::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::reservation::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::reservation_fleet_instance_specification::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::reservation_value::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::reserved_instance_limit_price::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::reserved_instance_reservation_value::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::reserved_instances::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::reserved_instances_configuration::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::reserved_instances_id::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::reserved_instances_listing::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::reserved_instances_modification::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::reserved_instances_modification_result::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::reserved_instances_offering::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::resource_statement::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::resource_statement_request::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::response_error::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::response_launch_template_data::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::route::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::route_table::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::route_table_association::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::route_table_association_state::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::run_instances_monitoring_enabled::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::s3_object_tag::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::s3_storage::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::scheduled_instance::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::scheduled_instance_availability::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::scheduled_instance_recurrence::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::scheduled_instance_recurrence_request::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::scheduled_instances_block_device_mapping::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::scheduled_instances_ebs::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::model::scheduled_instances_iam_instance_profile::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::scheduled_instances_ipv6_address::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::scheduled_instances_launch_specification::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::scheduled_instances_monitoring::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::scheduled_instances_network_interface::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::scheduled_instances_placement::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::scheduled_instances_private_ip_address_config::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::security_group::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::security_group_identifier::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::security_group_reference::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::security_group_rule::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::security_group_rule_description::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::security_group_rule_request::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::security_group_rule_update::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::service_configuration::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::service_detail::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::service_type_detail::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::slot_date_time_range_request::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::slot_start_time_range_request::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::snapshot::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::snapshot_detail::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::snapshot_disk_container::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::snapshot_info::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::snapshot_recycle_bin_info::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::snapshot_task_detail::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::snapshot_tier_status::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::spot_capacity_rebalance::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::spot_datafeed_subscription::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::spot_fleet_launch_specification::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::spot_fleet_monitoring::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::spot_fleet_request_config::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::spot_fleet_request_config_data::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::spot_fleet_tag_specification::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::spot_instance_request::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::spot_instance_state_fault::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::spot_instance_status::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::spot_maintenance_strategies::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::spot_market_options::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::spot_options::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::spot_options_request::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::spot_placement::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::spot_placement_score::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::spot_price::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::stale_ip_permission::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::stale_security_group::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::state_reason::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::storage::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::storage_location::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::store_image_task_result::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::subnet::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::subnet_association::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::subnet_cidr_block_state::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::subnet_cidr_reservation::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::subnet_ipv6_cidr_block_association::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::successful_instance_credit_specification_item::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::successful_queued_purchase_deletion::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::tag::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::tag_description::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::tag_specification::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::target_capacity_specification::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::target_capacity_specification_request::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::target_configuration::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::target_configuration_request::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::target_group::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::target_groups_config::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::target_network::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::target_reservation_value::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::terminate_connection_status::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::through_resources_statement::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::through_resources_statement_request::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::total_local_storage_gb::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::total_local_storage_gb_request::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::traffic_mirror_filter::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::traffic_mirror_filter_rule::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::traffic_mirror_port_range::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::traffic_mirror_port_range_request::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::traffic_mirror_session::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::traffic_mirror_target::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::transit_gateway::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::transit_gateway_association::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_attachment::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_attachment_association::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_attachment_bgp_configuration::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_attachment_propagation::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_connect::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::transit_gateway_connect_options::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_connect_peer::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_connect_peer_configuration::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_connect_request_bgp_options::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_multicast_deregistered_group_members::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_multicast_deregistered_group_sources::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_multicast_domain::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_multicast_domain_association::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_multicast_domain_associations::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_multicast_domain_options::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_multicast_group::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_multicast_registered_group_members::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_multicast_registered_group_sources::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_options::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::model::transit_gateway_peering_attachment::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_prefix_list_attachment::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_prefix_list_reference::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_propagation::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_request_options::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::transit_gateway_route::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_route_attachment::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_route_table::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_route_table_association::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_route_table_propagation::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_route_table_route::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_vpc_attachment::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::transit_gateway_vpc_attachment_options::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::trunk_interface_association::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::tunnel_option::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::unsuccessful_instance_credit_specification_item::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::unsuccessful_instance_credit_specification_item_error::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::unsuccessful_item::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::unsuccessful_item_error::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::user_bucket::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::user_bucket_details::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::user_data::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::user_id_group_pair::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::v_cpu_count_range::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::v_cpu_count_range_request::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::v_cpu_info::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::validation_error::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::validation_warning::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::vgw_telemetry::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::volume::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::volume_attachment::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::volume_detail::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::volume_modification::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::volume_status_action::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::volume_status_attachment_status::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::volume_status_details::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::volume_status_event::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::volume_status_info::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::volume_status_item::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::vpc::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::vpc_attachment::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::vpc_cidr_block_association::Builder due
// to hidden fields Skipping aws_sdk_ec2::model::vpc_cidr_block_state::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::vpc_classic_link::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::vpc_endpoint::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::vpc_endpoint_connection::Builder due to hidden
// fields Skipping aws_sdk_ec2::model::vpc_ipv6_cidr_block_association::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::vpc_peering_connection::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::model::vpc_peering_connection_options_description::Builder due to hidden fields
// Skipping aws_sdk_ec2::model::vpc_peering_connection_state_reason::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::model::vpc_peering_connection_vpc_info::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::vpn_connection::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::vpn_connection_device_type::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::vpn_connection_options::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::model::vpn_connection_options_specification::Builder
// due to hidden fields Skipping aws_sdk_ec2::model::vpn_gateway::Builder due to
// hidden fields Skipping aws_sdk_ec2::model::vpn_static_route::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::model::vpn_tunnel_options_specification::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::operation::AcceptReservedInstancesExchangeQuote due to
// hidden fields
// Skipping aws_sdk_ec2::operation::AcceptTransitGatewayMulticastDomainAssociations due to hidden fields
// Skipping aws_sdk_ec2::operation::AcceptTransitGatewayPeeringAttachment due to
// hidden fields
// Skipping aws_sdk_ec2::operation::AcceptTransitGatewayVpcAttachment due to
// hidden fields Skipping aws_sdk_ec2::operation::AcceptVpcEndpointConnections
// due to hidden fields
// Skipping aws_sdk_ec2::operation::AcceptVpcPeeringConnection due to hidden
// fields Skipping aws_sdk_ec2::operation::AdvertiseByoipCidr due to hidden
// fields Skipping aws_sdk_ec2::operation::AllocateAddress due to hidden fields
// Skipping aws_sdk_ec2::operation::AllocateHosts due to hidden fields
// Skipping aws_sdk_ec2::operation::AllocateIpamPoolCidr due to hidden fields
// Skipping aws_sdk_ec2::operation::ApplySecurityGroupsToClientVpnTargetNetwork
// due to hidden fields Skipping aws_sdk_ec2::operation::AssignIpv6Addresses due
// to hidden fields Skipping aws_sdk_ec2::operation::AssignPrivateIpAddresses
// due to hidden fields Skipping aws_sdk_ec2::operation::AssociateAddress due to
// hidden fields
// Skipping aws_sdk_ec2::operation::AssociateClientVpnTargetNetwork due to
// hidden fields Skipping aws_sdk_ec2::operation::AssociateDhcpOptions due to
// hidden fields
// Skipping aws_sdk_ec2::operation::AssociateEnclaveCertificateIamRole due to
// hidden fields Skipping aws_sdk_ec2::operation::AssociateIamInstanceProfile
// due to hidden fields
// Skipping aws_sdk_ec2::operation::AssociateInstanceEventWindow due to hidden
// fields Skipping aws_sdk_ec2::operation::AssociateRouteTable due to hidden
// fields Skipping aws_sdk_ec2::operation::AssociateSubnetCidrBlock due to
// hidden fields
// Skipping aws_sdk_ec2::operation::AssociateTransitGatewayMulticastDomain due
// to hidden fields
// Skipping aws_sdk_ec2::operation::AssociateTransitGatewayRouteTable due to
// hidden fields Skipping aws_sdk_ec2::operation::AssociateTrunkInterface due to
// hidden fields Skipping aws_sdk_ec2::operation::AssociateVpcCidrBlock due to
// hidden fields Skipping aws_sdk_ec2::operation::AttachClassicLinkVpc due to
// hidden fields Skipping aws_sdk_ec2::operation::AttachInternetGateway due to
// hidden fields Skipping aws_sdk_ec2::operation::AttachNetworkInterface due to
// hidden fields Skipping aws_sdk_ec2::operation::AttachVolume due to hidden
// fields Skipping aws_sdk_ec2::operation::AttachVpnGateway due to hidden fields
// Skipping aws_sdk_ec2::operation::AuthorizeClientVpnIngress due to hidden
// fields Skipping aws_sdk_ec2::operation::AuthorizeSecurityGroupEgress due to
// hidden fields Skipping aws_sdk_ec2::operation::AuthorizeSecurityGroupIngress
// due to hidden fields Skipping aws_sdk_ec2::operation::BundleInstance due to
// hidden fields Skipping aws_sdk_ec2::operation::CancelBundleTask due to hidden
// fields Skipping aws_sdk_ec2::operation::CancelCapacityReservation due to
// hidden fields
// Skipping aws_sdk_ec2::operation::CancelCapacityReservationFleets due to
// hidden fields Skipping aws_sdk_ec2::operation::CancelConversionTask due to
// hidden fields Skipping aws_sdk_ec2::operation::CancelExportTask due to hidden
// fields Skipping aws_sdk_ec2::operation::CancelImportTask due to hidden fields
// Skipping aws_sdk_ec2::operation::CancelReservedInstancesListing due to hidden
// fields Skipping aws_sdk_ec2::operation::CancelSpotFleetRequests due to hidden
// fields Skipping aws_sdk_ec2::operation::CancelSpotInstanceRequests due to
// hidden fields Skipping aws_sdk_ec2::operation::ConfirmProductInstance due to
// hidden fields Skipping aws_sdk_ec2::operation::CopyFpgaImage due to hidden
// fields Skipping aws_sdk_ec2::operation::CopyImage due to hidden fields
// Skipping aws_sdk_ec2::operation::CopySnapshot due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateCapacityReservation due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateCapacityReservationFleet due to
// hidden fields Skipping aws_sdk_ec2::operation::CreateCarrierGateway due to
// hidden fields Skipping aws_sdk_ec2::operation::CreateClientVpnEndpoint due to
// hidden fields Skipping aws_sdk_ec2::operation::CreateClientVpnRoute due to
// hidden fields Skipping aws_sdk_ec2::operation::CreateCustomerGateway due to
// hidden fields Skipping aws_sdk_ec2::operation::CreateDefaultSubnet due to
// hidden fields Skipping aws_sdk_ec2::operation::CreateDefaultVpc due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateDhcpOptions due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateEgressOnlyInternetGateway due
// to hidden fields Skipping aws_sdk_ec2::operation::CreateFleet due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateFlowLogs due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateFpgaImage due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateImage due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateInstanceEventWindow due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateInstanceExportTask due to
// hidden fields Skipping aws_sdk_ec2::operation::CreateInternetGateway due to
// hidden fields Skipping aws_sdk_ec2::operation::CreateIpam due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateIpamPool due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateIpamScope due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateKeyPair due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateLaunchTemplate due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateLaunchTemplateVersion due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateLocalGatewayRoute due to hidden
// fields
// Skipping aws_sdk_ec2::operation::CreateLocalGatewayRouteTableVpcAssociation
// due to hidden fields Skipping aws_sdk_ec2::operation::CreateManagedPrefixList
// due to hidden fields Skipping aws_sdk_ec2::operation::CreateNatGateway due to
// hidden fields Skipping aws_sdk_ec2::operation::CreateNetworkAcl due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateNetworkAclEntry due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateNetworkInsightsAccessScope due
// to hidden fields Skipping aws_sdk_ec2::operation::CreateNetworkInsightsPath
// due to hidden fields Skipping aws_sdk_ec2::operation::CreateNetworkInterface
// due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateNetworkInterfacePermission due to
// hidden fields Skipping aws_sdk_ec2::operation::CreatePlacementGroup due to
// hidden fields Skipping aws_sdk_ec2::operation::CreatePublicIpv4Pool due to
// hidden fields Skipping aws_sdk_ec2::operation::CreateReplaceRootVolumeTask
// due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateReservedInstancesListing due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateRestoreImageTask due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateRoute due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateRouteTable due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateSecurityGroup due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateSnapshot due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateSnapshots due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateSpotDatafeedSubscription due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateStoreImageTask due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateSubnet due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateSubnetCidrReservation due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateTags due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateTrafficMirrorFilter due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateTrafficMirrorFilterRule due to
// hidden fields Skipping aws_sdk_ec2::operation::CreateTrafficMirrorSession due
// to hidden fields Skipping aws_sdk_ec2::operation::CreateTrafficMirrorTarget
// due to hidden fields Skipping aws_sdk_ec2::operation::CreateTransitGateway
// due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateTransitGatewayConnect due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateTransitGatewayConnectPeer due
// to hidden fields
// Skipping aws_sdk_ec2::operation::CreateTransitGatewayMulticastDomain due to
// hidden fields
// Skipping aws_sdk_ec2::operation::CreateTransitGatewayPeeringAttachment due to
// hidden fields
// Skipping aws_sdk_ec2::operation::CreateTransitGatewayPrefixListReference due
// to hidden fields Skipping aws_sdk_ec2::operation::CreateTransitGatewayRoute
// due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateTransitGatewayRouteTable due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateTransitGatewayVpcAttachment due
// to hidden fields Skipping aws_sdk_ec2::operation::CreateVolume due to hidden
// fields Skipping aws_sdk_ec2::operation::CreateVpc due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateVpcEndpoint due to hidden fields
// Skipping aws_sdk_ec2::operation::CreateVpcEndpointConnectionNotification due
// to hidden fields
// Skipping aws_sdk_ec2::operation::CreateVpcEndpointServiceConfiguration due to
// hidden fields Skipping aws_sdk_ec2::operation::CreateVpcPeeringConnection due
// to hidden fields Skipping aws_sdk_ec2::operation::CreateVpnConnection due to
// hidden fields Skipping aws_sdk_ec2::operation::CreateVpnConnectionRoute due
// to hidden fields Skipping aws_sdk_ec2::operation::CreateVpnGateway due to
// hidden fields Skipping aws_sdk_ec2::operation::DeleteCarrierGateway due to
// hidden fields Skipping aws_sdk_ec2::operation::DeleteClientVpnEndpoint due to
// hidden fields Skipping aws_sdk_ec2::operation::DeleteClientVpnRoute due to
// hidden fields Skipping aws_sdk_ec2::operation::DeleteCustomerGateway due to
// hidden fields Skipping aws_sdk_ec2::operation::DeleteDhcpOptions due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DeleteEgressOnlyInternetGateway due to
// hidden fields Skipping aws_sdk_ec2::operation::DeleteFleets due to hidden
// fields Skipping aws_sdk_ec2::operation::DeleteFlowLogs due to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteFpgaImage due to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteInstanceEventWindow due to hidden
// fields Skipping aws_sdk_ec2::operation::DeleteInternetGateway due to hidden
// fields Skipping aws_sdk_ec2::operation::DeleteIpam due to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteIpamPool due to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteIpamScope due to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteKeyPair due to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteLaunchTemplate due to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteLaunchTemplateVersions due to hidden
// fields Skipping aws_sdk_ec2::operation::DeleteLocalGatewayRoute due to hidden
// fields
// Skipping aws_sdk_ec2::operation::DeleteLocalGatewayRouteTableVpcAssociation
// due to hidden fields Skipping aws_sdk_ec2::operation::DeleteManagedPrefixList
// due to hidden fields Skipping aws_sdk_ec2::operation::DeleteNatGateway due to
// hidden fields Skipping aws_sdk_ec2::operation::DeleteNetworkAcl due to hidden
// fields Skipping aws_sdk_ec2::operation::DeleteNetworkAclEntry due to hidden
// fields Skipping aws_sdk_ec2::operation::DeleteNetworkInsightsAccessScope due
// to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteNetworkInsightsAccessScopeAnalysis due
// to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteNetworkInsightsAnalysis due to hidden
// fields Skipping aws_sdk_ec2::operation::DeleteNetworkInsightsPath due to
// hidden fields Skipping aws_sdk_ec2::operation::DeleteNetworkInterface due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DeleteNetworkInterfacePermission due to
// hidden fields Skipping aws_sdk_ec2::operation::DeletePlacementGroup due to
// hidden fields Skipping aws_sdk_ec2::operation::DeletePublicIpv4Pool due to
// hidden fields Skipping aws_sdk_ec2::operation::DeleteQueuedReservedInstances
// due to hidden fields Skipping aws_sdk_ec2::operation::DeleteRoute due to
// hidden fields Skipping aws_sdk_ec2::operation::DeleteRouteTable due to hidden
// fields Skipping aws_sdk_ec2::operation::DeleteSecurityGroup due to hidden
// fields Skipping aws_sdk_ec2::operation::DeleteSnapshot due to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteSpotDatafeedSubscription due to hidden
// fields Skipping aws_sdk_ec2::operation::DeleteSubnet due to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteSubnetCidrReservation due to hidden
// fields Skipping aws_sdk_ec2::operation::DeleteTags due to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteTrafficMirrorFilter due to hidden
// fields Skipping aws_sdk_ec2::operation::DeleteTrafficMirrorFilterRule due to
// hidden fields Skipping aws_sdk_ec2::operation::DeleteTrafficMirrorSession due
// to hidden fields Skipping aws_sdk_ec2::operation::DeleteTrafficMirrorTarget
// due to hidden fields Skipping aws_sdk_ec2::operation::DeleteTransitGateway
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteTransitGatewayConnect due to hidden
// fields Skipping aws_sdk_ec2::operation::DeleteTransitGatewayConnectPeer due
// to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteTransitGatewayMulticastDomain due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DeleteTransitGatewayPeeringAttachment due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DeleteTransitGatewayPrefixListReference due
// to hidden fields Skipping aws_sdk_ec2::operation::DeleteTransitGatewayRoute
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteTransitGatewayRouteTable due to hidden
// fields Skipping aws_sdk_ec2::operation::DeleteTransitGatewayVpcAttachment due
// to hidden fields Skipping aws_sdk_ec2::operation::DeleteVolume due to hidden
// fields Skipping aws_sdk_ec2::operation::DeleteVpc due to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteVpcEndpointConnectionNotifications due
// to hidden fields
// Skipping aws_sdk_ec2::operation::DeleteVpcEndpointServiceConfigurations due
// to hidden fields Skipping aws_sdk_ec2::operation::DeleteVpcEndpoints due to
// hidden fields Skipping aws_sdk_ec2::operation::DeleteVpcPeeringConnection due
// to hidden fields Skipping aws_sdk_ec2::operation::DeleteVpnConnection due to
// hidden fields Skipping aws_sdk_ec2::operation::DeleteVpnConnectionRoute due
// to hidden fields Skipping aws_sdk_ec2::operation::DeleteVpnGateway due to
// hidden fields Skipping aws_sdk_ec2::operation::DeprovisionByoipCidr due to
// hidden fields Skipping aws_sdk_ec2::operation::DeprovisionIpamPoolCidr due to
// hidden fields Skipping aws_sdk_ec2::operation::DeprovisionPublicIpv4PoolCidr
// due to hidden fields Skipping aws_sdk_ec2::operation::DeregisterImage due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DeregisterInstanceEventNotificationAttributes due to hidden fields
// Skipping aws_sdk_ec2::operation::DeregisterTransitGatewayMulticastGroupMembers due to hidden fields
// Skipping aws_sdk_ec2::operation::DeregisterTransitGatewayMulticastGroupSources due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeAccountAttributes due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeAddresses due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeAddressesAttribute due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeAggregateIdFormat due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribeAvailabilityZones
// due to hidden fields Skipping aws_sdk_ec2::operation::DescribeBundleTasks due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribeByoipCidrs due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DescribeCapacityReservationFleets due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeCapacityReservations
// due to hidden fields Skipping aws_sdk_ec2::operation::DescribeCarrierGateways
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeClassicLinkInstances due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeClientVpnAuthorizationRules
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeClientVpnConnections due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeClientVpnEndpoints due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeClientVpnRoutes due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DescribeClientVpnTargetNetworks due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeCoipPools due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeConversionTasks due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeCustomerGateways due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribeDhcpOptions due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DescribeEgressOnlyInternetGateways due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeElasticGpus due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeExportImageTasks due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribeExportTasks due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeFastLaunchImages due
// to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeFastSnapshotRestores due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeFleetHistory due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeFleetInstances due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeFleets due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeFlowLogs due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeFpgaImageAttribute due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeFpgaImages due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeHostReservationOfferings due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribeHostReservations
// due to hidden fields Skipping aws_sdk_ec2::operation::DescribeHosts due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DescribeIamInstanceProfileAssociations due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribeIdFormat due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeIdentityIdFormat due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribeImageAttribute due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribeImages due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeImportImageTasks due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribeImportSnapshotTasks
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeInstanceAttribute due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeInstanceCreditSpecifications
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeInstanceEventNotificationAttributes
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeInstanceEventWindows due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeInstanceStatus due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeInstanceTypeOfferings due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeInstanceTypes due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeInstances due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeInternetGateways due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribeIpamPools due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeIpamScopes due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeIpams due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeIpv6Pools due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeKeyPairs due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeLaunchTemplateVersions due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeLaunchTemplates due to hidden
// fields
// Skipping aws_sdk_ec2::operation::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeLocalGatewayRouteTableVpcAssociations due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeLocalGatewayRouteTables due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DescribeLocalGatewayVirtualInterfaceGroups
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeLocalGatewayVirtualInterfaces due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeLocalGateways due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeManagedPrefixLists due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribeMovingAddresses due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribeNatGateways due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeNetworkAcls due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DescribeNetworkInsightsAccessScopeAnalyses
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeNetworkInsightsAccessScopes due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DescribeNetworkInsightsAnalyses due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeNetworkInsightsPaths
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeNetworkInterfaceAttribute due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DescribeNetworkInterfacePermissions due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeNetworkInterfaces due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribePlacementGroups due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribePrefixLists due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribePrincipalIdFormat due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribePublicIpv4Pools due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribeRegions due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeReplaceRootVolumeTasks
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeReservedInstances due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeReservedInstancesListings due
// to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeReservedInstancesModifications due
// to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeReservedInstancesOfferings due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeRouteTables due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DescribeScheduledInstanceAvailability due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeScheduledInstances due
// to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeSecurityGroupReferences due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeSecurityGroupRules due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribeSecurityGroups due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribeSnapshotAttribute
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeSnapshotTierStatus due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeSnapshots due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeSpotDatafeedSubscription due
// to hidden fields Skipping aws_sdk_ec2::operation::DescribeSpotFleetInstances
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeSpotFleetRequestHistory due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeSpotFleetRequests due
// to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeSpotInstanceRequests due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeSpotPriceHistory due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeStaleSecurityGroups
// due to hidden fields Skipping aws_sdk_ec2::operation::DescribeStoreImageTasks
// due to hidden fields Skipping aws_sdk_ec2::operation::DescribeSubnets due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeTags due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeTrafficMirrorFilters due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeTrafficMirrorSessions
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeTrafficMirrorTargets due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeTransitGatewayAttachments due
// to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeTransitGatewayConnectPeers due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeTransitGatewayConnects
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeTransitGatewayMulticastDomains due
// to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeTransitGatewayPeeringAttachments due
// to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeTransitGatewayRouteTables due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DescribeTransitGatewayVpcAttachments due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeTransitGateways due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DescribeTrunkInterfaceAssociations due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeVolumeAttribute due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeVolumeStatus due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeVolumes due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeVolumesModifications due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeVpcAttribute due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeVpcClassicLink due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DescribeVpcClassicLinkDnsSupport due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DescribeVpcEndpointConnectionNotifications
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeVpcEndpointConnections due to hidden
// fields
// Skipping aws_sdk_ec2::operation::DescribeVpcEndpointServiceConfigurations due
// to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeVpcEndpointServicePermissions due to
// hidden fields Skipping aws_sdk_ec2::operation::DescribeVpcEndpointServices
// due to hidden fields Skipping aws_sdk_ec2::operation::DescribeVpcEndpoints
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeVpcPeeringConnections due to hidden
// fields Skipping aws_sdk_ec2::operation::DescribeVpcs due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeVpnConnections due to hidden fields
// Skipping aws_sdk_ec2::operation::DescribeVpnGateways due to hidden fields
// Skipping aws_sdk_ec2::operation::DetachClassicLinkVpc due to hidden fields
// Skipping aws_sdk_ec2::operation::DetachInternetGateway due to hidden fields
// Skipping aws_sdk_ec2::operation::DetachNetworkInterface due to hidden fields
// Skipping aws_sdk_ec2::operation::DetachVolume due to hidden fields
// Skipping aws_sdk_ec2::operation::DetachVpnGateway due to hidden fields
// Skipping aws_sdk_ec2::operation::DisableEbsEncryptionByDefault due to hidden
// fields Skipping aws_sdk_ec2::operation::DisableFastLaunch due to hidden
// fields Skipping aws_sdk_ec2::operation::DisableFastSnapshotRestores due to
// hidden fields Skipping aws_sdk_ec2::operation::DisableImageDeprecation due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DisableIpamOrganizationAdminAccount due to
// hidden fields Skipping aws_sdk_ec2::operation::DisableSerialConsoleAccess due
// to hidden fields
// Skipping aws_sdk_ec2::operation::DisableTransitGatewayRouteTablePropagation
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DisableVgwRoutePropagation due to hidden
// fields Skipping aws_sdk_ec2::operation::DisableVpcClassicLink due to hidden
// fields Skipping aws_sdk_ec2::operation::DisableVpcClassicLinkDnsSupport due
// to hidden fields Skipping aws_sdk_ec2::operation::DisassociateAddress due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DisassociateClientVpnTargetNetwork due to
// hidden fields
// Skipping aws_sdk_ec2::operation::DisassociateEnclaveCertificateIamRole due to
// hidden fields Skipping aws_sdk_ec2::operation::DisassociateIamInstanceProfile
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DisassociateInstanceEventWindow due to
// hidden fields Skipping aws_sdk_ec2::operation::DisassociateRouteTable due to
// hidden fields Skipping aws_sdk_ec2::operation::DisassociateSubnetCidrBlock
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DisassociateTransitGatewayMulticastDomain
// due to hidden fields
// Skipping aws_sdk_ec2::operation::DisassociateTransitGatewayRouteTable due to
// hidden fields Skipping aws_sdk_ec2::operation::DisassociateTrunkInterface due
// to hidden fields Skipping aws_sdk_ec2::operation::DisassociateVpcCidrBlock
// due to hidden fields
// Skipping aws_sdk_ec2::operation::EnableEbsEncryptionByDefault due to hidden
// fields Skipping aws_sdk_ec2::operation::EnableFastLaunch due to hidden fields
// Skipping aws_sdk_ec2::operation::EnableFastSnapshotRestores due to hidden
// fields Skipping aws_sdk_ec2::operation::EnableImageDeprecation due to hidden
// fields Skipping aws_sdk_ec2::operation::EnableIpamOrganizationAdminAccount
// due to hidden fields
// Skipping aws_sdk_ec2::operation::EnableSerialConsoleAccess due to hidden
// fields
// Skipping aws_sdk_ec2::operation::EnableTransitGatewayRouteTablePropagation
// due to hidden fields
// Skipping aws_sdk_ec2::operation::EnableVgwRoutePropagation due to hidden
// fields Skipping aws_sdk_ec2::operation::EnableVolumeIO due to hidden fields
// Skipping aws_sdk_ec2::operation::EnableVpcClassicLink due to hidden fields
// Skipping aws_sdk_ec2::operation::EnableVpcClassicLinkDnsSupport due to hidden
// fields
// Skipping aws_sdk_ec2::operation::ExportClientVpnClientCertificateRevocationList due to hidden fields
// Skipping aws_sdk_ec2::operation::ExportClientVpnClientConfiguration due to
// hidden fields Skipping aws_sdk_ec2::operation::ExportImage due to hidden
// fields Skipping aws_sdk_ec2::operation::ExportTransitGatewayRoutes due to
// hidden fields
// Skipping aws_sdk_ec2::operation::GetAssociatedEnclaveCertificateIamRoles due
// to hidden fields Skipping aws_sdk_ec2::operation::GetAssociatedIpv6PoolCidrs
// due to hidden fields
// Skipping aws_sdk_ec2::operation::GetCapacityReservationUsage due to hidden
// fields Skipping aws_sdk_ec2::operation::GetCoipPoolUsage due to hidden fields
// Skipping aws_sdk_ec2::operation::GetConsoleOutput due to hidden fields
// Skipping aws_sdk_ec2::operation::GetConsoleScreenshot due to hidden fields
// Skipping aws_sdk_ec2::operation::GetDefaultCreditSpecification due to hidden
// fields Skipping aws_sdk_ec2::operation::GetEbsDefaultKmsKeyId due to hidden
// fields Skipping aws_sdk_ec2::operation::GetEbsEncryptionByDefault due to
// hidden fields Skipping aws_sdk_ec2::operation::GetFlowLogsIntegrationTemplate
// due to hidden fields
// Skipping aws_sdk_ec2::operation::GetGroupsForCapacityReservation due to
// hidden fields
// Skipping aws_sdk_ec2::operation::GetHostReservationPurchasePreview due to
// hidden fields
// Skipping aws_sdk_ec2::operation::GetInstanceTypesFromInstanceRequirements due
// to hidden fields Skipping aws_sdk_ec2::operation::GetInstanceUefiData due to
// hidden fields Skipping aws_sdk_ec2::operation::GetIpamAddressHistory due to
// hidden fields Skipping aws_sdk_ec2::operation::GetIpamPoolAllocations due to
// hidden fields Skipping aws_sdk_ec2::operation::GetIpamPoolCidrs due to hidden
// fields Skipping aws_sdk_ec2::operation::GetIpamResourceCidrs due to hidden
// fields Skipping aws_sdk_ec2::operation::GetLaunchTemplateData due to hidden
// fields Skipping aws_sdk_ec2::operation::GetManagedPrefixListAssociations due
// to hidden fields Skipping aws_sdk_ec2::operation::GetManagedPrefixListEntries
// due to hidden fields
// Skipping aws_sdk_ec2::operation::GetNetworkInsightsAccessScopeAnalysisFindings due to hidden fields
// Skipping aws_sdk_ec2::operation::GetNetworkInsightsAccessScopeContent due to
// hidden fields Skipping aws_sdk_ec2::operation::GetPasswordData due to hidden
// fields Skipping aws_sdk_ec2::operation::GetReservedInstancesExchangeQuote due
// to hidden fields
// Skipping aws_sdk_ec2::operation::GetSerialConsoleAccessStatus due to hidden
// fields Skipping aws_sdk_ec2::operation::GetSpotPlacementScores due to hidden
// fields Skipping aws_sdk_ec2::operation::GetSubnetCidrReservations due to
// hidden fields
// Skipping aws_sdk_ec2::operation::GetTransitGatewayAttachmentPropagations due
// to hidden fields
// Skipping aws_sdk_ec2::operation::GetTransitGatewayMulticastDomainAssociations
// due to hidden fields
// Skipping aws_sdk_ec2::operation::GetTransitGatewayPrefixListReferences due to
// hidden fields
// Skipping aws_sdk_ec2::operation::GetTransitGatewayRouteTableAssociations due
// to hidden fields
// Skipping aws_sdk_ec2::operation::GetTransitGatewayRouteTablePropagations due
// to hidden fields
// Skipping aws_sdk_ec2::operation::GetVpnConnectionDeviceSampleConfiguration
// due to hidden fields
// Skipping aws_sdk_ec2::operation::GetVpnConnectionDeviceTypes due to hidden
// fields
// Skipping aws_sdk_ec2::operation::ImportClientVpnClientCertificateRevocationList due to hidden fields
// Skipping aws_sdk_ec2::operation::ImportImage due to hidden fields
// Skipping aws_sdk_ec2::operation::ImportInstance due to hidden fields
// Skipping aws_sdk_ec2::operation::ImportKeyPair due to hidden fields
// Skipping aws_sdk_ec2::operation::ImportSnapshot due to hidden fields
// Skipping aws_sdk_ec2::operation::ImportVolume due to hidden fields
// Skipping aws_sdk_ec2::operation::ListImagesInRecycleBin due to hidden fields
// Skipping aws_sdk_ec2::operation::ListSnapshotsInRecycleBin due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifyAddressAttribute due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifyAvailabilityZoneGroup due to
// hidden fields Skipping aws_sdk_ec2::operation::ModifyCapacityReservation due
// to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyCapacityReservationFleet due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifyClientVpnEndpoint due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifyDefaultCreditSpecification due
// to hidden fields Skipping aws_sdk_ec2::operation::ModifyEbsDefaultKmsKeyId
// due to hidden fields Skipping aws_sdk_ec2::operation::ModifyFleet due to
// hidden fields Skipping aws_sdk_ec2::operation::ModifyFpgaImageAttribute due
// to hidden fields Skipping aws_sdk_ec2::operation::ModifyHosts due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifyIdFormat due to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyIdentityIdFormat due to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyImageAttribute due to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyInstanceAttribute due to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyInstanceCapacityReservationAttributes
// due to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyInstanceCreditSpecification due to
// hidden fields Skipping aws_sdk_ec2::operation::ModifyInstanceEventStartTime
// due to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyInstanceEventWindow due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifyInstanceMaintenanceOptions due
// to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyInstanceMetadataOptions due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifyInstancePlacement due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifyIpam due to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyIpamPool due to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyIpamResourceCidr due to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyIpamScope due to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyLaunchTemplate due to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyManagedPrefixList due to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyNetworkInterfaceAttribute due to
// hidden fields Skipping aws_sdk_ec2::operation::ModifyPrivateDnsNameOptions
// due to hidden fields Skipping aws_sdk_ec2::operation::ModifyReservedInstances
// due to hidden fields
// Skipping aws_sdk_ec2::operation::ModifySecurityGroupRules due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifySnapshotAttribute due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifySnapshotTier due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifySpotFleetRequest due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifySubnetAttribute due to hidden
// fields
// Skipping aws_sdk_ec2::operation::ModifyTrafficMirrorFilterNetworkServices due
// to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyTrafficMirrorFilterRule due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifyTrafficMirrorSession due to
// hidden fields Skipping aws_sdk_ec2::operation::ModifyTransitGateway due to
// hidden fields
// Skipping aws_sdk_ec2::operation::ModifyTransitGatewayPrefixListReference due
// to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyTransitGatewayVpcAttachment due to
// hidden fields Skipping aws_sdk_ec2::operation::ModifyVolume due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifyVolumeAttribute due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifyVpcAttribute due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifyVpcEndpoint due to hidden
// fields
// Skipping aws_sdk_ec2::operation::ModifyVpcEndpointConnectionNotification due
// to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyVpcEndpointServiceConfiguration due to
// hidden fields
// Skipping aws_sdk_ec2::operation::ModifyVpcEndpointServicePayerResponsibility
// due to hidden fields
// Skipping aws_sdk_ec2::operation::ModifyVpcEndpointServicePermissions due to
// hidden fields
// Skipping aws_sdk_ec2::operation::ModifyVpcPeeringConnectionOptions due to
// hidden fields Skipping aws_sdk_ec2::operation::ModifyVpcTenancy due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifyVpnConnection due to hidden
// fields Skipping aws_sdk_ec2::operation::ModifyVpnConnectionOptions due to
// hidden fields Skipping aws_sdk_ec2::operation::ModifyVpnTunnelCertificate due
// to hidden fields Skipping aws_sdk_ec2::operation::ModifyVpnTunnelOptions due
// to hidden fields Skipping aws_sdk_ec2::operation::MonitorInstances due to
// hidden fields Skipping aws_sdk_ec2::operation::MoveAddressToVpc due to hidden
// fields Skipping aws_sdk_ec2::operation::MoveByoipCidrToIpam due to hidden
// fields Skipping aws_sdk_ec2::operation::ProvisionByoipCidr due to hidden
// fields Skipping aws_sdk_ec2::operation::ProvisionIpamPoolCidr due to hidden
// fields Skipping aws_sdk_ec2::operation::ProvisionPublicIpv4PoolCidr due to
// hidden fields Skipping aws_sdk_ec2::operation::PurchaseHostReservation due to
// hidden fields
// Skipping aws_sdk_ec2::operation::PurchaseReservedInstancesOffering due to
// hidden fields Skipping aws_sdk_ec2::operation::PurchaseScheduledInstances due
// to hidden fields Skipping aws_sdk_ec2::operation::RebootInstances due to
// hidden fields Skipping aws_sdk_ec2::operation::RegisterImage due to hidden
// fields
// Skipping aws_sdk_ec2::operation::RegisterInstanceEventNotificationAttributes
// due to hidden fields
// Skipping aws_sdk_ec2::operation::RegisterTransitGatewayMulticastGroupMembers
// due to hidden fields
// Skipping aws_sdk_ec2::operation::RegisterTransitGatewayMulticastGroupSources
// due to hidden fields
// Skipping aws_sdk_ec2::operation::RejectTransitGatewayMulticastDomainAssociations due to hidden fields
// Skipping aws_sdk_ec2::operation::RejectTransitGatewayPeeringAttachment due to
// hidden fields
// Skipping aws_sdk_ec2::operation::RejectTransitGatewayVpcAttachment due to
// hidden fields Skipping aws_sdk_ec2::operation::RejectVpcEndpointConnections
// due to hidden fields
// Skipping aws_sdk_ec2::operation::RejectVpcPeeringConnection due to hidden
// fields Skipping aws_sdk_ec2::operation::ReleaseAddress due to hidden fields
// Skipping aws_sdk_ec2::operation::ReleaseHosts due to hidden fields
// Skipping aws_sdk_ec2::operation::ReleaseIpamPoolAllocation due to hidden
// fields Skipping aws_sdk_ec2::operation::ReplaceIamInstanceProfileAssociation
// due to hidden fields
// Skipping aws_sdk_ec2::operation::ReplaceNetworkAclAssociation due to hidden
// fields Skipping aws_sdk_ec2::operation::ReplaceNetworkAclEntry due to hidden
// fields Skipping aws_sdk_ec2::operation::ReplaceRoute due to hidden fields
// Skipping aws_sdk_ec2::operation::ReplaceRouteTableAssociation due to hidden
// fields Skipping aws_sdk_ec2::operation::ReplaceTransitGatewayRoute due to
// hidden fields Skipping aws_sdk_ec2::operation::ReportInstanceStatus due to
// hidden fields Skipping aws_sdk_ec2::operation::RequestSpotFleet due to hidden
// fields Skipping aws_sdk_ec2::operation::RequestSpotInstances due to hidden
// fields Skipping aws_sdk_ec2::operation::ResetAddressAttribute due to hidden
// fields Skipping aws_sdk_ec2::operation::ResetEbsDefaultKmsKeyId due to hidden
// fields Skipping aws_sdk_ec2::operation::ResetFpgaImageAttribute due to hidden
// fields Skipping aws_sdk_ec2::operation::ResetImageAttribute due to hidden
// fields Skipping aws_sdk_ec2::operation::ResetInstanceAttribute due to hidden
// fields Skipping aws_sdk_ec2::operation::ResetNetworkInterfaceAttribute due to
// hidden fields Skipping aws_sdk_ec2::operation::ResetSnapshotAttribute due to
// hidden fields Skipping aws_sdk_ec2::operation::RestoreAddressToClassic due to
// hidden fields Skipping aws_sdk_ec2::operation::RestoreImageFromRecycleBin due
// to hidden fields
// Skipping aws_sdk_ec2::operation::RestoreManagedPrefixListVersion due to
// hidden fields Skipping aws_sdk_ec2::operation::RestoreSnapshotFromRecycleBin
// due to hidden fields Skipping aws_sdk_ec2::operation::RestoreSnapshotTier due
// to hidden fields Skipping aws_sdk_ec2::operation::RevokeClientVpnIngress due
// to hidden fields Skipping aws_sdk_ec2::operation::RevokeSecurityGroupEgress
// due to hidden fields
// Skipping aws_sdk_ec2::operation::RevokeSecurityGroupIngress due to hidden
// fields Skipping aws_sdk_ec2::operation::RunInstances due to hidden fields
// Skipping aws_sdk_ec2::operation::RunScheduledInstances due to hidden fields
// Skipping aws_sdk_ec2::operation::SearchLocalGatewayRoutes due to hidden
// fields Skipping aws_sdk_ec2::operation::SearchTransitGatewayMulticastGroups
// due to hidden fields
// Skipping aws_sdk_ec2::operation::SearchTransitGatewayRoutes due to hidden
// fields Skipping aws_sdk_ec2::operation::SendDiagnosticInterrupt due to hidden
// fields Skipping aws_sdk_ec2::operation::StartInstances due to hidden fields
// Skipping aws_sdk_ec2::operation::StartNetworkInsightsAccessScopeAnalysis due
// to hidden fields
// Skipping aws_sdk_ec2::operation::StartNetworkInsightsAnalysis due to hidden
// fields
// Skipping aws_sdk_ec2::operation::StartVpcEndpointServicePrivateDnsVerification due to hidden fields
// Skipping aws_sdk_ec2::operation::StopInstances due to hidden fields
// Skipping aws_sdk_ec2::operation::TerminateClientVpnConnections due to hidden
// fields Skipping aws_sdk_ec2::operation::TerminateInstances due to hidden
// fields Skipping aws_sdk_ec2::operation::UnassignIpv6Addresses due to hidden
// fields Skipping aws_sdk_ec2::operation::UnassignPrivateIpAddresses due to
// hidden fields Skipping aws_sdk_ec2::operation::UnmonitorInstances due to
// hidden fields
// Skipping aws_sdk_ec2::operation::UpdateSecurityGroupRuleDescriptionsEgress
// due to hidden fields
// Skipping aws_sdk_ec2::operation::UpdateSecurityGroupRuleDescriptionsIngress
// due to hidden fields Skipping aws_sdk_ec2::operation::WithdrawByoipCidr due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::output::AcceptReservedInstancesExchangeQuoteOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AcceptReservedInstancesExchangeQuoteOutput")
            .field("exchange_id", &self.exchange_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AcceptTransitGatewayMulticastDomainAssociationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AcceptTransitGatewayMulticastDomainAssociationsOutput")
            .field("associations", &self.associations)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AcceptTransitGatewayPeeringAttachmentOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AcceptTransitGatewayPeeringAttachmentOutput")
            .field(
                "transit_gateway_peering_attachment",
                &self.transit_gateway_peering_attachment,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AcceptTransitGatewayVpcAttachmentOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AcceptTransitGatewayVpcAttachmentOutput")
            .field(
                "transit_gateway_vpc_attachment",
                &self.transit_gateway_vpc_attachment,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AcceptVpcEndpointConnectionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AcceptVpcEndpointConnectionsOutput")
            .field("unsuccessful", &self.unsuccessful)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AcceptVpcPeeringConnectionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AcceptVpcPeeringConnectionOutput")
            .field("vpc_peering_connection", &self.vpc_peering_connection)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AdvertiseByoipCidrOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AdvertiseByoipCidrOutput")
            .field("byoip_cidr", &self.byoip_cidr)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AllocateAddressOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AllocateAddressOutput")
            .field("public_ip", &self.public_ip)
            .field("allocation_id", &self.allocation_id)
            .field("public_ipv4_pool", &self.public_ipv4_pool)
            .field("network_border_group", &self.network_border_group)
            .field("domain", &self.domain)
            .field("customer_owned_ip", &self.customer_owned_ip)
            .field("customer_owned_ipv4_pool", &self.customer_owned_ipv4_pool)
            .field("carrier_ip", &self.carrier_ip)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AllocateHostsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AllocateHostsOutput")
            .field("host_ids", &self.host_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AllocateIpamPoolCidrOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AllocateIpamPoolCidrOutput")
            .field("ipam_pool_allocation", &self.ipam_pool_allocation)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ApplySecurityGroupsToClientVpnTargetNetworkOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ApplySecurityGroupsToClientVpnTargetNetworkOutput")
            .field("security_group_ids", &self.security_group_ids)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AssignIpv6AddressesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssignIpv6AddressesOutput")
            .field("assigned_ipv6_addresses", &self.assigned_ipv6_addresses)
            .field("assigned_ipv6_prefixes", &self.assigned_ipv6_prefixes)
            .field("network_interface_id", &self.network_interface_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AssignPrivateIpAddressesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssignPrivateIpAddressesOutput")
            .field("network_interface_id", &self.network_interface_id)
            .field(
                "assigned_private_ip_addresses",
                &self.assigned_private_ip_addresses,
            )
            .field("assigned_ipv4_prefixes", &self.assigned_ipv4_prefixes)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AssociateAddressOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateAddressOutput")
            .field("association_id", &self.association_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AssociateClientVpnTargetNetworkOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateClientVpnTargetNetworkOutput")
            .field("association_id", &self.association_id)
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AssociateDhcpOptionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateDhcpOptionsOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AssociateEnclaveCertificateIamRoleOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateEnclaveCertificateIamRoleOutput")
            .field(
                "certificate_s3_bucket_name",
                &self.certificate_s3_bucket_name,
            )
            .field("certificate_s3_object_key", &self.certificate_s3_object_key)
            .field("encryption_kms_key_id", &self.encryption_kms_key_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AssociateIamInstanceProfileOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateIamInstanceProfileOutput")
            .field(
                "iam_instance_profile_association",
                &self.iam_instance_profile_association,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AssociateInstanceEventWindowOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateInstanceEventWindowOutput")
            .field("instance_event_window", &self.instance_event_window)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AssociateRouteTableOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateRouteTableOutput")
            .field("association_id", &self.association_id)
            .field("association_state", &self.association_state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AssociateSubnetCidrBlockOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateSubnetCidrBlockOutput")
            .field(
                "ipv6_cidr_block_association",
                &self.ipv6_cidr_block_association,
            )
            .field("subnet_id", &self.subnet_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AssociateTransitGatewayMulticastDomainOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateTransitGatewayMulticastDomainOutput")
            .field("associations", &self.associations)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AssociateTransitGatewayRouteTableOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateTransitGatewayRouteTableOutput")
            .field("association", &self.association)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AssociateTrunkInterfaceOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateTrunkInterfaceOutput")
            .field("interface_association", &self.interface_association)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AssociateVpcCidrBlockOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AssociateVpcCidrBlockOutput")
            .field(
                "ipv6_cidr_block_association",
                &self.ipv6_cidr_block_association,
            )
            .field("cidr_block_association", &self.cidr_block_association)
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AttachClassicLinkVpcOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AttachClassicLinkVpcOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AttachInternetGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AttachInternetGatewayOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AttachNetworkInterfaceOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AttachNetworkInterfaceOutput")
            .field("attachment_id", &self.attachment_id)
            .field("network_card_index", &self.network_card_index)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AttachVolumeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AttachVolumeOutput")
            .field("attach_time", &self.attach_time)
            .field("device", &self.device)
            .field("instance_id", &self.instance_id)
            .field("state", &self.state)
            .field("volume_id", &self.volume_id)
            .field("delete_on_termination", &self.delete_on_termination)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AttachVpnGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AttachVpnGatewayOutput")
            .field("vpc_attachment", &self.vpc_attachment)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AuthorizeClientVpnIngressOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AuthorizeClientVpnIngressOutput")
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AuthorizeSecurityGroupEgressOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AuthorizeSecurityGroupEgressOutput")
            .field("r#return", &self.r#return)
            .field("security_group_rules", &self.security_group_rules)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::AuthorizeSecurityGroupIngressOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("AuthorizeSecurityGroupIngressOutput")
            .field("r#return", &self.r#return)
            .field("security_group_rules", &self.security_group_rules)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::BundleInstanceOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("BundleInstanceOutput")
            .field("bundle_task", &self.bundle_task)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CancelBundleTaskOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelBundleTaskOutput")
            .field("bundle_task", &self.bundle_task)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CancelCapacityReservationFleetsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelCapacityReservationFleetsOutput")
            .field(
                "successful_fleet_cancellations",
                &self.successful_fleet_cancellations,
            )
            .field(
                "failed_fleet_cancellations",
                &self.failed_fleet_cancellations,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CancelCapacityReservationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelCapacityReservationOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CancelConversionTaskOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelConversionTaskOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CancelExportTaskOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelExportTaskOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CancelImportTaskOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelImportTaskOutput")
            .field("import_task_id", &self.import_task_id)
            .field("previous_state", &self.previous_state)
            .field("state", &self.state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CancelReservedInstancesListingOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelReservedInstancesListingOutput")
            .field(
                "reserved_instances_listings",
                &self.reserved_instances_listings,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CancelSpotFleetRequestsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelSpotFleetRequestsOutput")
            .field("successful_fleet_requests", &self.successful_fleet_requests)
            .field(
                "unsuccessful_fleet_requests",
                &self.unsuccessful_fleet_requests,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CancelSpotInstanceRequestsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CancelSpotInstanceRequestsOutput")
            .field(
                "cancelled_spot_instance_requests",
                &self.cancelled_spot_instance_requests,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ConfirmProductInstanceOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ConfirmProductInstanceOutput")
            .field("owner_id", &self.owner_id)
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CopyFpgaImageOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CopyFpgaImageOutput")
            .field("fpga_image_id", &self.fpga_image_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CopyImageOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CopyImageOutput")
            .field("image_id", &self.image_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CopySnapshotOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CopySnapshotOutput")
            .field("snapshot_id", &self.snapshot_id)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateCapacityReservationFleetOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateCapacityReservationFleetOutput")
            .field(
                "capacity_reservation_fleet_id",
                &self.capacity_reservation_fleet_id,
            )
            .field("state", &self.state)
            .field("total_target_capacity", &self.total_target_capacity)
            .field("total_fulfilled_capacity", &self.total_fulfilled_capacity)
            .field("instance_match_criteria", &self.instance_match_criteria)
            .field("allocation_strategy", &self.allocation_strategy)
            .field("create_time", &self.create_time)
            .field("end_date", &self.end_date)
            .field("tenancy", &self.tenancy)
            .field(
                "fleet_capacity_reservations",
                &self.fleet_capacity_reservations,
            )
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateCapacityReservationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateCapacityReservationOutput")
            .field("capacity_reservation", &self.capacity_reservation)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateCarrierGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateCarrierGatewayOutput")
            .field("carrier_gateway", &self.carrier_gateway)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateClientVpnEndpointOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateClientVpnEndpointOutput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("status", &self.status)
            .field("dns_name", &self.dns_name)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateClientVpnRouteOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateClientVpnRouteOutput")
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateCustomerGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateCustomerGatewayOutput")
            .field("customer_gateway", &self.customer_gateway)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateDefaultSubnetOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateDefaultSubnetOutput")
            .field("subnet", &self.subnet)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateDefaultVpcOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateDefaultVpcOutput")
            .field("vpc", &self.vpc)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateDhcpOptionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateDhcpOptionsOutput")
            .field("dhcp_options", &self.dhcp_options)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateEgressOnlyInternetGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateEgressOnlyInternetGatewayOutput")
            .field("client_token", &self.client_token)
            .field(
                "egress_only_internet_gateway",
                &self.egress_only_internet_gateway,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateFleetOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateFleetOutput")
            .field("fleet_id", &self.fleet_id)
            .field("errors", &self.errors)
            .field("instances", &self.instances)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateFlowLogsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateFlowLogsOutput")
            .field("client_token", &self.client_token)
            .field("flow_log_ids", &self.flow_log_ids)
            .field("unsuccessful", &self.unsuccessful)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateFpgaImageOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateFpgaImageOutput")
            .field("fpga_image_id", &self.fpga_image_id)
            .field("fpga_image_global_id", &self.fpga_image_global_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateImageOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateImageOutput")
            .field("image_id", &self.image_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateInstanceEventWindowOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateInstanceEventWindowOutput")
            .field("instance_event_window", &self.instance_event_window)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateInstanceExportTaskOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateInstanceExportTaskOutput")
            .field("export_task", &self.export_task)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateInternetGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateInternetGatewayOutput")
            .field("internet_gateway", &self.internet_gateway)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateIpamOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateIpamOutput")
            .field("ipam", &self.ipam)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateIpamPoolOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateIpamPoolOutput")
            .field("ipam_pool", &self.ipam_pool)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateIpamScopeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateIpamScopeOutput")
            .field("ipam_scope", &self.ipam_scope)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateKeyPairOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateKeyPairOutput")
            .field("key_fingerprint", &self.key_fingerprint)
            .field("key_material", &self.key_material)
            .field("key_name", &self.key_name)
            .field("key_pair_id", &self.key_pair_id)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateLaunchTemplateOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateLaunchTemplateOutput")
            .field("launch_template", &self.launch_template)
            .field("warning", &self.warning)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateLaunchTemplateVersionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateLaunchTemplateVersionOutput")
            .field("launch_template_version", &self.launch_template_version)
            .field("warning", &self.warning)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateLocalGatewayRouteOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateLocalGatewayRouteOutput")
            .field("route", &self.route)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateLocalGatewayRouteTableVpcAssociationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateLocalGatewayRouteTableVpcAssociationOutput")
            .field(
                "local_gateway_route_table_vpc_association",
                &self.local_gateway_route_table_vpc_association,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateManagedPrefixListOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateManagedPrefixListOutput")
            .field("prefix_list", &self.prefix_list)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateNatGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateNatGatewayOutput")
            .field("client_token", &self.client_token)
            .field("nat_gateway", &self.nat_gateway)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateNetworkAclEntryOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateNetworkAclEntryOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateNetworkAclOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateNetworkAclOutput")
            .field("network_acl", &self.network_acl)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateNetworkInsightsAccessScopeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateNetworkInsightsAccessScopeOutput")
            .field(
                "network_insights_access_scope",
                &self.network_insights_access_scope,
            )
            .field(
                "network_insights_access_scope_content",
                &self.network_insights_access_scope_content,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateNetworkInsightsPathOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateNetworkInsightsPathOutput")
            .field("network_insights_path", &self.network_insights_path)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateNetworkInterfaceOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateNetworkInterfaceOutput")
            .field("network_interface", &self.network_interface)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateNetworkInterfacePermissionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateNetworkInterfacePermissionOutput")
            .field("interface_permission", &self.interface_permission)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreatePlacementGroupOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreatePlacementGroupOutput")
            .field("placement_group", &self.placement_group)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreatePublicIpv4PoolOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreatePublicIpv4PoolOutput")
            .field("pool_id", &self.pool_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateReplaceRootVolumeTaskOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateReplaceRootVolumeTaskOutput")
            .field("replace_root_volume_task", &self.replace_root_volume_task)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateReservedInstancesListingOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateReservedInstancesListingOutput")
            .field(
                "reserved_instances_listings",
                &self.reserved_instances_listings,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateRestoreImageTaskOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateRestoreImageTaskOutput")
            .field("image_id", &self.image_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateRouteOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateRouteOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateRouteTableOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateRouteTableOutput")
            .field("route_table", &self.route_table)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateSecurityGroupOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateSecurityGroupOutput")
            .field("group_id", &self.group_id)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateSnapshotOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateSnapshotOutput")
            .field("data_encryption_key_id", &self.data_encryption_key_id)
            .field("description", &self.description)
            .field("encrypted", &self.encrypted)
            .field("kms_key_id", &self.kms_key_id)
            .field("owner_id", &self.owner_id)
            .field("progress", &self.progress)
            .field("snapshot_id", &self.snapshot_id)
            .field("start_time", &self.start_time)
            .field("state", &self.state)
            .field("state_message", &self.state_message)
            .field("volume_id", &self.volume_id)
            .field("volume_size", &self.volume_size)
            .field("owner_alias", &self.owner_alias)
            .field("outpost_arn", &self.outpost_arn)
            .field("tags", &self.tags)
            .field("storage_tier", &self.storage_tier)
            .field("restore_expiry_time", &self.restore_expiry_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateSnapshotsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateSnapshotsOutput")
            .field("snapshots", &self.snapshots)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateSpotDatafeedSubscriptionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateSpotDatafeedSubscriptionOutput")
            .field(
                "spot_datafeed_subscription",
                &self.spot_datafeed_subscription,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateStoreImageTaskOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateStoreImageTaskOutput")
            .field("object_key", &self.object_key)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateSubnetCidrReservationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateSubnetCidrReservationOutput")
            .field("subnet_cidr_reservation", &self.subnet_cidr_reservation)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateSubnetOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateSubnetOutput")
            .field("subnet", &self.subnet)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateTagsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTagsOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateTrafficMirrorFilterOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTrafficMirrorFilterOutput")
            .field("traffic_mirror_filter", &self.traffic_mirror_filter)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateTrafficMirrorFilterRuleOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTrafficMirrorFilterRuleOutput")
            .field(
                "traffic_mirror_filter_rule",
                &self.traffic_mirror_filter_rule,
            )
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateTrafficMirrorSessionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTrafficMirrorSessionOutput")
            .field("traffic_mirror_session", &self.traffic_mirror_session)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateTrafficMirrorTargetOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTrafficMirrorTargetOutput")
            .field("traffic_mirror_target", &self.traffic_mirror_target)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateTransitGatewayConnectOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayConnectOutput")
            .field("transit_gateway_connect", &self.transit_gateway_connect)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateTransitGatewayConnectPeerOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayConnectPeerOutput")
            .field(
                "transit_gateway_connect_peer",
                &self.transit_gateway_connect_peer,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateTransitGatewayMulticastDomainOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayMulticastDomainOutput")
            .field(
                "transit_gateway_multicast_domain",
                &self.transit_gateway_multicast_domain,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateTransitGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayOutput")
            .field("transit_gateway", &self.transit_gateway)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateTransitGatewayPeeringAttachmentOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayPeeringAttachmentOutput")
            .field(
                "transit_gateway_peering_attachment",
                &self.transit_gateway_peering_attachment,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateTransitGatewayPrefixListReferenceOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayPrefixListReferenceOutput")
            .field(
                "transit_gateway_prefix_list_reference",
                &self.transit_gateway_prefix_list_reference,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateTransitGatewayRouteOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayRouteOutput")
            .field("route", &self.route)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateTransitGatewayRouteTableOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayRouteTableOutput")
            .field(
                "transit_gateway_route_table",
                &self.transit_gateway_route_table,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateTransitGatewayVpcAttachmentOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateTransitGatewayVpcAttachmentOutput")
            .field(
                "transit_gateway_vpc_attachment",
                &self.transit_gateway_vpc_attachment,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateVolumeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVolumeOutput")
            .field("attachments", &self.attachments)
            .field("availability_zone", &self.availability_zone)
            .field("create_time", &self.create_time)
            .field("encrypted", &self.encrypted)
            .field("kms_key_id", &self.kms_key_id)
            .field("outpost_arn", &self.outpost_arn)
            .field("size", &self.size)
            .field("snapshot_id", &self.snapshot_id)
            .field("state", &self.state)
            .field("volume_id", &self.volume_id)
            .field("iops", &self.iops)
            .field("tags", &self.tags)
            .field("volume_type", &self.volume_type)
            .field("fast_restored", &self.fast_restored)
            .field("multi_attach_enabled", &self.multi_attach_enabled)
            .field("throughput", &self.throughput)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateVpcEndpointConnectionNotificationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVpcEndpointConnectionNotificationOutput")
            .field("connection_notification", &self.connection_notification)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateVpcEndpointOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVpcEndpointOutput")
            .field("vpc_endpoint", &self.vpc_endpoint)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateVpcEndpointServiceConfigurationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVpcEndpointServiceConfigurationOutput")
            .field("service_configuration", &self.service_configuration)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateVpcOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVpcOutput")
            .field("vpc", &self.vpc)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateVpcPeeringConnectionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVpcPeeringConnectionOutput")
            .field("vpc_peering_connection", &self.vpc_peering_connection)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateVpnConnectionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVpnConnectionOutput")
            .field("vpn_connection", &self.vpn_connection)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateVpnConnectionRouteOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVpnConnectionRouteOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::CreateVpnGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("CreateVpnGatewayOutput")
            .field("vpn_gateway", &self.vpn_gateway)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteCarrierGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteCarrierGatewayOutput")
            .field("carrier_gateway", &self.carrier_gateway)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteClientVpnEndpointOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteClientVpnEndpointOutput")
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteClientVpnRouteOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteClientVpnRouteOutput")
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteCustomerGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteCustomerGatewayOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteDhcpOptionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteDhcpOptionsOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteEgressOnlyInternetGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteEgressOnlyInternetGatewayOutput")
            .field("return_code", &self.return_code)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteFleetsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteFleetsOutput")
            .field(
                "successful_fleet_deletions",
                &self.successful_fleet_deletions,
            )
            .field(
                "unsuccessful_fleet_deletions",
                &self.unsuccessful_fleet_deletions,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteFlowLogsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteFlowLogsOutput")
            .field("unsuccessful", &self.unsuccessful)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteFpgaImageOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteFpgaImageOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteInstanceEventWindowOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteInstanceEventWindowOutput")
            .field(
                "instance_event_window_state",
                &self.instance_event_window_state,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteInternetGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteInternetGatewayOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteIpamOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteIpamOutput")
            .field("ipam", &self.ipam)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteIpamPoolOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteIpamPoolOutput")
            .field("ipam_pool", &self.ipam_pool)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteIpamScopeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteIpamScopeOutput")
            .field("ipam_scope", &self.ipam_scope)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteKeyPairOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteKeyPairOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteLaunchTemplateOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteLaunchTemplateOutput")
            .field("launch_template", &self.launch_template)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteLaunchTemplateVersionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteLaunchTemplateVersionsOutput")
            .field(
                "successfully_deleted_launch_template_versions",
                &self.successfully_deleted_launch_template_versions,
            )
            .field(
                "unsuccessfully_deleted_launch_template_versions",
                &self.unsuccessfully_deleted_launch_template_versions,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteLocalGatewayRouteOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteLocalGatewayRouteOutput")
            .field("route", &self.route)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteLocalGatewayRouteTableVpcAssociationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteLocalGatewayRouteTableVpcAssociationOutput")
            .field(
                "local_gateway_route_table_vpc_association",
                &self.local_gateway_route_table_vpc_association,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteManagedPrefixListOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteManagedPrefixListOutput")
            .field("prefix_list", &self.prefix_list)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteNatGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNatGatewayOutput")
            .field("nat_gateway_id", &self.nat_gateway_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteNetworkAclEntryOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNetworkAclEntryOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteNetworkAclOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNetworkAclOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteNetworkInsightsAccessScopeAnalysisOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNetworkInsightsAccessScopeAnalysisOutput")
            .field(
                "network_insights_access_scope_analysis_id",
                &self.network_insights_access_scope_analysis_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteNetworkInsightsAccessScopeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNetworkInsightsAccessScopeOutput")
            .field(
                "network_insights_access_scope_id",
                &self.network_insights_access_scope_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteNetworkInsightsAnalysisOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNetworkInsightsAnalysisOutput")
            .field(
                "network_insights_analysis_id",
                &self.network_insights_analysis_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteNetworkInsightsPathOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNetworkInsightsPathOutput")
            .field("network_insights_path_id", &self.network_insights_path_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteNetworkInterfaceOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNetworkInterfaceOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteNetworkInterfacePermissionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteNetworkInterfacePermissionOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeletePlacementGroupOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeletePlacementGroupOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeletePublicIpv4PoolOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeletePublicIpv4PoolOutput")
            .field("return_value", &self.return_value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteQueuedReservedInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteQueuedReservedInstancesOutput")
            .field(
                "successful_queued_purchase_deletions",
                &self.successful_queued_purchase_deletions,
            )
            .field(
                "failed_queued_purchase_deletions",
                &self.failed_queued_purchase_deletions,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteRouteOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteRouteOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteRouteTableOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteRouteTableOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteSecurityGroupOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteSecurityGroupOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteSnapshotOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteSnapshotOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteSpotDatafeedSubscriptionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteSpotDatafeedSubscriptionOutput")
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteSubnetCidrReservationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteSubnetCidrReservationOutput")
            .field(
                "deleted_subnet_cidr_reservation",
                &self.deleted_subnet_cidr_reservation,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteSubnetOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteSubnetOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteTagsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTagsOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteTrafficMirrorFilterOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTrafficMirrorFilterOutput")
            .field("traffic_mirror_filter_id", &self.traffic_mirror_filter_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteTrafficMirrorFilterRuleOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTrafficMirrorFilterRuleOutput")
            .field(
                "traffic_mirror_filter_rule_id",
                &self.traffic_mirror_filter_rule_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteTrafficMirrorSessionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTrafficMirrorSessionOutput")
            .field("traffic_mirror_session_id", &self.traffic_mirror_session_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteTrafficMirrorTargetOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTrafficMirrorTargetOutput")
            .field("traffic_mirror_target_id", &self.traffic_mirror_target_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteTransitGatewayConnectOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayConnectOutput")
            .field("transit_gateway_connect", &self.transit_gateway_connect)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteTransitGatewayConnectPeerOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayConnectPeerOutput")
            .field(
                "transit_gateway_connect_peer",
                &self.transit_gateway_connect_peer,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteTransitGatewayMulticastDomainOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayMulticastDomainOutput")
            .field(
                "transit_gateway_multicast_domain",
                &self.transit_gateway_multicast_domain,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteTransitGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayOutput")
            .field("transit_gateway", &self.transit_gateway)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteTransitGatewayPeeringAttachmentOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayPeeringAttachmentOutput")
            .field(
                "transit_gateway_peering_attachment",
                &self.transit_gateway_peering_attachment,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteTransitGatewayPrefixListReferenceOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayPrefixListReferenceOutput")
            .field(
                "transit_gateway_prefix_list_reference",
                &self.transit_gateway_prefix_list_reference,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteTransitGatewayRouteOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayRouteOutput")
            .field("route", &self.route)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteTransitGatewayRouteTableOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayRouteTableOutput")
            .field(
                "transit_gateway_route_table",
                &self.transit_gateway_route_table,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteTransitGatewayVpcAttachmentOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteTransitGatewayVpcAttachmentOutput")
            .field(
                "transit_gateway_vpc_attachment",
                &self.transit_gateway_vpc_attachment,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteVolumeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVolumeOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteVpcEndpointConnectionNotificationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVpcEndpointConnectionNotificationsOutput")
            .field("unsuccessful", &self.unsuccessful)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteVpcEndpointServiceConfigurationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVpcEndpointServiceConfigurationsOutput")
            .field("unsuccessful", &self.unsuccessful)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteVpcEndpointsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVpcEndpointsOutput")
            .field("unsuccessful", &self.unsuccessful)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteVpcOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVpcOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteVpcPeeringConnectionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVpcPeeringConnectionOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteVpnConnectionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVpnConnectionOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteVpnConnectionRouteOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVpnConnectionRouteOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeleteVpnGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeleteVpnGatewayOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeprovisionByoipCidrOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeprovisionByoipCidrOutput")
            .field("byoip_cidr", &self.byoip_cidr)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeprovisionIpamPoolCidrOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeprovisionIpamPoolCidrOutput")
            .field("ipam_pool_cidr", &self.ipam_pool_cidr)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeprovisionPublicIpv4PoolCidrOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeprovisionPublicIpv4PoolCidrOutput")
            .field("pool_id", &self.pool_id)
            .field("deprovisioned_addresses", &self.deprovisioned_addresses)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeregisterImageOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeregisterImageOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeregisterInstanceEventNotificationAttributesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeregisterInstanceEventNotificationAttributesOutput")
            .field("instance_tag_attribute", &self.instance_tag_attribute)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeregisterTransitGatewayMulticastGroupMembersOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeregisterTransitGatewayMulticastGroupMembersOutput")
            .field(
                "deregistered_multicast_group_members",
                &self.deregistered_multicast_group_members,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DeregisterTransitGatewayMulticastGroupSourcesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DeregisterTransitGatewayMulticastGroupSourcesOutput")
            .field(
                "deregistered_multicast_group_sources",
                &self.deregistered_multicast_group_sources,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeAccountAttributesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeAccountAttributesOutput")
            .field("account_attributes", &self.account_attributes)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeAddressesAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeAddressesAttributeOutput")
            .field("addresses", &self.addresses)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeAddressesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeAddressesOutput")
            .field("addresses", &self.addresses)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeAggregateIdFormatOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeAggregateIdFormatOutput")
            .field("use_long_ids_aggregated", &self.use_long_ids_aggregated)
            .field("statuses", &self.statuses)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeAvailabilityZonesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeAvailabilityZonesOutput")
            .field("availability_zones", &self.availability_zones)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeBundleTasksOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeBundleTasksOutput")
            .field("bundle_tasks", &self.bundle_tasks)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeByoipCidrsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeByoipCidrsOutput")
            .field("byoip_cidrs", &self.byoip_cidrs)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeCapacityReservationFleetsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeCapacityReservationFleetsOutput")
            .field(
                "capacity_reservation_fleets",
                &self.capacity_reservation_fleets,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeCapacityReservationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeCapacityReservationsOutput")
            .field("next_token", &self.next_token)
            .field("capacity_reservations", &self.capacity_reservations)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeCarrierGatewaysOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeCarrierGatewaysOutput")
            .field("carrier_gateways", &self.carrier_gateways)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeClassicLinkInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeClassicLinkInstancesOutput")
            .field("instances", &self.instances)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeClientVpnAuthorizationRulesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeClientVpnAuthorizationRulesOutput")
            .field("authorization_rules", &self.authorization_rules)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeClientVpnConnectionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeClientVpnConnectionsOutput")
            .field("connections", &self.connections)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeClientVpnEndpointsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeClientVpnEndpointsOutput")
            .field("client_vpn_endpoints", &self.client_vpn_endpoints)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeClientVpnRoutesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeClientVpnRoutesOutput")
            .field("routes", &self.routes)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeClientVpnTargetNetworksOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeClientVpnTargetNetworksOutput")
            .field(
                "client_vpn_target_networks",
                &self.client_vpn_target_networks,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeCoipPoolsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeCoipPoolsOutput")
            .field("coip_pools", &self.coip_pools)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeConversionTasksOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeConversionTasksOutput")
            .field("conversion_tasks", &self.conversion_tasks)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeCustomerGatewaysOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeCustomerGatewaysOutput")
            .field("customer_gateways", &self.customer_gateways)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeDhcpOptionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeDhcpOptionsOutput")
            .field("dhcp_options", &self.dhcp_options)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeEgressOnlyInternetGatewaysOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeEgressOnlyInternetGatewaysOutput")
            .field(
                "egress_only_internet_gateways",
                &self.egress_only_internet_gateways,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeElasticGpusOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeElasticGpusOutput")
            .field("elastic_gpu_set", &self.elastic_gpu_set)
            .field("max_results", &self.max_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeExportImageTasksOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeExportImageTasksOutput")
            .field("export_image_tasks", &self.export_image_tasks)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeExportTasksOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeExportTasksOutput")
            .field("export_tasks", &self.export_tasks)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeFastLaunchImagesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFastLaunchImagesOutput")
            .field("fast_launch_images", &self.fast_launch_images)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeFastSnapshotRestoresOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFastSnapshotRestoresOutput")
            .field("fast_snapshot_restores", &self.fast_snapshot_restores)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeFleetHistoryOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFleetHistoryOutput")
            .field("history_records", &self.history_records)
            .field("last_evaluated_time", &self.last_evaluated_time)
            .field("next_token", &self.next_token)
            .field("fleet_id", &self.fleet_id)
            .field("start_time", &self.start_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeFleetInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFleetInstancesOutput")
            .field("active_instances", &self.active_instances)
            .field("next_token", &self.next_token)
            .field("fleet_id", &self.fleet_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeFleetsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFleetsOutput")
            .field("next_token", &self.next_token)
            .field("fleets", &self.fleets)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeFlowLogsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFlowLogsOutput")
            .field("flow_logs", &self.flow_logs)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeFpgaImageAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFpgaImageAttributeOutput")
            .field("fpga_image_attribute", &self.fpga_image_attribute)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeFpgaImagesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeFpgaImagesOutput")
            .field("fpga_images", &self.fpga_images)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeHostReservationOfferingsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeHostReservationOfferingsOutput")
            .field("next_token", &self.next_token)
            .field("offering_set", &self.offering_set)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeHostReservationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeHostReservationsOutput")
            .field("host_reservation_set", &self.host_reservation_set)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeHostsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeHostsOutput")
            .field("hosts", &self.hosts)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeIamInstanceProfileAssociationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeIamInstanceProfileAssociationsOutput")
            .field(
                "iam_instance_profile_associations",
                &self.iam_instance_profile_associations,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeIdFormatOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeIdFormatOutput")
            .field("statuses", &self.statuses)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeIdentityIdFormatOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeIdentityIdFormatOutput")
            .field("statuses", &self.statuses)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeImageAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeImageAttributeOutput")
            .field("block_device_mappings", &self.block_device_mappings)
            .field("image_id", &self.image_id)
            .field("launch_permissions", &self.launch_permissions)
            .field("product_codes", &self.product_codes)
            .field("description", &self.description)
            .field("kernel_id", &self.kernel_id)
            .field("ramdisk_id", &self.ramdisk_id)
            .field("sriov_net_support", &self.sriov_net_support)
            .field("boot_mode", &self.boot_mode)
            .field("tpm_support", &self.tpm_support)
            .field("uefi_data", &self.uefi_data)
            .field("last_launched_time", &self.last_launched_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeImagesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeImagesOutput")
            .field("images", &self.images)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeImportImageTasksOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeImportImageTasksOutput")
            .field("import_image_tasks", &self.import_image_tasks)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeImportSnapshotTasksOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeImportSnapshotTasksOutput")
            .field("import_snapshot_tasks", &self.import_snapshot_tasks)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeInstanceAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInstanceAttributeOutput")
            .field("groups", &self.groups)
            .field("block_device_mappings", &self.block_device_mappings)
            .field("disable_api_termination", &self.disable_api_termination)
            .field("ena_support", &self.ena_support)
            .field("enclave_options", &self.enclave_options)
            .field("ebs_optimized", &self.ebs_optimized)
            .field("instance_id", &self.instance_id)
            .field(
                "instance_initiated_shutdown_behavior",
                &self.instance_initiated_shutdown_behavior,
            )
            .field("instance_type", &self.instance_type)
            .field("kernel_id", &self.kernel_id)
            .field("product_codes", &self.product_codes)
            .field("ramdisk_id", &self.ramdisk_id)
            .field("root_device_name", &self.root_device_name)
            .field("source_dest_check", &self.source_dest_check)
            .field("sriov_net_support", &self.sriov_net_support)
            .field("user_data", &self.user_data)
            .field("disable_api_stop", &self.disable_api_stop)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeInstanceCreditSpecificationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInstanceCreditSpecificationsOutput")
            .field(
                "instance_credit_specifications",
                &self.instance_credit_specifications,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeInstanceEventNotificationAttributesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInstanceEventNotificationAttributesOutput")
            .field("instance_tag_attribute", &self.instance_tag_attribute)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeInstanceEventWindowsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInstanceEventWindowsOutput")
            .field("instance_event_windows", &self.instance_event_windows)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeInstanceStatusOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInstanceStatusOutput")
            .field("instance_statuses", &self.instance_statuses)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeInstanceTypeOfferingsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInstanceTypeOfferingsOutput")
            .field("instance_type_offerings", &self.instance_type_offerings)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeInstanceTypesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInstanceTypesOutput")
            .field("instance_types", &self.instance_types)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInstancesOutput")
            .field("reservations", &self.reservations)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeInternetGatewaysOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeInternetGatewaysOutput")
            .field("internet_gateways", &self.internet_gateways)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeIpamPoolsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeIpamPoolsOutput")
            .field("next_token", &self.next_token)
            .field("ipam_pools", &self.ipam_pools)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeIpamScopesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeIpamScopesOutput")
            .field("next_token", &self.next_token)
            .field("ipam_scopes", &self.ipam_scopes)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeIpamsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeIpamsOutput")
            .field("next_token", &self.next_token)
            .field("ipams", &self.ipams)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeIpv6PoolsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeIpv6PoolsOutput")
            .field("ipv6_pools", &self.ipv6_pools)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeKeyPairsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeKeyPairsOutput")
            .field("key_pairs", &self.key_pairs)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeLaunchTemplateVersionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeLaunchTemplateVersionsOutput")
            .field("launch_template_versions", &self.launch_template_versions)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeLaunchTemplatesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeLaunchTemplatesOutput")
            .field("launch_templates", &self.launch_templates)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug
    for aws_sdk_ec2::output::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput
{
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsOutput")
            .field(
                "local_gateway_route_table_virtual_interface_group_associations",
                &self.local_gateway_route_table_virtual_interface_group_associations,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeLocalGatewayRouteTableVpcAssociationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeLocalGatewayRouteTableVpcAssociationsOutput")
            .field(
                "local_gateway_route_table_vpc_associations",
                &self.local_gateway_route_table_vpc_associations,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeLocalGatewayRouteTablesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeLocalGatewayRouteTablesOutput")
            .field(
                "local_gateway_route_tables",
                &self.local_gateway_route_tables,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeLocalGatewayVirtualInterfaceGroupsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeLocalGatewayVirtualInterfaceGroupsOutput")
            .field(
                "local_gateway_virtual_interface_groups",
                &self.local_gateway_virtual_interface_groups,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeLocalGatewayVirtualInterfacesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeLocalGatewayVirtualInterfacesOutput")
            .field(
                "local_gateway_virtual_interfaces",
                &self.local_gateway_virtual_interfaces,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeLocalGatewaysOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeLocalGatewaysOutput")
            .field("local_gateways", &self.local_gateways)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeManagedPrefixListsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeManagedPrefixListsOutput")
            .field("next_token", &self.next_token)
            .field("prefix_lists", &self.prefix_lists)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeMovingAddressesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeMovingAddressesOutput")
            .field("moving_address_statuses", &self.moving_address_statuses)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeNatGatewaysOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNatGatewaysOutput")
            .field("nat_gateways", &self.nat_gateways)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeNetworkAclsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNetworkAclsOutput")
            .field("network_acls", &self.network_acls)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeNetworkInsightsAccessScopeAnalysesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNetworkInsightsAccessScopeAnalysesOutput")
            .field(
                "network_insights_access_scope_analyses",
                &self.network_insights_access_scope_analyses,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeNetworkInsightsAccessScopesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNetworkInsightsAccessScopesOutput")
            .field(
                "network_insights_access_scopes",
                &self.network_insights_access_scopes,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeNetworkInsightsAnalysesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNetworkInsightsAnalysesOutput")
            .field("network_insights_analyses", &self.network_insights_analyses)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeNetworkInsightsPathsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNetworkInsightsPathsOutput")
            .field("network_insights_paths", &self.network_insights_paths)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeNetworkInterfaceAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNetworkInterfaceAttributeOutput")
            .field("attachment", &self.attachment)
            .field("description", &self.description)
            .field("groups", &self.groups)
            .field("network_interface_id", &self.network_interface_id)
            .field("source_dest_check", &self.source_dest_check)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeNetworkInterfacePermissionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNetworkInterfacePermissionsOutput")
            .field(
                "network_interface_permissions",
                &self.network_interface_permissions,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeNetworkInterfacesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeNetworkInterfacesOutput")
            .field("network_interfaces", &self.network_interfaces)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribePlacementGroupsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribePlacementGroupsOutput")
            .field("placement_groups", &self.placement_groups)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribePrefixListsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribePrefixListsOutput")
            .field("next_token", &self.next_token)
            .field("prefix_lists", &self.prefix_lists)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribePrincipalIdFormatOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribePrincipalIdFormatOutput")
            .field("principals", &self.principals)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribePublicIpv4PoolsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribePublicIpv4PoolsOutput")
            .field("public_ipv4_pools", &self.public_ipv4_pools)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeRegionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeRegionsOutput")
            .field("regions", &self.regions)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeReplaceRootVolumeTasksOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeReplaceRootVolumeTasksOutput")
            .field("replace_root_volume_tasks", &self.replace_root_volume_tasks)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeReservedInstancesListingsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeReservedInstancesListingsOutput")
            .field(
                "reserved_instances_listings",
                &self.reserved_instances_listings,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeReservedInstancesModificationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeReservedInstancesModificationsOutput")
            .field("next_token", &self.next_token)
            .field(
                "reserved_instances_modifications",
                &self.reserved_instances_modifications,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeReservedInstancesOfferingsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeReservedInstancesOfferingsOutput")
            .field(
                "reserved_instances_offerings",
                &self.reserved_instances_offerings,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeReservedInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeReservedInstancesOutput")
            .field("reserved_instances", &self.reserved_instances)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeRouteTablesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeRouteTablesOutput")
            .field("route_tables", &self.route_tables)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeScheduledInstanceAvailabilityOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeScheduledInstanceAvailabilityOutput")
            .field("next_token", &self.next_token)
            .field(
                "scheduled_instance_availability_set",
                &self.scheduled_instance_availability_set,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeScheduledInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeScheduledInstancesOutput")
            .field("next_token", &self.next_token)
            .field("scheduled_instance_set", &self.scheduled_instance_set)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeSecurityGroupReferencesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSecurityGroupReferencesOutput")
            .field(
                "security_group_reference_set",
                &self.security_group_reference_set,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeSecurityGroupRulesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSecurityGroupRulesOutput")
            .field("security_group_rules", &self.security_group_rules)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeSecurityGroupsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSecurityGroupsOutput")
            .field("security_groups", &self.security_groups)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeSnapshotAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSnapshotAttributeOutput")
            .field("create_volume_permissions", &self.create_volume_permissions)
            .field("product_codes", &self.product_codes)
            .field("snapshot_id", &self.snapshot_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeSnapshotTierStatusOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSnapshotTierStatusOutput")
            .field("snapshot_tier_statuses", &self.snapshot_tier_statuses)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeSnapshotsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSnapshotsOutput")
            .field("snapshots", &self.snapshots)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeSpotDatafeedSubscriptionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSpotDatafeedSubscriptionOutput")
            .field(
                "spot_datafeed_subscription",
                &self.spot_datafeed_subscription,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeSpotFleetInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSpotFleetInstancesOutput")
            .field("active_instances", &self.active_instances)
            .field("next_token", &self.next_token)
            .field("spot_fleet_request_id", &self.spot_fleet_request_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeSpotFleetRequestHistoryOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSpotFleetRequestHistoryOutput")
            .field("history_records", &self.history_records)
            .field("last_evaluated_time", &self.last_evaluated_time)
            .field("next_token", &self.next_token)
            .field("spot_fleet_request_id", &self.spot_fleet_request_id)
            .field("start_time", &self.start_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeSpotFleetRequestsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSpotFleetRequestsOutput")
            .field("next_token", &self.next_token)
            .field(
                "spot_fleet_request_configs",
                &self.spot_fleet_request_configs,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeSpotInstanceRequestsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSpotInstanceRequestsOutput")
            .field("spot_instance_requests", &self.spot_instance_requests)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeSpotPriceHistoryOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSpotPriceHistoryOutput")
            .field("next_token", &self.next_token)
            .field("spot_price_history", &self.spot_price_history)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeStaleSecurityGroupsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeStaleSecurityGroupsOutput")
            .field("next_token", &self.next_token)
            .field("stale_security_group_set", &self.stale_security_group_set)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeStoreImageTasksOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeStoreImageTasksOutput")
            .field("store_image_task_results", &self.store_image_task_results)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeSubnetsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeSubnetsOutput")
            .field("subnets", &self.subnets)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeTagsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTagsOutput")
            .field("next_token", &self.next_token)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeTrafficMirrorFiltersOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTrafficMirrorFiltersOutput")
            .field("traffic_mirror_filters", &self.traffic_mirror_filters)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeTrafficMirrorSessionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTrafficMirrorSessionsOutput")
            .field("traffic_mirror_sessions", &self.traffic_mirror_sessions)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeTrafficMirrorTargetsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTrafficMirrorTargetsOutput")
            .field("traffic_mirror_targets", &self.traffic_mirror_targets)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeTransitGatewayAttachmentsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTransitGatewayAttachmentsOutput")
            .field(
                "transit_gateway_attachments",
                &self.transit_gateway_attachments,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeTransitGatewayConnectPeersOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTransitGatewayConnectPeersOutput")
            .field(
                "transit_gateway_connect_peers",
                &self.transit_gateway_connect_peers,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeTransitGatewayConnectsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTransitGatewayConnectsOutput")
            .field("transit_gateway_connects", &self.transit_gateway_connects)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeTransitGatewayMulticastDomainsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTransitGatewayMulticastDomainsOutput")
            .field(
                "transit_gateway_multicast_domains",
                &self.transit_gateway_multicast_domains,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeTransitGatewayPeeringAttachmentsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTransitGatewayPeeringAttachmentsOutput")
            .field(
                "transit_gateway_peering_attachments",
                &self.transit_gateway_peering_attachments,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeTransitGatewayRouteTablesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTransitGatewayRouteTablesOutput")
            .field(
                "transit_gateway_route_tables",
                &self.transit_gateway_route_tables,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeTransitGatewayVpcAttachmentsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTransitGatewayVpcAttachmentsOutput")
            .field(
                "transit_gateway_vpc_attachments",
                &self.transit_gateway_vpc_attachments,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeTransitGatewaysOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTransitGatewaysOutput")
            .field("transit_gateways", &self.transit_gateways)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeTrunkInterfaceAssociationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeTrunkInterfaceAssociationsOutput")
            .field("interface_associations", &self.interface_associations)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVolumeAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVolumeAttributeOutput")
            .field("auto_enable_io", &self.auto_enable_io)
            .field("product_codes", &self.product_codes)
            .field("volume_id", &self.volume_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVolumeStatusOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVolumeStatusOutput")
            .field("next_token", &self.next_token)
            .field("volume_statuses", &self.volume_statuses)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVolumesModificationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVolumesModificationsOutput")
            .field("volumes_modifications", &self.volumes_modifications)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVolumesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVolumesOutput")
            .field("volumes", &self.volumes)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVpcAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcAttributeOutput")
            .field("vpc_id", &self.vpc_id)
            .field("enable_dns_hostnames", &self.enable_dns_hostnames)
            .field("enable_dns_support", &self.enable_dns_support)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVpcClassicLinkDnsSupportOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcClassicLinkDnsSupportOutput")
            .field("next_token", &self.next_token)
            .field("vpcs", &self.vpcs)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVpcClassicLinkOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcClassicLinkOutput")
            .field("vpcs", &self.vpcs)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVpcEndpointConnectionNotificationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcEndpointConnectionNotificationsOutput")
            .field(
                "connection_notification_set",
                &self.connection_notification_set,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVpcEndpointConnectionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcEndpointConnectionsOutput")
            .field("vpc_endpoint_connections", &self.vpc_endpoint_connections)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVpcEndpointServiceConfigurationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcEndpointServiceConfigurationsOutput")
            .field("service_configurations", &self.service_configurations)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVpcEndpointServicePermissionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcEndpointServicePermissionsOutput")
            .field("allowed_principals", &self.allowed_principals)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVpcEndpointServicesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcEndpointServicesOutput")
            .field("service_names", &self.service_names)
            .field("service_details", &self.service_details)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVpcEndpointsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcEndpointsOutput")
            .field("vpc_endpoints", &self.vpc_endpoints)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVpcPeeringConnectionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcPeeringConnectionsOutput")
            .field("vpc_peering_connections", &self.vpc_peering_connections)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVpcsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpcsOutput")
            .field("vpcs", &self.vpcs)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVpnConnectionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpnConnectionsOutput")
            .field("vpn_connections", &self.vpn_connections)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DescribeVpnGatewaysOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DescribeVpnGatewaysOutput")
            .field("vpn_gateways", &self.vpn_gateways)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DetachClassicLinkVpcOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DetachClassicLinkVpcOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DetachInternetGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DetachInternetGatewayOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DetachNetworkInterfaceOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DetachNetworkInterfaceOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DetachVolumeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DetachVolumeOutput")
            .field("attach_time", &self.attach_time)
            .field("device", &self.device)
            .field("instance_id", &self.instance_id)
            .field("state", &self.state)
            .field("volume_id", &self.volume_id)
            .field("delete_on_termination", &self.delete_on_termination)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DetachVpnGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DetachVpnGatewayOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisableEbsEncryptionByDefaultOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableEbsEncryptionByDefaultOutput")
            .field("ebs_encryption_by_default", &self.ebs_encryption_by_default)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisableFastLaunchOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableFastLaunchOutput")
            .field("image_id", &self.image_id)
            .field("resource_type", &self.resource_type)
            .field("snapshot_configuration", &self.snapshot_configuration)
            .field("launch_template", &self.launch_template)
            .field("max_parallel_launches", &self.max_parallel_launches)
            .field("owner_id", &self.owner_id)
            .field("state", &self.state)
            .field("state_transition_reason", &self.state_transition_reason)
            .field("state_transition_time", &self.state_transition_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisableFastSnapshotRestoresOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableFastSnapshotRestoresOutput")
            .field("successful", &self.successful)
            .field("unsuccessful", &self.unsuccessful)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisableImageDeprecationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableImageDeprecationOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisableIpamOrganizationAdminAccountOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableIpamOrganizationAdminAccountOutput")
            .field("success", &self.success)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisableSerialConsoleAccessOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableSerialConsoleAccessOutput")
            .field(
                "serial_console_access_enabled",
                &self.serial_console_access_enabled,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisableTransitGatewayRouteTablePropagationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableTransitGatewayRouteTablePropagationOutput")
            .field("propagation", &self.propagation)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisableVgwRoutePropagationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableVgwRoutePropagationOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisableVpcClassicLinkDnsSupportOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableVpcClassicLinkDnsSupportOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisableVpcClassicLinkOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisableVpcClassicLinkOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisassociateAddressOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateAddressOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisassociateClientVpnTargetNetworkOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateClientVpnTargetNetworkOutput")
            .field("association_id", &self.association_id)
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisassociateEnclaveCertificateIamRoleOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateEnclaveCertificateIamRoleOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisassociateIamInstanceProfileOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateIamInstanceProfileOutput")
            .field(
                "iam_instance_profile_association",
                &self.iam_instance_profile_association,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisassociateInstanceEventWindowOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateInstanceEventWindowOutput")
            .field("instance_event_window", &self.instance_event_window)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisassociateRouteTableOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateRouteTableOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisassociateSubnetCidrBlockOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateSubnetCidrBlockOutput")
            .field(
                "ipv6_cidr_block_association",
                &self.ipv6_cidr_block_association,
            )
            .field("subnet_id", &self.subnet_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisassociateTransitGatewayMulticastDomainOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateTransitGatewayMulticastDomainOutput")
            .field("associations", &self.associations)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisassociateTransitGatewayRouteTableOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateTransitGatewayRouteTableOutput")
            .field("association", &self.association)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisassociateTrunkInterfaceOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateTrunkInterfaceOutput")
            .field("r#return", &self.r#return)
            .field("client_token", &self.client_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::DisassociateVpcCidrBlockOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("DisassociateVpcCidrBlockOutput")
            .field(
                "ipv6_cidr_block_association",
                &self.ipv6_cidr_block_association,
            )
            .field("cidr_block_association", &self.cidr_block_association)
            .field("vpc_id", &self.vpc_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::EnableEbsEncryptionByDefaultOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableEbsEncryptionByDefaultOutput")
            .field("ebs_encryption_by_default", &self.ebs_encryption_by_default)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::EnableFastLaunchOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableFastLaunchOutput")
            .field("image_id", &self.image_id)
            .field("resource_type", &self.resource_type)
            .field("snapshot_configuration", &self.snapshot_configuration)
            .field("launch_template", &self.launch_template)
            .field("max_parallel_launches", &self.max_parallel_launches)
            .field("owner_id", &self.owner_id)
            .field("state", &self.state)
            .field("state_transition_reason", &self.state_transition_reason)
            .field("state_transition_time", &self.state_transition_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::EnableFastSnapshotRestoresOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableFastSnapshotRestoresOutput")
            .field("successful", &self.successful)
            .field("unsuccessful", &self.unsuccessful)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::EnableImageDeprecationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableImageDeprecationOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::EnableIpamOrganizationAdminAccountOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableIpamOrganizationAdminAccountOutput")
            .field("success", &self.success)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::EnableSerialConsoleAccessOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableSerialConsoleAccessOutput")
            .field(
                "serial_console_access_enabled",
                &self.serial_console_access_enabled,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::EnableTransitGatewayRouteTablePropagationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableTransitGatewayRouteTablePropagationOutput")
            .field("propagation", &self.propagation)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::EnableVgwRoutePropagationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableVgwRoutePropagationOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::EnableVolumeIoOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableVolumeIoOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::EnableVpcClassicLinkDnsSupportOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableVpcClassicLinkDnsSupportOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::EnableVpcClassicLinkOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("EnableVpcClassicLinkOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ExportClientVpnClientCertificateRevocationListOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ExportClientVpnClientCertificateRevocationListOutput")
            .field(
                "certificate_revocation_list",
                &self.certificate_revocation_list,
            )
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ExportClientVpnClientConfigurationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ExportClientVpnClientConfigurationOutput")
            .field("client_configuration", &self.client_configuration)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ExportImageOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ExportImageOutput")
            .field("description", &self.description)
            .field("disk_image_format", &self.disk_image_format)
            .field("export_image_task_id", &self.export_image_task_id)
            .field("image_id", &self.image_id)
            .field("role_name", &self.role_name)
            .field("progress", &self.progress)
            .field("s3_export_location", &self.s3_export_location)
            .field("status", &self.status)
            .field("status_message", &self.status_message)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ExportTransitGatewayRoutesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ExportTransitGatewayRoutesOutput")
            .field("s3_location", &self.s3_location)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetAssociatedEnclaveCertificateIamRolesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetAssociatedEnclaveCertificateIamRolesOutput")
            .field("associated_roles", &self.associated_roles)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetAssociatedIpv6PoolCidrsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetAssociatedIpv6PoolCidrsOutput")
            .field("ipv6_cidr_associations", &self.ipv6_cidr_associations)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetCapacityReservationUsageOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetCapacityReservationUsageOutput")
            .field("next_token", &self.next_token)
            .field("capacity_reservation_id", &self.capacity_reservation_id)
            .field("instance_type", &self.instance_type)
            .field("total_instance_count", &self.total_instance_count)
            .field("available_instance_count", &self.available_instance_count)
            .field("state", &self.state)
            .field("instance_usages", &self.instance_usages)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetCoipPoolUsageOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetCoipPoolUsageOutput")
            .field("coip_pool_id", &self.coip_pool_id)
            .field("coip_address_usages", &self.coip_address_usages)
            .field(
                "local_gateway_route_table_id",
                &self.local_gateway_route_table_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetConsoleOutputOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetConsoleOutputOutput")
            .field("instance_id", &self.instance_id)
            .field("output", &self.output)
            .field("timestamp", &self.timestamp)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetConsoleScreenshotOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetConsoleScreenshotOutput")
            .field("image_data", &self.image_data)
            .field("instance_id", &self.instance_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetDefaultCreditSpecificationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetDefaultCreditSpecificationOutput")
            .field(
                "instance_family_credit_specification",
                &self.instance_family_credit_specification,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetEbsDefaultKmsKeyIdOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetEbsDefaultKmsKeyIdOutput")
            .field("kms_key_id", &self.kms_key_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetEbsEncryptionByDefaultOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetEbsEncryptionByDefaultOutput")
            .field("ebs_encryption_by_default", &self.ebs_encryption_by_default)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetFlowLogsIntegrationTemplateOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetFlowLogsIntegrationTemplateOutput")
            .field("result", &self.result)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetGroupsForCapacityReservationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetGroupsForCapacityReservationOutput")
            .field("next_token", &self.next_token)
            .field(
                "capacity_reservation_groups",
                &self.capacity_reservation_groups,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetHostReservationPurchasePreviewOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetHostReservationPurchasePreviewOutput")
            .field("currency_code", &self.currency_code)
            .field("purchase", &self.purchase)
            .field("total_hourly_price", &self.total_hourly_price)
            .field("total_upfront_price", &self.total_upfront_price)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetInstanceTypesFromInstanceRequirementsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetInstanceTypesFromInstanceRequirementsOutput")
            .field("instance_types", &self.instance_types)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetInstanceUefiDataOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetInstanceUefiDataOutput")
            .field("instance_id", &self.instance_id)
            .field("uefi_data", &self.uefi_data)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetIpamAddressHistoryOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetIpamAddressHistoryOutput")
            .field("history_records", &self.history_records)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetIpamPoolAllocationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetIpamPoolAllocationsOutput")
            .field("ipam_pool_allocations", &self.ipam_pool_allocations)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetIpamPoolCidrsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetIpamPoolCidrsOutput")
            .field("ipam_pool_cidrs", &self.ipam_pool_cidrs)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetIpamResourceCidrsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetIpamResourceCidrsOutput")
            .field("next_token", &self.next_token)
            .field("ipam_resource_cidrs", &self.ipam_resource_cidrs)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetLaunchTemplateDataOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetLaunchTemplateDataOutput")
            .field("launch_template_data", &self.launch_template_data)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetManagedPrefixListAssociationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetManagedPrefixListAssociationsOutput")
            .field("prefix_list_associations", &self.prefix_list_associations)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetManagedPrefixListEntriesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetManagedPrefixListEntriesOutput")
            .field("entries", &self.entries)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetNetworkInsightsAccessScopeAnalysisFindingsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetNetworkInsightsAccessScopeAnalysisFindingsOutput")
            .field(
                "network_insights_access_scope_analysis_id",
                &self.network_insights_access_scope_analysis_id,
            )
            .field("analysis_status", &self.analysis_status)
            .field("analysis_findings", &self.analysis_findings)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetNetworkInsightsAccessScopeContentOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetNetworkInsightsAccessScopeContentOutput")
            .field(
                "network_insights_access_scope_content",
                &self.network_insights_access_scope_content,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetPasswordDataOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetPasswordDataOutput")
            .field("instance_id", &self.instance_id)
            .field("password_data", &self.password_data)
            .field("timestamp", &self.timestamp)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetReservedInstancesExchangeQuoteOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetReservedInstancesExchangeQuoteOutput")
            .field("currency_code", &self.currency_code)
            .field("is_valid_exchange", &self.is_valid_exchange)
            .field(
                "output_reserved_instances_will_expire_at",
                &self.output_reserved_instances_will_expire_at,
            )
            .field("payment_due", &self.payment_due)
            .field(
                "reserved_instance_value_rollup",
                &self.reserved_instance_value_rollup,
            )
            .field(
                "reserved_instance_value_set",
                &self.reserved_instance_value_set,
            )
            .field(
                "target_configuration_value_rollup",
                &self.target_configuration_value_rollup,
            )
            .field(
                "target_configuration_value_set",
                &self.target_configuration_value_set,
            )
            .field("validation_failure_reason", &self.validation_failure_reason)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetSerialConsoleAccessStatusOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetSerialConsoleAccessStatusOutput")
            .field(
                "serial_console_access_enabled",
                &self.serial_console_access_enabled,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetSpotPlacementScoresOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetSpotPlacementScoresOutput")
            .field("spot_placement_scores", &self.spot_placement_scores)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetSubnetCidrReservationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetSubnetCidrReservationsOutput")
            .field(
                "subnet_ipv4_cidr_reservations",
                &self.subnet_ipv4_cidr_reservations,
            )
            .field(
                "subnet_ipv6_cidr_reservations",
                &self.subnet_ipv6_cidr_reservations,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetTransitGatewayAttachmentPropagationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetTransitGatewayAttachmentPropagationsOutput")
            .field(
                "transit_gateway_attachment_propagations",
                &self.transit_gateway_attachment_propagations,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetTransitGatewayMulticastDomainAssociationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetTransitGatewayMulticastDomainAssociationsOutput")
            .field(
                "multicast_domain_associations",
                &self.multicast_domain_associations,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetTransitGatewayPrefixListReferencesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetTransitGatewayPrefixListReferencesOutput")
            .field(
                "transit_gateway_prefix_list_references",
                &self.transit_gateway_prefix_list_references,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetTransitGatewayRouteTableAssociationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetTransitGatewayRouteTableAssociationsOutput")
            .field("associations", &self.associations)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetTransitGatewayRouteTablePropagationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetTransitGatewayRouteTablePropagationsOutput")
            .field(
                "transit_gateway_route_table_propagations",
                &self.transit_gateway_route_table_propagations,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetVpnConnectionDeviceSampleConfigurationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetVpnConnectionDeviceSampleConfigurationOutput")
            .field(
                "vpn_connection_device_sample_configuration",
                &self.vpn_connection_device_sample_configuration,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::GetVpnConnectionDeviceTypesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("GetVpnConnectionDeviceTypesOutput")
            .field(
                "vpn_connection_device_types",
                &self.vpn_connection_device_types,
            )
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ImportClientVpnClientCertificateRevocationListOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportClientVpnClientCertificateRevocationListOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ImportImageOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportImageOutput")
            .field("architecture", &self.architecture)
            .field("description", &self.description)
            .field("encrypted", &self.encrypted)
            .field("hypervisor", &self.hypervisor)
            .field("image_id", &self.image_id)
            .field("import_task_id", &self.import_task_id)
            .field("kms_key_id", &self.kms_key_id)
            .field("license_type", &self.license_type)
            .field("platform", &self.platform)
            .field("progress", &self.progress)
            .field("snapshot_details", &self.snapshot_details)
            .field("status", &self.status)
            .field("status_message", &self.status_message)
            .field("license_specifications", &self.license_specifications)
            .field("tags", &self.tags)
            .field("usage_operation", &self.usage_operation)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ImportInstanceOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportInstanceOutput")
            .field("conversion_task", &self.conversion_task)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ImportKeyPairOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportKeyPairOutput")
            .field("key_fingerprint", &self.key_fingerprint)
            .field("key_name", &self.key_name)
            .field("key_pair_id", &self.key_pair_id)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ImportSnapshotOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportSnapshotOutput")
            .field("description", &self.description)
            .field("import_task_id", &self.import_task_id)
            .field("snapshot_task_detail", &self.snapshot_task_detail)
            .field("tags", &self.tags)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ImportVolumeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ImportVolumeOutput")
            .field("conversion_task", &self.conversion_task)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ListImagesInRecycleBinOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ListImagesInRecycleBinOutput")
            .field("images", &self.images)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ListSnapshotsInRecycleBinOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ListSnapshotsInRecycleBinOutput")
            .field("snapshots", &self.snapshots)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyAddressAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyAddressAttributeOutput")
            .field("address", &self.address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyAvailabilityZoneGroupOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyAvailabilityZoneGroupOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyCapacityReservationFleetOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyCapacityReservationFleetOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyCapacityReservationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyCapacityReservationOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyClientVpnEndpointOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyClientVpnEndpointOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyDefaultCreditSpecificationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyDefaultCreditSpecificationOutput")
            .field(
                "instance_family_credit_specification",
                &self.instance_family_credit_specification,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyEbsDefaultKmsKeyIdOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyEbsDefaultKmsKeyIdOutput")
            .field("kms_key_id", &self.kms_key_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyFleetOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyFleetOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyFpgaImageAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyFpgaImageAttributeOutput")
            .field("fpga_image_attribute", &self.fpga_image_attribute)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyHostsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyHostsOutput")
            .field("successful", &self.successful)
            .field("unsuccessful", &self.unsuccessful)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyIdFormatOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyIdFormatOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyIdentityIdFormatOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyIdentityIdFormatOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyImageAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyImageAttributeOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyInstanceAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyInstanceAttributeOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyInstanceCapacityReservationAttributesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyInstanceCapacityReservationAttributesOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyInstanceCreditSpecificationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyInstanceCreditSpecificationOutput")
            .field(
                "successful_instance_credit_specifications",
                &self.successful_instance_credit_specifications,
            )
            .field(
                "unsuccessful_instance_credit_specifications",
                &self.unsuccessful_instance_credit_specifications,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyInstanceEventStartTimeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyInstanceEventStartTimeOutput")
            .field("event", &self.event)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyInstanceEventWindowOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyInstanceEventWindowOutput")
            .field("instance_event_window", &self.instance_event_window)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyInstanceMaintenanceOptionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyInstanceMaintenanceOptionsOutput")
            .field("instance_id", &self.instance_id)
            .field("auto_recovery", &self.auto_recovery)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyInstanceMetadataOptionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyInstanceMetadataOptionsOutput")
            .field("instance_id", &self.instance_id)
            .field("instance_metadata_options", &self.instance_metadata_options)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyInstancePlacementOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyInstancePlacementOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyIpamOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyIpamOutput")
            .field("ipam", &self.ipam)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyIpamPoolOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyIpamPoolOutput")
            .field("ipam_pool", &self.ipam_pool)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyIpamResourceCidrOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyIpamResourceCidrOutput")
            .field("ipam_resource_cidr", &self.ipam_resource_cidr)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyIpamScopeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyIpamScopeOutput")
            .field("ipam_scope", &self.ipam_scope)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyLaunchTemplateOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyLaunchTemplateOutput")
            .field("launch_template", &self.launch_template)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyManagedPrefixListOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyManagedPrefixListOutput")
            .field("prefix_list", &self.prefix_list)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyNetworkInterfaceAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyNetworkInterfaceAttributeOutput")
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyPrivateDnsNameOptionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyPrivateDnsNameOptionsOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyReservedInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyReservedInstancesOutput")
            .field(
                "reserved_instances_modification_id",
                &self.reserved_instances_modification_id,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifySecurityGroupRulesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifySecurityGroupRulesOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifySnapshotAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifySnapshotAttributeOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifySnapshotTierOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifySnapshotTierOutput")
            .field("snapshot_id", &self.snapshot_id)
            .field("tiering_start_time", &self.tiering_start_time)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifySpotFleetRequestOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifySpotFleetRequestOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifySubnetAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifySubnetAttributeOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyTrafficMirrorFilterNetworkServicesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyTrafficMirrorFilterNetworkServicesOutput")
            .field("traffic_mirror_filter", &self.traffic_mirror_filter)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyTrafficMirrorFilterRuleOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyTrafficMirrorFilterRuleOutput")
            .field(
                "traffic_mirror_filter_rule",
                &self.traffic_mirror_filter_rule,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyTrafficMirrorSessionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyTrafficMirrorSessionOutput")
            .field("traffic_mirror_session", &self.traffic_mirror_session)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyTransitGatewayOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyTransitGatewayOutput")
            .field("transit_gateway", &self.transit_gateway)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyTransitGatewayPrefixListReferenceOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyTransitGatewayPrefixListReferenceOutput")
            .field(
                "transit_gateway_prefix_list_reference",
                &self.transit_gateway_prefix_list_reference,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyTransitGatewayVpcAttachmentOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyTransitGatewayVpcAttachmentOutput")
            .field(
                "transit_gateway_vpc_attachment",
                &self.transit_gateway_vpc_attachment,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyVolumeAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVolumeAttributeOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyVolumeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVolumeOutput")
            .field("volume_modification", &self.volume_modification)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyVpcAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpcAttributeOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyVpcEndpointConnectionNotificationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpcEndpointConnectionNotificationOutput")
            .field("return_value", &self.return_value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyVpcEndpointOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpcEndpointOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyVpcEndpointServiceConfigurationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpcEndpointServiceConfigurationOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyVpcEndpointServicePayerResponsibilityOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpcEndpointServicePayerResponsibilityOutput")
            .field("return_value", &self.return_value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyVpcEndpointServicePermissionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpcEndpointServicePermissionsOutput")
            .field("return_value", &self.return_value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyVpcPeeringConnectionOptionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpcPeeringConnectionOptionsOutput")
            .field(
                "accepter_peering_connection_options",
                &self.accepter_peering_connection_options,
            )
            .field(
                "requester_peering_connection_options",
                &self.requester_peering_connection_options,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyVpcTenancyOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpcTenancyOutput")
            .field("return_value", &self.return_value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyVpnConnectionOptionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpnConnectionOptionsOutput")
            .field("vpn_connection", &self.vpn_connection)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyVpnConnectionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpnConnectionOutput")
            .field("vpn_connection", &self.vpn_connection)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyVpnTunnelCertificateOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpnTunnelCertificateOutput")
            .field("vpn_connection", &self.vpn_connection)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ModifyVpnTunnelOptionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ModifyVpnTunnelOptionsOutput")
            .field("vpn_connection", &self.vpn_connection)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::MonitorInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("MonitorInstancesOutput")
            .field("instance_monitorings", &self.instance_monitorings)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::MoveAddressToVpcOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("MoveAddressToVpcOutput")
            .field("allocation_id", &self.allocation_id)
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::MoveByoipCidrToIpamOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("MoveByoipCidrToIpamOutput")
            .field("byoip_cidr", &self.byoip_cidr)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ProvisionByoipCidrOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ProvisionByoipCidrOutput")
            .field("byoip_cidr", &self.byoip_cidr)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ProvisionIpamPoolCidrOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ProvisionIpamPoolCidrOutput")
            .field("ipam_pool_cidr", &self.ipam_pool_cidr)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ProvisionPublicIpv4PoolCidrOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ProvisionPublicIpv4PoolCidrOutput")
            .field("pool_id", &self.pool_id)
            .field("pool_address_range", &self.pool_address_range)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::PurchaseHostReservationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PurchaseHostReservationOutput")
            .field("client_token", &self.client_token)
            .field("currency_code", &self.currency_code)
            .field("purchase", &self.purchase)
            .field("total_hourly_price", &self.total_hourly_price)
            .field("total_upfront_price", &self.total_upfront_price)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::PurchaseReservedInstancesOfferingOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PurchaseReservedInstancesOfferingOutput")
            .field("reserved_instances_id", &self.reserved_instances_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::PurchaseScheduledInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("PurchaseScheduledInstancesOutput")
            .field("scheduled_instance_set", &self.scheduled_instance_set)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RebootInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RebootInstancesOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RegisterImageOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RegisterImageOutput")
            .field("image_id", &self.image_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RegisterInstanceEventNotificationAttributesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RegisterInstanceEventNotificationAttributesOutput")
            .field("instance_tag_attribute", &self.instance_tag_attribute)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RegisterTransitGatewayMulticastGroupMembersOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RegisterTransitGatewayMulticastGroupMembersOutput")
            .field(
                "registered_multicast_group_members",
                &self.registered_multicast_group_members,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RegisterTransitGatewayMulticastGroupSourcesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RegisterTransitGatewayMulticastGroupSourcesOutput")
            .field(
                "registered_multicast_group_sources",
                &self.registered_multicast_group_sources,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RejectTransitGatewayMulticastDomainAssociationsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RejectTransitGatewayMulticastDomainAssociationsOutput")
            .field("associations", &self.associations)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RejectTransitGatewayPeeringAttachmentOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RejectTransitGatewayPeeringAttachmentOutput")
            .field(
                "transit_gateway_peering_attachment",
                &self.transit_gateway_peering_attachment,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RejectTransitGatewayVpcAttachmentOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RejectTransitGatewayVpcAttachmentOutput")
            .field(
                "transit_gateway_vpc_attachment",
                &self.transit_gateway_vpc_attachment,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RejectVpcEndpointConnectionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RejectVpcEndpointConnectionsOutput")
            .field("unsuccessful", &self.unsuccessful)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RejectVpcPeeringConnectionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RejectVpcPeeringConnectionOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ReleaseAddressOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReleaseAddressOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ReleaseHostsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReleaseHostsOutput")
            .field("successful", &self.successful)
            .field("unsuccessful", &self.unsuccessful)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ReleaseIpamPoolAllocationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReleaseIpamPoolAllocationOutput")
            .field("success", &self.success)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ReplaceIamInstanceProfileAssociationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReplaceIamInstanceProfileAssociationOutput")
            .field(
                "iam_instance_profile_association",
                &self.iam_instance_profile_association,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ReplaceNetworkAclAssociationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReplaceNetworkAclAssociationOutput")
            .field("new_association_id", &self.new_association_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ReplaceNetworkAclEntryOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReplaceNetworkAclEntryOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ReplaceRouteOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReplaceRouteOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ReplaceRouteTableAssociationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReplaceRouteTableAssociationOutput")
            .field("new_association_id", &self.new_association_id)
            .field("association_state", &self.association_state)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ReplaceTransitGatewayRouteOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReplaceTransitGatewayRouteOutput")
            .field("route", &self.route)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ReportInstanceStatusOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ReportInstanceStatusOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RequestSpotFleetOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RequestSpotFleetOutput")
            .field("spot_fleet_request_id", &self.spot_fleet_request_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RequestSpotInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RequestSpotInstancesOutput")
            .field("spot_instance_requests", &self.spot_instance_requests)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ResetAddressAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResetAddressAttributeOutput")
            .field("address", &self.address)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ResetEbsDefaultKmsKeyIdOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResetEbsDefaultKmsKeyIdOutput")
            .field("kms_key_id", &self.kms_key_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ResetFpgaImageAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResetFpgaImageAttributeOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ResetImageAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResetImageAttributeOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ResetInstanceAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResetInstanceAttributeOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ResetNetworkInterfaceAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResetNetworkInterfaceAttributeOutput")
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::ResetSnapshotAttributeOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("ResetSnapshotAttributeOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RestoreAddressToClassicOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RestoreAddressToClassicOutput")
            .field("public_ip", &self.public_ip)
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RestoreImageFromRecycleBinOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RestoreImageFromRecycleBinOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RestoreManagedPrefixListVersionOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RestoreManagedPrefixListVersionOutput")
            .field("prefix_list", &self.prefix_list)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RestoreSnapshotFromRecycleBinOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RestoreSnapshotFromRecycleBinOutput")
            .field("snapshot_id", &self.snapshot_id)
            .field("outpost_arn", &self.outpost_arn)
            .field("description", &self.description)
            .field("encrypted", &self.encrypted)
            .field("owner_id", &self.owner_id)
            .field("progress", &self.progress)
            .field("start_time", &self.start_time)
            .field("state", &self.state)
            .field("volume_id", &self.volume_id)
            .field("volume_size", &self.volume_size)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RestoreSnapshotTierOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RestoreSnapshotTierOutput")
            .field("snapshot_id", &self.snapshot_id)
            .field("restore_start_time", &self.restore_start_time)
            .field("restore_duration", &self.restore_duration)
            .field("is_permanent_restore", &self.is_permanent_restore)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RevokeClientVpnIngressOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RevokeClientVpnIngressOutput")
            .field("status", &self.status)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RevokeSecurityGroupEgressOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RevokeSecurityGroupEgressOutput")
            .field("r#return", &self.r#return)
            .field("unknown_ip_permissions", &self.unknown_ip_permissions)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RevokeSecurityGroupIngressOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RevokeSecurityGroupIngressOutput")
            .field("r#return", &self.r#return)
            .field("unknown_ip_permissions", &self.unknown_ip_permissions)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RunInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RunInstancesOutput")
            .field("groups", &self.groups)
            .field("instances", &self.instances)
            .field("owner_id", &self.owner_id)
            .field("requester_id", &self.requester_id)
            .field("reservation_id", &self.reservation_id)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::RunScheduledInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("RunScheduledInstancesOutput")
            .field("instance_id_set", &self.instance_id_set)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::SearchLocalGatewayRoutesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SearchLocalGatewayRoutesOutput")
            .field("routes", &self.routes)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::SearchTransitGatewayMulticastGroupsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SearchTransitGatewayMulticastGroupsOutput")
            .field("multicast_groups", &self.multicast_groups)
            .field("next_token", &self.next_token)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::SearchTransitGatewayRoutesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SearchTransitGatewayRoutesOutput")
            .field("routes", &self.routes)
            .field(
                "additional_routes_available",
                &self.additional_routes_available,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::SendDiagnosticInterruptOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("SendDiagnosticInterruptOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::StartInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("StartInstancesOutput")
            .field("starting_instances", &self.starting_instances)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::StartNetworkInsightsAccessScopeAnalysisOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("StartNetworkInsightsAccessScopeAnalysisOutput")
            .field(
                "network_insights_access_scope_analysis",
                &self.network_insights_access_scope_analysis,
            )
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::StartNetworkInsightsAnalysisOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("StartNetworkInsightsAnalysisOutput")
            .field("network_insights_analysis", &self.network_insights_analysis)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::StartVpcEndpointServicePrivateDnsVerificationOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("StartVpcEndpointServicePrivateDnsVerificationOutput")
            .field("return_value", &self.return_value)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::StopInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("StopInstancesOutput")
            .field("stopping_instances", &self.stopping_instances)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::TerminateClientVpnConnectionsOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TerminateClientVpnConnectionsOutput")
            .field("client_vpn_endpoint_id", &self.client_vpn_endpoint_id)
            .field("username", &self.username)
            .field("connection_statuses", &self.connection_statuses)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::TerminateInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("TerminateInstancesOutput")
            .field("terminating_instances", &self.terminating_instances)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::UnassignIpv6AddressesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UnassignIpv6AddressesOutput")
            .field("network_interface_id", &self.network_interface_id)
            .field("unassigned_ipv6_addresses", &self.unassigned_ipv6_addresses)
            .field("unassigned_ipv6_prefixes", &self.unassigned_ipv6_prefixes)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::UnassignPrivateIpAddressesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UnassignPrivateIpAddressesOutput").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::UnmonitorInstancesOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UnmonitorInstancesOutput")
            .field("instance_monitorings", &self.instance_monitorings)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::UpdateSecurityGroupRuleDescriptionsEgressOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UpdateSecurityGroupRuleDescriptionsEgressOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::UpdateSecurityGroupRuleDescriptionsIngressOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("UpdateSecurityGroupRuleDescriptionsIngressOutput")
            .field("r#return", &self.r#return)
            .finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::WithdrawByoipCidrOutput {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("WithdrawByoipCidrOutput")
            .field("byoip_cidr", &self.byoip_cidr)
            .finish()
    }
}
// Skipping aws_sdk_ec2::output::accept_reserved_instances_exchange_quote_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::accept_transit_gateway_multicast_domain_associations_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::accept_transit_gateway_peering_attachment_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::accept_transit_gateway_vpc_attachment_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::accept_vpc_endpoint_connections_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::accept_vpc_peering_connection_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::advertise_byoip_cidr_output::Builder due to
// hidden fields Skipping aws_sdk_ec2::output::allocate_address_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::allocate_hosts_output::Builder due to hidden
// fields Skipping aws_sdk_ec2::output::allocate_ipam_pool_cidr_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::apply_security_groups_to_client_vpn_target_network_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::assign_ipv6_addresses_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::assign_private_ip_addresses_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::associate_address_output::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::output::associate_client_vpn_target_network_output::Builder due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::associate_dhcp_options_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::associate_enclave_certificate_iam_role_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::associate_iam_instance_profile_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::associate_instance_event_window_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::associate_route_table_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::associate_subnet_cidr_block_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::associate_transit_gateway_multicast_domain_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::associate_transit_gateway_route_table_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::associate_trunk_interface_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::associate_vpc_cidr_block_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::attach_classic_link_vpc_output::Builder due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::output::attach_internet_gateway_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::attach_network_interface_output::Builder due to
// hidden fields Skipping aws_sdk_ec2::output::attach_volume_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::attach_vpn_gateway_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::authorize_client_vpn_ingress_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::authorize_security_group_egress_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::authorize_security_group_ingress_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::bundle_instance_output::Builder due to hidden
// fields Skipping aws_sdk_ec2::output::cancel_bundle_task_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::cancel_capacity_reservation_fleets_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::cancel_capacity_reservation_output::Builder due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::output::cancel_conversion_task_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::cancel_export_task_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::cancel_import_task_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::cancel_reserved_instances_listing_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::cancel_spot_fleet_requests_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::cancel_spot_instance_requests_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::confirm_product_instance_output::Builder due to
// hidden fields Skipping aws_sdk_ec2::output::copy_fpga_image_output::Builder
// due to hidden fields Skipping aws_sdk_ec2::output::copy_image_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::copy_snapshot_output::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::output::create_capacity_reservation_fleet_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_capacity_reservation_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::create_carrier_gateway_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::create_client_vpn_endpoint_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::create_client_vpn_route_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::create_customer_gateway_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::create_default_subnet_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::create_default_vpc_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::create_dhcp_options_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::create_egress_only_internet_gateway_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_fleet_output::Builder due to hidden
// fields Skipping aws_sdk_ec2::output::create_flow_logs_output::Builder due to
// hidden fields Skipping aws_sdk_ec2::output::create_fpga_image_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::create_image_output::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::output::create_instance_event_window_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::create_instance_export_task_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::create_internet_gateway_output::Builder due to
// hidden fields Skipping aws_sdk_ec2::output::create_ipam_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::create_ipam_pool_output::Builder due to hidden
// fields Skipping aws_sdk_ec2::output::create_ipam_scope_output::Builder due to
// hidden fields Skipping aws_sdk_ec2::output::create_key_pair_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::create_launch_template_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::create_launch_template_version_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::create_local_gateway_route_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::create_local_gateway_route_table_vpc_association_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_managed_prefix_list_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::create_nat_gateway_output::Builder due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::output::create_network_acl_entry_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::create_network_acl_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::create_network_insights_access_scope_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_network_insights_path_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::create_network_interface_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::create_network_interface_permission_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_placement_group_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::create_public_ipv4_pool_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::create_replace_root_volume_task_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::create_reserved_instances_listing_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_restore_image_task_output::Builder due
// to hidden fields Skipping aws_sdk_ec2::output::create_route_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::create_route_table_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::create_security_group_output::Builder due to
// hidden fields Skipping aws_sdk_ec2::output::create_snapshot_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::create_snapshots_output::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::output::create_spot_datafeed_subscription_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_store_image_task_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::create_subnet_cidr_reservation_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::create_subnet_output::Builder due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::output::create_tags_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::create_traffic_mirror_filter_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::create_traffic_mirror_filter_rule_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_traffic_mirror_session_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::create_traffic_mirror_target_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::create_transit_gateway_connect_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::create_transit_gateway_connect_peer_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_transit_gateway_multicast_domain_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_transit_gateway_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::create_transit_gateway_peering_attachment_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_transit_gateway_prefix_list_reference_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_transit_gateway_route_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::create_transit_gateway_route_table_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_transit_gateway_vpc_attachment_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_volume_output::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::output::create_vpc_endpoint_connection_notification_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_vpc_endpoint_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::create_vpc_endpoint_service_configuration_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_vpc_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::create_vpc_peering_connection_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::create_vpn_connection_output::Builder due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::output::create_vpn_connection_route_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::create_vpn_gateway_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::delete_carrier_gateway_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::delete_client_vpn_endpoint_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::delete_client_vpn_route_output::Builder due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::output::delete_customer_gateway_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::delete_dhcp_options_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::delete_egress_only_internet_gateway_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::delete_fleets_output::Builder due to hidden
// fields Skipping aws_sdk_ec2::output::delete_flow_logs_output::Builder due to
// hidden fields Skipping aws_sdk_ec2::output::delete_fpga_image_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::delete_instance_event_window_output::Builder
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::delete_internet_gateway_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::delete_ipam_output::Builder due to hidden
// fields Skipping aws_sdk_ec2::output::delete_ipam_pool_output::Builder due to
// hidden fields Skipping aws_sdk_ec2::output::delete_ipam_scope_output::Builder
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::delete_key_pair_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::delete_launch_template_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::delete_launch_template_versions_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::delete_local_gateway_route_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::delete_local_gateway_route_table_vpc_association_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::delete_managed_prefix_list_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::delete_nat_gateway_output::Builder due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::output::delete_network_acl_entry_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::delete_network_acl_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::delete_network_insights_access_scope_analysis_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::delete_network_insights_access_scope_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::delete_network_insights_analysis_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::delete_network_insights_path_output::Builder
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::delete_network_interface_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::delete_network_interface_permission_output::Builder due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::delete_placement_group_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::delete_public_ipv4_pool_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::delete_queued_reserved_instances_output::Builder due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::delete_route_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::delete_route_table_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::delete_security_group_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::delete_snapshot_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::delete_spot_datafeed_subscription_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::delete_subnet_cidr_reservation_output::Builder
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::delete_subnet_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::delete_tags_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::delete_traffic_mirror_filter_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::delete_traffic_mirror_filter_rule_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::delete_traffic_mirror_session_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::delete_traffic_mirror_target_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::delete_transit_gateway_connect_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::delete_transit_gateway_connect_peer_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::delete_transit_gateway_multicast_domain_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::delete_transit_gateway_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::delete_transit_gateway_peering_attachment_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::delete_transit_gateway_prefix_list_reference_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::delete_transit_gateway_route_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::delete_transit_gateway_route_table_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::delete_transit_gateway_vpc_attachment_output::Builder due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::delete_volume_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::delete_vpc_endpoint_connection_notifications_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::delete_vpc_endpoint_service_configurations_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::delete_vpc_endpoints_output::Builder due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::output::delete_vpc_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::delete_vpc_peering_connection_output::Builder
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::delete_vpn_connection_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::delete_vpn_connection_route_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::delete_vpn_gateway_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::deprovision_byoip_cidr_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::deprovision_ipam_pool_cidr_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::deprovision_public_ipv4_pool_cidr_output::Builder due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::deregister_image_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::deregister_instance_event_notification_attributes_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::deregister_transit_gateway_multicast_group_members_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::deregister_transit_gateway_multicast_group_sources_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_account_attributes_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_addresses_attribute_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_addresses_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_aggregate_id_format_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_availability_zones_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_bundle_tasks_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_byoip_cidrs_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_capacity_reservation_fleets_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_capacity_reservations_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_carrier_gateways_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_classic_link_instances_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_client_vpn_authorization_rules_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_client_vpn_connections_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_client_vpn_endpoints_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_client_vpn_routes_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_client_vpn_target_networks_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_coip_pools_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_conversion_tasks_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_customer_gateways_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_dhcp_options_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_egress_only_internet_gateways_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_elastic_gpus_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_export_image_tasks_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_export_tasks_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_fast_launch_images_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_fast_snapshot_restores_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_fleet_history_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_fleet_instances_output::Builder due to
// hidden fields Skipping aws_sdk_ec2::output::describe_fleets_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_flow_logs_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_fpga_image_attribute_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_fpga_images_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_host_reservation_offerings_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_host_reservations_output::Builder due
// to hidden fields Skipping aws_sdk_ec2::output::describe_hosts_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_iam_instance_profile_associations_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_id_format_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_identity_id_format_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_image_attribute_output::Builder due to
// hidden fields Skipping aws_sdk_ec2::output::describe_images_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_import_image_tasks_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_import_snapshot_tasks_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_instance_attribute_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_instance_credit_specifications_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_instance_event_notification_attributes_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_instance_event_windows_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_instance_status_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_instance_type_offerings_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_instance_types_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_instances_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_internet_gateways_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_ipam_pools_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_ipam_scopes_output::Builder due to
// hidden fields Skipping aws_sdk_ec2::output::describe_ipams_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_ipv6_pools_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_key_pairs_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_launch_template_versions_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_launch_templates_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_local_gateway_route_table_virtual_interface_group_associations_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_local_gateway_route_table_vpc_associations_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_local_gateway_route_tables_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_local_gateway_virtual_interface_groups_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_local_gateway_virtual_interfaces_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_local_gateways_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_managed_prefix_lists_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_moving_addresses_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_nat_gateways_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_network_acls_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_network_insights_access_scope_analyses_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_network_insights_access_scopes_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_network_insights_analyses_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_network_insights_paths_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_network_interface_attribute_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_network_interface_permissions_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_network_interfaces_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_placement_groups_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_prefix_lists_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_principal_id_format_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_public_ipv4_pools_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_regions_output::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::output::describe_replace_root_volume_tasks_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_reserved_instances_listings_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_reserved_instances_modifications_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_reserved_instances_offerings_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_reserved_instances_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_route_tables_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_scheduled_instance_availability_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_scheduled_instances_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_security_group_references_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_security_group_rules_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_security_groups_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_snapshot_attribute_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_snapshot_tier_status_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_snapshots_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_spot_datafeed_subscription_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_spot_fleet_instances_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_spot_fleet_request_history_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_spot_fleet_requests_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_spot_instance_requests_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_spot_price_history_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_stale_security_groups_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_store_image_tasks_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_subnets_output::Builder due to hidden
// fields Skipping aws_sdk_ec2::output::describe_tags_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_traffic_mirror_filters_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_traffic_mirror_sessions_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_traffic_mirror_targets_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_transit_gateway_attachments_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_transit_gateway_connect_peers_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_transit_gateway_connects_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_transit_gateway_multicast_domains_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_transit_gateway_peering_attachments_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_transit_gateway_route_tables_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_transit_gateway_vpc_attachments_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_transit_gateways_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_trunk_interface_associations_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_volume_attribute_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_volume_status_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_volumes_modifications_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_volumes_output::Builder due to hidden
// fields Skipping aws_sdk_ec2::output::describe_vpc_attribute_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_vpc_classic_link_dns_support_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_vpc_classic_link_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::describe_vpc_endpoint_connection_notifications_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_vpc_endpoint_connections_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_vpc_endpoint_service_configurations_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_vpc_endpoint_service_permissions_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_vpc_endpoint_services_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_vpc_endpoints_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::describe_vpc_peering_connections_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::describe_vpcs_output::Builder due to hidden
// fields Skipping aws_sdk_ec2::output::describe_vpn_connections_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::describe_vpn_gateways_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::detach_classic_link_vpc_output::Builder due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::output::detach_internet_gateway_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::detach_network_interface_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::detach_volume_output::Builder due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::output::detach_vpn_gateway_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::disable_ebs_encryption_by_default_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::disable_fast_launch_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::disable_fast_snapshot_restores_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::disable_image_deprecation_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::disable_ipam_organization_admin_account_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::disable_serial_console_access_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::disable_transit_gateway_route_table_propagation_output::Builder due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::disable_vgw_route_propagation_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::disable_vpc_classic_link_dns_support_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::disable_vpc_classic_link_output::Builder due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::output::disassociate_address_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::disassociate_client_vpn_target_network_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::disassociate_enclave_certificate_iam_role_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::disassociate_iam_instance_profile_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::disassociate_instance_event_window_output::Builder due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::disassociate_route_table_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::disassociate_subnet_cidr_block_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::disassociate_transit_gateway_multicast_domain_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::disassociate_transit_gateway_route_table_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::disassociate_trunk_interface_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::disassociate_vpc_cidr_block_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::enable_ebs_encryption_by_default_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::enable_fast_launch_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::enable_fast_snapshot_restores_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::enable_image_deprecation_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::enable_ipam_organization_admin_account_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::enable_serial_console_access_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::enable_transit_gateway_route_table_propagation_output::Builder due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::enable_vgw_route_propagation_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::enable_volume_io_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::enable_vpc_classic_link_dns_support_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::enable_vpc_classic_link_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::export_client_vpn_client_certificate_revocation_list_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::export_client_vpn_client_configuration_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::export_image_output::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::output::export_transit_gateway_routes_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::get_associated_enclave_certificate_iam_roles_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_associated_ipv6_pool_cidrs_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::get_capacity_reservation_usage_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::get_coip_pool_usage_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::get_console_output_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::get_console_screenshot_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::get_default_credit_specification_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_ebs_default_kms_key_id_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::get_ebs_encryption_by_default_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::get_flow_logs_integration_template_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_groups_for_capacity_reservation_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_host_reservation_purchase_preview_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_instance_types_from_instance_requirements_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_instance_uefi_data_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::get_ipam_address_history_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::get_ipam_pool_allocations_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::get_ipam_pool_cidrs_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::get_ipam_resource_cidrs_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::get_launch_template_data_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::get_managed_prefix_list_associations_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_managed_prefix_list_entries_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::get_network_insights_access_scope_analysis_findings_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_network_insights_access_scope_content_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_password_data_output::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::output::get_reserved_instances_exchange_quote_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_serial_console_access_status_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_spot_placement_scores_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::get_subnet_cidr_reservations_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::get_transit_gateway_attachment_propagations_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_transit_gateway_multicast_domain_associations_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_transit_gateway_prefix_list_references_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_transit_gateway_route_table_associations_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_transit_gateway_route_table_propagations_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_vpn_connection_device_sample_configuration_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::get_vpn_connection_device_types_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::import_client_vpn_client_certificate_revocation_list_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::import_image_output::Builder due to hidden
// fields Skipping aws_sdk_ec2::output::import_instance_output::Builder due to
// hidden fields Skipping aws_sdk_ec2::output::import_key_pair_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::import_snapshot_output::Builder due to hidden
// fields Skipping aws_sdk_ec2::output::import_volume_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::list_images_in_recycle_bin_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::list_snapshots_in_recycle_bin_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::modify_address_attribute_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::modify_availability_zone_group_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::modify_capacity_reservation_fleet_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::modify_capacity_reservation_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::modify_client_vpn_endpoint_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::modify_default_credit_specification_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::modify_ebs_default_kms_key_id_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::modify_fleet_output::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::output::modify_fpga_image_attribute_output::Builder due
// to hidden fields Skipping aws_sdk_ec2::output::modify_hosts_output::Builder
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::modify_id_format_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::modify_identity_id_format_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::modify_image_attribute_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::modify_instance_attribute_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::modify_instance_capacity_reservation_attributes_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::modify_instance_credit_specification_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::modify_instance_event_start_time_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::modify_instance_event_window_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::modify_instance_maintenance_options_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::modify_instance_metadata_options_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::modify_instance_placement_output::Builder due
// to hidden fields Skipping aws_sdk_ec2::output::modify_ipam_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::modify_ipam_pool_output::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::output::modify_ipam_resource_cidr_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::modify_ipam_scope_output::Builder due to hidden
// fields Skipping aws_sdk_ec2::output::modify_launch_template_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::modify_managed_prefix_list_output::Builder due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::output::modify_network_interface_attribute_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::modify_private_dns_name_options_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::modify_reserved_instances_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::modify_security_group_rules_output::Builder due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::output::modify_snapshot_attribute_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::modify_snapshot_tier_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::modify_spot_fleet_request_output::Builder due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::output::modify_subnet_attribute_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::modify_traffic_mirror_filter_network_services_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::modify_traffic_mirror_filter_rule_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::modify_traffic_mirror_session_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::modify_transit_gateway_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::modify_transit_gateway_prefix_list_reference_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::modify_transit_gateway_vpc_attachment_output::Builder due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::modify_volume_attribute_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::modify_volume_output::Builder due to hidden
// fields
impl crate::Debug for aws_sdk_ec2::output::modify_vpc_attribute_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::modify_vpc_endpoint_connection_notification_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::modify_vpc_endpoint_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::modify_vpc_endpoint_service_configuration_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::modify_vpc_endpoint_service_payer_responsibility_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::modify_vpc_endpoint_service_permissions_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::modify_vpc_peering_connection_options_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::modify_vpc_tenancy_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::modify_vpn_connection_options_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::modify_vpn_connection_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::modify_vpn_tunnel_certificate_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::modify_vpn_tunnel_options_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::monitor_instances_output::Builder due to hidden
// fields Skipping aws_sdk_ec2::output::move_address_to_vpc_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::move_byoip_cidr_to_ipam_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::provision_byoip_cidr_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::provision_ipam_pool_cidr_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::provision_public_ipv4_pool_cidr_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::purchase_host_reservation_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::purchase_reserved_instances_offering_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::purchase_scheduled_instances_output::Builder
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::reboot_instances_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::register_image_output::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::output::register_instance_event_notification_attributes_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::register_transit_gateway_multicast_group_members_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::register_transit_gateway_multicast_group_sources_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::reject_transit_gateway_multicast_domain_associations_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::reject_transit_gateway_peering_attachment_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::reject_transit_gateway_vpc_attachment_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::reject_vpc_endpoint_connections_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::reject_vpc_peering_connection_output::Builder
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::release_address_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::release_hosts_output::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::output::release_ipam_pool_allocation_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::replace_iam_instance_profile_association_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::replace_network_acl_association_output::Builder
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::replace_network_acl_entry_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::replace_route_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::replace_route_table_association_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::replace_transit_gateway_route_output::Builder
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::report_instance_status_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::request_spot_fleet_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::request_spot_instances_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::reset_address_attribute_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::reset_ebs_default_kms_key_id_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::reset_fpga_image_attribute_output::Builder due
// to hidden fields
impl crate::Debug for aws_sdk_ec2::output::reset_image_attribute_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::reset_instance_attribute_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::reset_network_interface_attribute_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
impl crate::Debug for aws_sdk_ec2::output::reset_snapshot_attribute_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::restore_address_to_classic_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::restore_image_from_recycle_bin_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::restore_managed_prefix_list_version_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::restore_snapshot_from_recycle_bin_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::restore_snapshot_tier_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::revoke_client_vpn_ingress_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::revoke_security_group_egress_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::revoke_security_group_ingress_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::run_instances_output::Builder due to hidden
// fields Skipping aws_sdk_ec2::output::run_scheduled_instances_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::search_local_gateway_routes_output::Builder due
// to hidden fields
// Skipping aws_sdk_ec2::output::search_transit_gateway_multicast_groups_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::search_transit_gateway_routes_output::Builder
// due to hidden fields
impl crate::Debug for aws_sdk_ec2::output::send_diagnostic_interrupt_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::start_instances_output::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::output::start_network_insights_access_scope_analysis_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::start_network_insights_analysis_output::Builder
// due to hidden fields
// Skipping aws_sdk_ec2::output::start_vpc_endpoint_service_private_dns_verification_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::stop_instances_output::Builder due to hidden
// fields
// Skipping aws_sdk_ec2::output::terminate_client_vpn_connections_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::terminate_instances_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::unassign_ipv6_addresses_output::Builder due to
// hidden fields
impl crate::Debug for aws_sdk_ec2::output::unassign_private_ip_addresses_output::Builder {
    fn fmt(&self, f: &mut crate::Formatter) {
        f.debug_struct("Builder").finish()
    }
}
// Skipping aws_sdk_ec2::output::unmonitor_instances_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::output::update_security_group_rule_descriptions_egress_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::update_security_group_rule_descriptions_ingress_output::Builder due to hidden fields
// Skipping aws_sdk_ec2::output::withdraw_byoip_cidr_output::Builder due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeAddressesAttributePaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeAddressesAttributePaginatorItems due
// to hidden fields Skipping aws_sdk_ec2::paginator::DescribeByoipCidrsPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeByoipCidrsPaginatorItems due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeCapacityReservationFleetsPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeCapacityReservationFleetsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeCapacityReservationsPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeCapacityReservationsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeCarrierGatewaysPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeCarrierGatewaysPaginatorItems due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeClassicLinkInstancesPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeClassicLinkInstancesPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeClientVpnAuthorizationRulesPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeClientVpnAuthorizationRulesPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeClientVpnConnectionsPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeClientVpnConnectionsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeClientVpnEndpointsPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeClientVpnEndpointsPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeClientVpnRoutesPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeClientVpnRoutesPaginatorItems due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeClientVpnTargetNetworksPaginator due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeClientVpnTargetNetworksPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeCoipPoolsPaginator due to hidden
// fields Skipping aws_sdk_ec2::paginator::DescribeCoipPoolsPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeDhcpOptionsPaginator due to hidden
// fields Skipping aws_sdk_ec2::paginator::DescribeDhcpOptionsPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeEgressOnlyInternetGatewaysPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeEgressOnlyInternetGatewaysPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeExportImageTasksPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeExportImageTasksPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeFastLaunchImagesPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeFastLaunchImagesPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeFastSnapshotRestoresPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeFastSnapshotRestoresPaginatorItems
// due to hidden fields Skipping aws_sdk_ec2::paginator::DescribeFleetsPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeFleetsPaginatorItems due to hidden
// fields Skipping aws_sdk_ec2::paginator::DescribeFlowLogsPaginator due to
// hidden fields Skipping aws_sdk_ec2::paginator::DescribeFlowLogsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeFpgaImagesPaginator due to hidden
// fields Skipping aws_sdk_ec2::paginator::DescribeFpgaImagesPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeHostReservationOfferingsPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeHostReservationOfferingsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeHostReservationsPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeHostReservationsPaginatorItems due
// to hidden fields Skipping aws_sdk_ec2::paginator::DescribeHostsPaginator due
// to hidden fields Skipping aws_sdk_ec2::paginator::DescribeHostsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeIamInstanceProfileAssociationsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeIamInstanceProfileAssociationsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeImportImageTasksPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeImportImageTasksPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeImportSnapshotTasksPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeImportSnapshotTasksPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeInstanceCreditSpecificationsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeInstanceCreditSpecificationsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeInstanceEventWindowsPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeInstanceEventWindowsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeInstanceStatusPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeInstanceStatusPaginatorItems due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeInstanceTypeOfferingsPaginator due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeInstanceTypeOfferingsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeInstanceTypesPaginator due to hidden
// fields Skipping aws_sdk_ec2::paginator::DescribeInstanceTypesPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeInstancesPaginator due to hidden
// fields Skipping aws_sdk_ec2::paginator::DescribeInstancesPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeInternetGatewaysPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeInternetGatewaysPaginatorItems due
// to hidden fields Skipping aws_sdk_ec2::paginator::DescribeIpamPoolsPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeIpamPoolsPaginatorItems due to
// hidden fields Skipping aws_sdk_ec2::paginator::DescribeIpamScopesPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeIpamScopesPaginatorItems due to
// hidden fields Skipping aws_sdk_ec2::paginator::DescribeIpamsPaginator due to
// hidden fields Skipping aws_sdk_ec2::paginator::DescribeIpamsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeIpv6PoolsPaginator due to hidden
// fields Skipping aws_sdk_ec2::paginator::DescribeIpv6PoolsPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeLaunchTemplateVersionsPaginator due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeLaunchTemplateVersionsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeLaunchTemplatesPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeLaunchTemplatesPaginatorItems due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeLocalGatewayRouteTableVpcAssociationsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeLocalGatewayRouteTableVpcAssociationsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeLocalGatewayRouteTablesPaginator due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeLocalGatewayRouteTablesPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeLocalGatewayVirtualInterfaceGroupsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeLocalGatewayVirtualInterfaceGroupsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeLocalGatewayVirtualInterfacesPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeLocalGatewayVirtualInterfacesPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeLocalGatewaysPaginator due to hidden
// fields Skipping aws_sdk_ec2::paginator::DescribeLocalGatewaysPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeManagedPrefixListsPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeManagedPrefixListsPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeMovingAddressesPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeMovingAddressesPaginatorItems due to
// hidden fields Skipping aws_sdk_ec2::paginator::DescribeNatGatewaysPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeNatGatewaysPaginatorItems due to
// hidden fields Skipping aws_sdk_ec2::paginator::DescribeNetworkAclsPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeNetworkAclsPaginatorItems due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeNetworkInsightsAccessScopeAnalysesPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeNetworkInsightsAccessScopeAnalysesPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeNetworkInsightsAccessScopesPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeNetworkInsightsAccessScopesPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeNetworkInsightsAnalysesPaginator due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeNetworkInsightsAnalysesPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeNetworkInsightsPathsPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeNetworkInsightsPathsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeNetworkInterfacePermissionsPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeNetworkInterfacePermissionsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeNetworkInterfacesPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeNetworkInterfacesPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribePrefixListsPaginator due to hidden
// fields Skipping aws_sdk_ec2::paginator::DescribePrefixListsPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribePrincipalIdFormatPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribePrincipalIdFormatPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribePublicIpv4PoolsPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribePublicIpv4PoolsPaginatorItems due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeReplaceRootVolumeTasksPaginator due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeReplaceRootVolumeTasksPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeReservedInstancesModificationsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeReservedInstancesModificationsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeReservedInstancesOfferingsPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeReservedInstancesOfferingsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeRouteTablesPaginator due to hidden
// fields Skipping aws_sdk_ec2::paginator::DescribeRouteTablesPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeScheduledInstanceAvailabilityPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeScheduledInstanceAvailabilityPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeScheduledInstancesPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeScheduledInstancesPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeSecurityGroupRulesPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeSecurityGroupRulesPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeSecurityGroupsPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeSecurityGroupsPaginatorItems due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeSnapshotTierStatusPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeSnapshotTierStatusPaginatorItems due
// to hidden fields Skipping aws_sdk_ec2::paginator::DescribeSnapshotsPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeSnapshotsPaginatorItems due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeSpotFleetRequestsPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeSpotFleetRequestsPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeSpotInstanceRequestsPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeSpotInstanceRequestsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeSpotPriceHistoryPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeSpotPriceHistoryPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeStaleSecurityGroupsPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeStaleSecurityGroupsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeStoreImageTasksPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeStoreImageTasksPaginatorItems due to
// hidden fields Skipping aws_sdk_ec2::paginator::DescribeSubnetsPaginator due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeSubnetsPaginatorItems due to hidden
// fields Skipping aws_sdk_ec2::paginator::DescribeTagsPaginator due to hidden
// fields Skipping aws_sdk_ec2::paginator::DescribeTagsPaginatorItems due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTrafficMirrorFiltersPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTrafficMirrorFiltersPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTrafficMirrorSessionsPaginator due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTrafficMirrorSessionsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTrafficMirrorTargetsPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTrafficMirrorTargetsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTransitGatewayAttachmentsPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTransitGatewayAttachmentsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTransitGatewayConnectPeersPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTransitGatewayConnectPeersPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTransitGatewayConnectsPaginator due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTransitGatewayConnectsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTransitGatewayMulticastDomainsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTransitGatewayMulticastDomainsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTransitGatewayPeeringAttachmentsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTransitGatewayPeeringAttachmentsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTransitGatewayRouteTablesPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTransitGatewayRouteTablesPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTransitGatewayVpcAttachmentsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTransitGatewayVpcAttachmentsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTransitGatewaysPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTransitGatewaysPaginatorItems due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTrunkInterfaceAssociationsPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeTrunkInterfaceAssociationsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVolumeStatusPaginator due to hidden
// fields Skipping aws_sdk_ec2::paginator::DescribeVolumeStatusPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVolumesModificationsPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVolumesModificationsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVolumesPaginator due to hidden
// fields Skipping aws_sdk_ec2::paginator::DescribeVolumesPaginatorItems due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVpcClassicLinkDnsSupportPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVpcClassicLinkDnsSupportPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVpcEndpointConnectionNotificationsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVpcEndpointConnectionNotificationsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVpcEndpointConnectionsPaginator due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVpcEndpointConnectionsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVpcEndpointServiceConfigurationsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVpcEndpointServiceConfigurationsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVpcEndpointServicePermissionsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVpcEndpointServicePermissionsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVpcEndpointsPaginator due to hidden
// fields Skipping aws_sdk_ec2::paginator::DescribeVpcEndpointsPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVpcPeeringConnectionsPaginator due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVpcPeeringConnectionsPaginatorItems
// due to hidden fields Skipping aws_sdk_ec2::paginator::DescribeVpcsPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::DescribeVpcsPaginatorItems due to hidden
// fields Skipping aws_sdk_ec2::paginator::GetAssociatedIpv6PoolCidrsPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetAssociatedIpv6PoolCidrsPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::GetGroupsForCapacityReservationPaginator due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::GetGroupsForCapacityReservationPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetInstanceTypesFromInstanceRequirementsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetInstanceTypesFromInstanceRequirementsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetIpamAddressHistoryPaginator due to hidden
// fields Skipping aws_sdk_ec2::paginator::GetIpamAddressHistoryPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetIpamPoolAllocationsPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::GetIpamPoolAllocationsPaginatorItems due to
// hidden fields Skipping aws_sdk_ec2::paginator::GetIpamPoolCidrsPaginator due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::GetIpamPoolCidrsPaginatorItems due to hidden
// fields Skipping aws_sdk_ec2::paginator::GetIpamResourceCidrsPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::GetIpamResourceCidrsPaginatorItems due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::GetManagedPrefixListAssociationsPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetManagedPrefixListAssociationsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetManagedPrefixListEntriesPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::GetManagedPrefixListEntriesPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetSpotPlacementScoresPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::GetSpotPlacementScoresPaginatorItems due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::GetTransitGatewayAttachmentPropagationsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetTransitGatewayAttachmentPropagationsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetTransitGatewayMulticastDomainAssociationsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetTransitGatewayMulticastDomainAssociationsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetTransitGatewayPrefixListReferencesPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetTransitGatewayPrefixListReferencesPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetTransitGatewayRouteTableAssociationsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetTransitGatewayRouteTableAssociationsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetTransitGatewayRouteTablePropagationsPaginator due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetTransitGatewayRouteTablePropagationsPaginatorItems due to hidden fields
// Skipping aws_sdk_ec2::paginator::GetVpnConnectionDeviceTypesPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::GetVpnConnectionDeviceTypesPaginatorItems
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::ListImagesInRecycleBinPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::ListImagesInRecycleBinPaginatorItems due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::ListSnapshotsInRecycleBinPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::ListSnapshotsInRecycleBinPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::SearchLocalGatewayRoutesPaginator due to
// hidden fields
// Skipping aws_sdk_ec2::paginator::SearchLocalGatewayRoutesPaginatorItems due
// to hidden fields
// Skipping aws_sdk_ec2::paginator::SearchTransitGatewayMulticastGroupsPaginator
// due to hidden fields
// Skipping aws_sdk_ec2::paginator::SearchTransitGatewayMulticastGroupsPaginatorItems due to hidden fields
